
com_rev3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006404  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080064c4  080064c4  000164c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064fc  080064fc  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  080064fc  080064fc  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064fc  080064fc  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064fc  080064fc  000164fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006500  08006500  00016500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08006504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000040  08006544  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08006544  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcb1  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb3  00000000  00000000  0002bd19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  0002d8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  0002e590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d90  00000000  00000000  0002f178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010eb5  00000000  00000000  00032f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004becc  00000000  00000000  00043dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008fc89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e14  00000000  00000000  0008fcdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000040 	.word	0x20000040
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080064ac 	.word	0x080064ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000044 	.word	0x20000044
 8000104:	080064ac 	.word	0x080064ac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f003 fb95 	bl	8003954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f002 ff35 	bl	8003098 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f003 f83f 	bl	80032b0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000232:	f003 f81f 	bl	8003274 <_ZL11MX_DMA_Initv>
  MX_SPI1_Init();
 8000236:	f002 ff81 	bl	800313c <_ZL12MX_SPI1_Initv>
  MX_USART2_UART_Init();
 800023a:	f002 ffe7 	bl	800320c <_ZL19MX_USART2_UART_Initv>
  MX_TIM6_Init();
 800023e:	f002 ffbf 	bl	80031c0 <_ZL12MX_TIM6_Initv>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim6);		//Vklychenie taimera 6
 8000242:	4ba7      	ldr	r3, [pc, #668]	; (80004e0 <main+0x2c0>)
 8000244:	0018      	movs	r0, r3
 8000246:	f005 f8f9 	bl	800543c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim6); //Vklychenie taimera 6
 800024a:	4ba5      	ldr	r3, [pc, #660]	; (80004e0 <main+0x2c0>)
 800024c:	0018      	movs	r0, r3
 800024e:	f005 f90e 	bl	800546e <HAL_TIM_Base_Start_IT>
	uart_rx_state0 = 1;
 8000252:	4ba4      	ldr	r3, [pc, #656]	; (80004e4 <main+0x2c4>)
 8000254:	2201      	movs	r2, #1
 8000256:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart2, (uint8_t*)uart_rx0, 0x35); // Priem po UART
 8000258:	49a3      	ldr	r1, [pc, #652]	; (80004e8 <main+0x2c8>)
 800025a:	4ba4      	ldr	r3, [pc, #656]	; (80004ec <main+0x2cc>)
 800025c:	2235      	movs	r2, #53	; 0x35
 800025e:	0018      	movs	r0, r3
 8000260:	f005 fb8c 	bl	800597c <HAL_UART_Receive_IT>

  while (1)
  {
		/* Preryvaem peredachy, pri oshibkach priema: snachala smotrim pervy bit, esli on nepravilny, to preryvaem, esli pravilny, to smotrim vtoroi bit, esli on nepravilny, to vse preryvaem,
		esli pravilny, to smotrim tretii bit, esli on nepravilny, to vse preryvaem, esli pravilny, to idem dalshe */
		if (uart_rx_state0 == 1 && huart2.RxXferCount < 0x0035 && huart2.RxXferCount > 0) {
 8000264:	4b9f      	ldr	r3, [pc, #636]	; (80004e4 <main+0x2c4>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b01      	cmp	r3, #1
 800026a:	d10d      	bne.n	8000288 <main+0x68>
 800026c:	4b9f      	ldr	r3, [pc, #636]	; (80004ec <main+0x2cc>)
 800026e:	225a      	movs	r2, #90	; 0x5a
 8000270:	5a9b      	ldrh	r3, [r3, r2]
 8000272:	b29b      	uxth	r3, r3
 8000274:	2b34      	cmp	r3, #52	; 0x34
 8000276:	d807      	bhi.n	8000288 <main+0x68>
 8000278:	4b9c      	ldr	r3, [pc, #624]	; (80004ec <main+0x2cc>)
 800027a:	225a      	movs	r2, #90	; 0x5a
 800027c:	5a9b      	ldrh	r3, [r3, r2]
 800027e:	b29b      	uxth	r3, r3
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <main+0x68>
 8000284:	2301      	movs	r3, #1
 8000286:	e000      	b.n	800028a <main+0x6a>
 8000288:	2300      	movs	r3, #0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d022      	beq.n	80002d4 <main+0xb4>
			if (uartRxFlagOn == 0) {
 800028e:	4b98      	ldr	r3, [pc, #608]	; (80004f0 <main+0x2d0>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d106      	bne.n	80002a4 <main+0x84>
				uartRxMs = 0;
 8000296:	4b97      	ldr	r3, [pc, #604]	; (80004f4 <main+0x2d4>)
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
				uartRxFlagOn = 1;
 800029c:	4b94      	ldr	r3, [pc, #592]	; (80004f0 <main+0x2d0>)
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
 80002a2:	e017      	b.n	80002d4 <main+0xb4>
			} else if (uartRxFlagOn == 1) {
 80002a4:	4b92      	ldr	r3, [pc, #584]	; (80004f0 <main+0x2d0>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d113      	bne.n	80002d4 <main+0xb4>
				if (uartRxMs > UART_RX_PERIOD_MS) {
 80002ac:	4b91      	ldr	r3, [pc, #580]	; (80004f4 <main+0x2d4>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b02      	cmp	r3, #2
 80002b2:	d90f      	bls.n	80002d4 <main+0xb4>
					HAL_UART_AbortReceive_IT(&huart2);
 80002b4:	4b8d      	ldr	r3, [pc, #564]	; (80004ec <main+0x2cc>)
 80002b6:	0018      	movs	r0, r3
 80002b8:	f005 fbea 	bl	8005a90 <HAL_UART_AbortReceive_IT>
					uart_rx_state1 = 1;
 80002bc:	4b8e      	ldr	r3, [pc, #568]	; (80004f8 <main+0x2d8>)
 80002be:	2201      	movs	r2, #1
 80002c0:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2, (uint8_t*)uart_rx1, 0x35);
 80002c2:	498e      	ldr	r1, [pc, #568]	; (80004fc <main+0x2dc>)
 80002c4:	4b89      	ldr	r3, [pc, #548]	; (80004ec <main+0x2cc>)
 80002c6:	2235      	movs	r2, #53	; 0x35
 80002c8:	0018      	movs	r0, r3
 80002ca:	f005 fb57 	bl	800597c <HAL_UART_Receive_IT>
					uartRxFlagOn = 0;
 80002ce:	4b88      	ldr	r3, [pc, #544]	; (80004f0 <main+0x2d0>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (uart_rx_state1 == 1 && huart2.RxXferCount < 0x0035 && huart2.RxXferCount > 0) {
 80002d4:	4b88      	ldr	r3, [pc, #544]	; (80004f8 <main+0x2d8>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d10d      	bne.n	80002f8 <main+0xd8>
 80002dc:	4b83      	ldr	r3, [pc, #524]	; (80004ec <main+0x2cc>)
 80002de:	225a      	movs	r2, #90	; 0x5a
 80002e0:	5a9b      	ldrh	r3, [r3, r2]
 80002e2:	b29b      	uxth	r3, r3
 80002e4:	2b34      	cmp	r3, #52	; 0x34
 80002e6:	d807      	bhi.n	80002f8 <main+0xd8>
 80002e8:	4b80      	ldr	r3, [pc, #512]	; (80004ec <main+0x2cc>)
 80002ea:	225a      	movs	r2, #90	; 0x5a
 80002ec:	5a9b      	ldrh	r3, [r3, r2]
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <main+0xd8>
 80002f4:	2301      	movs	r3, #1
 80002f6:	e000      	b.n	80002fa <main+0xda>
 80002f8:	2300      	movs	r3, #0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d022      	beq.n	8000344 <main+0x124>
			if (uartRxFlagOn == 0) {
 80002fe:	4b7c      	ldr	r3, [pc, #496]	; (80004f0 <main+0x2d0>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d106      	bne.n	8000314 <main+0xf4>
				uartRxMs = 0;
 8000306:	4b7b      	ldr	r3, [pc, #492]	; (80004f4 <main+0x2d4>)
 8000308:	2200      	movs	r2, #0
 800030a:	701a      	strb	r2, [r3, #0]
				uartRxFlagOn = 1;
 800030c:	4b78      	ldr	r3, [pc, #480]	; (80004f0 <main+0x2d0>)
 800030e:	2201      	movs	r2, #1
 8000310:	701a      	strb	r2, [r3, #0]
 8000312:	e017      	b.n	8000344 <main+0x124>
			} else if (uartRxFlagOn == 1) {
 8000314:	4b76      	ldr	r3, [pc, #472]	; (80004f0 <main+0x2d0>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d113      	bne.n	8000344 <main+0x124>
				if (uartRxMs > UART_RX_PERIOD_MS) {
 800031c:	4b75      	ldr	r3, [pc, #468]	; (80004f4 <main+0x2d4>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2b02      	cmp	r3, #2
 8000322:	d90f      	bls.n	8000344 <main+0x124>
					HAL_UART_AbortReceive_IT(&huart2);
 8000324:	4b71      	ldr	r3, [pc, #452]	; (80004ec <main+0x2cc>)
 8000326:	0018      	movs	r0, r3
 8000328:	f005 fbb2 	bl	8005a90 <HAL_UART_AbortReceive_IT>
					uart_rx_state0 = 1;
 800032c:	4b6d      	ldr	r3, [pc, #436]	; (80004e4 <main+0x2c4>)
 800032e:	2201      	movs	r2, #1
 8000330:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2, (uint8_t*) uart_rx0, 0x35);
 8000332:	496d      	ldr	r1, [pc, #436]	; (80004e8 <main+0x2c8>)
 8000334:	4b6d      	ldr	r3, [pc, #436]	; (80004ec <main+0x2cc>)
 8000336:	2235      	movs	r2, #53	; 0x35
 8000338:	0018      	movs	r0, r3
 800033a:	f005 fb1f 	bl	800597c <HAL_UART_Receive_IT>
					uartRxFlagOn = 0;
 800033e:	4b6c      	ldr	r3, [pc, #432]	; (80004f0 <main+0x2d0>)
 8000340:	2200      	movs	r2, #0
 8000342:	701a      	strb	r2, [r3, #0]
			}
		}


		/* Esli zaconchilsya priem po UART, to schitaem i proveryaem kontrolnyy symmy, esli ona nepravilnaya, to vse obnylyaem, a esli pravilnaya, to daem razreschenie na zapis v TY*/
		if(uart_rx_state0 == 2)
 8000344:	4b67      	ldr	r3, [pc, #412]	; (80004e4 <main+0x2c4>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b02      	cmp	r3, #2
 800034a:	d165      	bne.n	8000418 <main+0x1f8>
		{
			uartRxFlagOn = 0;
 800034c:	4b68      	ldr	r3, [pc, #416]	; (80004f0 <main+0x2d0>)
 800034e:	2200      	movs	r2, #0
 8000350:	701a      	strb	r2, [r3, #0]
			if (uart_rx0[0] == 0x55 && uart_rx0[1] == 0xAA && uart_rx0[2] == 0x30) {
 8000352:	4b65      	ldr	r3, [pc, #404]	; (80004e8 <main+0x2c8>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b55      	cmp	r3, #85	; 0x55
 8000358:	d158      	bne.n	800040c <main+0x1ec>
 800035a:	4b63      	ldr	r3, [pc, #396]	; (80004e8 <main+0x2c8>)
 800035c:	785b      	ldrb	r3, [r3, #1]
 800035e:	2baa      	cmp	r3, #170	; 0xaa
 8000360:	d154      	bne.n	800040c <main+0x1ec>
 8000362:	4b61      	ldr	r3, [pc, #388]	; (80004e8 <main+0x2c8>)
 8000364:	789b      	ldrb	r3, [r3, #2]
 8000366:	2b30      	cmp	r3, #48	; 0x30
 8000368:	d150      	bne.n	800040c <main+0x1ec>

			uart_rx_ctrl_summ = 0;
 800036a:	4b65      	ldr	r3, [pc, #404]	; (8000500 <main+0x2e0>)
 800036c:	2200      	movs	r2, #0
 800036e:	801a      	strh	r2, [r3, #0]
			for (uint8_t i = 0; i <= 50; i++) {
 8000370:	1dfb      	adds	r3, r7, #7
 8000372:	2200      	movs	r2, #0
 8000374:	701a      	strb	r2, [r3, #0]
 8000376:	1dfb      	adds	r3, r7, #7
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b32      	cmp	r3, #50	; 0x32
 800037c:	d810      	bhi.n	80003a0 <main+0x180>
				uart_rx_ctrl_summ += uart_rx0[i];
 800037e:	1dfb      	adds	r3, r7, #7
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	4a59      	ldr	r2, [pc, #356]	; (80004e8 <main+0x2c8>)
 8000384:	5cd3      	ldrb	r3, [r2, r3]
 8000386:	b29a      	uxth	r2, r3
 8000388:	4b5d      	ldr	r3, [pc, #372]	; (8000500 <main+0x2e0>)
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	18d3      	adds	r3, r2, r3
 800038e:	b29a      	uxth	r2, r3
 8000390:	4b5b      	ldr	r3, [pc, #364]	; (8000500 <main+0x2e0>)
 8000392:	801a      	strh	r2, [r3, #0]
			for (uint8_t i = 0; i <= 50; i++) {
 8000394:	1dfb      	adds	r3, r7, #7
 8000396:	781a      	ldrb	r2, [r3, #0]
 8000398:	1dfb      	adds	r3, r7, #7
 800039a:	3201      	adds	r2, #1
 800039c:	701a      	strb	r2, [r3, #0]
 800039e:	e7ea      	b.n	8000376 <main+0x156>
			}

			uart_rx_ctrl_summArr[0x00] = (uint8_t) uart_rx_ctrl_summ;
 80003a0:	4b57      	ldr	r3, [pc, #348]	; (8000500 <main+0x2e0>)
 80003a2:	881b      	ldrh	r3, [r3, #0]
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	4b57      	ldr	r3, [pc, #348]	; (8000504 <main+0x2e4>)
 80003a8:	701a      	strb	r2, [r3, #0]
			uart_rx_ctrl_summArr[0x01] = (uint8_t) (uart_rx_ctrl_summ >> 8);
 80003aa:	4b55      	ldr	r3, [pc, #340]	; (8000500 <main+0x2e0>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	0a1b      	lsrs	r3, r3, #8
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	b2da      	uxtb	r2, r3
 80003b4:	4b53      	ldr	r3, [pc, #332]	; (8000504 <main+0x2e4>)
 80003b6:	705a      	strb	r2, [r3, #1]

			if (uart_rx_ctrl_summArr[0x00] == uart_rx0[0x33] && uart_rx_ctrl_summArr[0x01] == uart_rx0[0x34]) {
 80003b8:	4b52      	ldr	r3, [pc, #328]	; (8000504 <main+0x2e4>)
 80003ba:	781a      	ldrb	r2, [r3, #0]
 80003bc:	4b4a      	ldr	r3, [pc, #296]	; (80004e8 <main+0x2c8>)
 80003be:	2133      	movs	r1, #51	; 0x33
 80003c0:	5c5b      	ldrb	r3, [r3, r1]
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d122      	bne.n	800040c <main+0x1ec>
 80003c6:	4b4f      	ldr	r3, [pc, #316]	; (8000504 <main+0x2e4>)
 80003c8:	785a      	ldrb	r2, [r3, #1]
 80003ca:	4b47      	ldr	r3, [pc, #284]	; (80004e8 <main+0x2c8>)
 80003cc:	2134      	movs	r1, #52	; 0x34
 80003ce:	5c5b      	ldrb	r3, [r3, r1]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d11b      	bne.n	800040c <main+0x1ec>
				if (uart_rx_ready == 0) {
 80003d4:	4b4c      	ldr	r3, [pc, #304]	; (8000508 <main+0x2e8>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d117      	bne.n	800040c <main+0x1ec>
					for (uint8_t i = 0; i <= 52; i++) {
 80003dc:	1dbb      	adds	r3, r7, #6
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
 80003e2:	1dbb      	adds	r3, r7, #6
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	2b34      	cmp	r3, #52	; 0x34
 80003e8:	d80d      	bhi.n	8000406 <main+0x1e6>
						uart_rx_slice[i] = uart_rx0[i];
 80003ea:	1dbb      	adds	r3, r7, #6
 80003ec:	781a      	ldrb	r2, [r3, #0]
 80003ee:	1dbb      	adds	r3, r7, #6
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	493d      	ldr	r1, [pc, #244]	; (80004e8 <main+0x2c8>)
 80003f4:	5c89      	ldrb	r1, [r1, r2]
 80003f6:	4a45      	ldr	r2, [pc, #276]	; (800050c <main+0x2ec>)
 80003f8:	54d1      	strb	r1, [r2, r3]
					for (uint8_t i = 0; i <= 52; i++) {
 80003fa:	1dbb      	adds	r3, r7, #6
 80003fc:	781a      	ldrb	r2, [r3, #0]
 80003fe:	1dbb      	adds	r3, r7, #6
 8000400:	3201      	adds	r2, #1
 8000402:	701a      	strb	r2, [r3, #0]
 8000404:	e7ed      	b.n	80003e2 <main+0x1c2>
					}

					uart_rx_ready = 1;
 8000406:	4b40      	ldr	r3, [pc, #256]	; (8000508 <main+0x2e8>)
 8000408:	2201      	movs	r2, #1
 800040a:	701a      	strb	r2, [r3, #0]
				}
			}
			}
			uart_rx_state0 = 0;
 800040c:	4b35      	ldr	r3, [pc, #212]	; (80004e4 <main+0x2c4>)
 800040e:	2200      	movs	r2, #0
 8000410:	701a      	strb	r2, [r3, #0]
			rxNum = 1;
 8000412:	4b3f      	ldr	r3, [pc, #252]	; (8000510 <main+0x2f0>)
 8000414:	2201      	movs	r2, #1
 8000416:	701a      	strb	r2, [r3, #0]





		if(uart_rx_state1 == 2)
 8000418:	4b37      	ldr	r3, [pc, #220]	; (80004f8 <main+0x2d8>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b02      	cmp	r3, #2
 800041e:	d000      	beq.n	8000422 <main+0x202>
 8000420:	e081      	b.n	8000526 <main+0x306>
		{
			uartRxFlagOn = 0;
 8000422:	4b33      	ldr	r3, [pc, #204]	; (80004f0 <main+0x2d0>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
			if (uart_rx1[0] == 0x55 && uart_rx1[1] == 0xAA && uart_rx1[2] == 0x30) {
 8000428:	4b34      	ldr	r3, [pc, #208]	; (80004fc <main+0x2dc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b55      	cmp	r3, #85	; 0x55
 800042e:	d000      	beq.n	8000432 <main+0x212>
 8000430:	e073      	b.n	800051a <main+0x2fa>
 8000432:	4b32      	ldr	r3, [pc, #200]	; (80004fc <main+0x2dc>)
 8000434:	785b      	ldrb	r3, [r3, #1]
 8000436:	2baa      	cmp	r3, #170	; 0xaa
 8000438:	d000      	beq.n	800043c <main+0x21c>
 800043a:	e06e      	b.n	800051a <main+0x2fa>
 800043c:	4b2f      	ldr	r3, [pc, #188]	; (80004fc <main+0x2dc>)
 800043e:	789b      	ldrb	r3, [r3, #2]
 8000440:	2b30      	cmp	r3, #48	; 0x30
 8000442:	d16a      	bne.n	800051a <main+0x2fa>

			uart_rx_ctrl_summ = 0;
 8000444:	4b2e      	ldr	r3, [pc, #184]	; (8000500 <main+0x2e0>)
 8000446:	2200      	movs	r2, #0
 8000448:	801a      	strh	r2, [r3, #0]
			for (uint8_t i = 0; i <= 50; i++) {
 800044a:	1d7b      	adds	r3, r7, #5
 800044c:	2200      	movs	r2, #0
 800044e:	701a      	strb	r2, [r3, #0]
 8000450:	1d7b      	adds	r3, r7, #5
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b32      	cmp	r3, #50	; 0x32
 8000456:	d810      	bhi.n	800047a <main+0x25a>
				uart_rx_ctrl_summ += uart_rx1[i];
 8000458:	1d7b      	adds	r3, r7, #5
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	4a27      	ldr	r2, [pc, #156]	; (80004fc <main+0x2dc>)
 800045e:	5cd3      	ldrb	r3, [r2, r3]
 8000460:	b29a      	uxth	r2, r3
 8000462:	4b27      	ldr	r3, [pc, #156]	; (8000500 <main+0x2e0>)
 8000464:	881b      	ldrh	r3, [r3, #0]
 8000466:	18d3      	adds	r3, r2, r3
 8000468:	b29a      	uxth	r2, r3
 800046a:	4b25      	ldr	r3, [pc, #148]	; (8000500 <main+0x2e0>)
 800046c:	801a      	strh	r2, [r3, #0]
			for (uint8_t i = 0; i <= 50; i++) {
 800046e:	1d7b      	adds	r3, r7, #5
 8000470:	781a      	ldrb	r2, [r3, #0]
 8000472:	1d7b      	adds	r3, r7, #5
 8000474:	3201      	adds	r2, #1
 8000476:	701a      	strb	r2, [r3, #0]
 8000478:	e7ea      	b.n	8000450 <main+0x230>
			}

			uart_rx_ctrl_summArr[0x00] = (uint8_t) uart_rx_ctrl_summ;
 800047a:	4b21      	ldr	r3, [pc, #132]	; (8000500 <main+0x2e0>)
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	b2da      	uxtb	r2, r3
 8000480:	4b20      	ldr	r3, [pc, #128]	; (8000504 <main+0x2e4>)
 8000482:	701a      	strb	r2, [r3, #0]
			uart_rx_ctrl_summArr[0x01] = (uint8_t) (uart_rx_ctrl_summ >> 8);
 8000484:	4b1e      	ldr	r3, [pc, #120]	; (8000500 <main+0x2e0>)
 8000486:	881b      	ldrh	r3, [r3, #0]
 8000488:	0a1b      	lsrs	r3, r3, #8
 800048a:	b29b      	uxth	r3, r3
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b1d      	ldr	r3, [pc, #116]	; (8000504 <main+0x2e4>)
 8000490:	705a      	strb	r2, [r3, #1]

			if (uart_rx_ctrl_summArr[0x00] == uart_rx1[0x33] && uart_rx_ctrl_summArr[0x01] == uart_rx1[0x34]) {
 8000492:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <main+0x2e4>)
 8000494:	781a      	ldrb	r2, [r3, #0]
 8000496:	4b19      	ldr	r3, [pc, #100]	; (80004fc <main+0x2dc>)
 8000498:	2133      	movs	r1, #51	; 0x33
 800049a:	5c5b      	ldrb	r3, [r3, r1]
 800049c:	429a      	cmp	r2, r3
 800049e:	d13c      	bne.n	800051a <main+0x2fa>
 80004a0:	4b18      	ldr	r3, [pc, #96]	; (8000504 <main+0x2e4>)
 80004a2:	785a      	ldrb	r2, [r3, #1]
 80004a4:	4b15      	ldr	r3, [pc, #84]	; (80004fc <main+0x2dc>)
 80004a6:	2134      	movs	r1, #52	; 0x34
 80004a8:	5c5b      	ldrb	r3, [r3, r1]
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d135      	bne.n	800051a <main+0x2fa>
				if (uart_rx_ready == 0) {
 80004ae:	4b16      	ldr	r3, [pc, #88]	; (8000508 <main+0x2e8>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d131      	bne.n	800051a <main+0x2fa>
					for (uint8_t i = 0; i <= 52; i++) {
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b34      	cmp	r3, #52	; 0x34
 80004c2:	d827      	bhi.n	8000514 <main+0x2f4>
						uart_rx_slice[i] = uart_rx1[i];
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	490b      	ldr	r1, [pc, #44]	; (80004fc <main+0x2dc>)
 80004ce:	5c89      	ldrb	r1, [r1, r2]
 80004d0:	4a0e      	ldr	r2, [pc, #56]	; (800050c <main+0x2ec>)
 80004d2:	54d1      	strb	r1, [r2, r3]
					for (uint8_t i = 0; i <= 52; i++) {
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	781a      	ldrb	r2, [r3, #0]
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	3201      	adds	r2, #1
 80004dc:	701a      	strb	r2, [r3, #0]
 80004de:	e7ed      	b.n	80004bc <main+0x29c>
 80004e0:	20000148 	.word	0x20000148
 80004e4:	20000315 	.word	0x20000315
 80004e8:	20000218 	.word	0x20000218
 80004ec:	20000188 	.word	0x20000188
 80004f0:	2000038f 	.word	0x2000038f
 80004f4:	2000038e 	.word	0x2000038e
 80004f8:	20000316 	.word	0x20000316
 80004fc:	2000027c 	.word	0x2000027c
 8000500:	20000388 	.word	0x20000388
 8000504:	2000038c 	.word	0x2000038c
 8000508:	20000384 	.word	0x20000384
 800050c:	200002e0 	.word	0x200002e0
 8000510:	20000317 	.word	0x20000317
					}

					uart_rx_ready = 1;
 8000514:	4bc1      	ldr	r3, [pc, #772]	; (800081c <main+0x5fc>)
 8000516:	2201      	movs	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]
				}
			}
			}
			uart_rx_state1 = 0;
 800051a:	4bc1      	ldr	r3, [pc, #772]	; (8000820 <main+0x600>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
			rxNum = 0;
 8000520:	4bc0      	ldr	r3, [pc, #768]	; (8000824 <main+0x604>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]



		/* *****PORT_1*****--------------------------------------------------------------------------------------------------------------*/
		/* Esli sostoyanie SPI ravno 0, to proveryaem, chto proishodit opros nyznogo porta, i vse nogi spi podnyaty----------------------*/
		if(spi_state == 0 && spi_port == 1 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 8000526:	4bc0      	ldr	r3, [pc, #768]	; (8000828 <main+0x608>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d147      	bne.n	80005be <main+0x39e>
 800052e:	4bbf      	ldr	r3, [pc, #764]	; (800082c <main+0x60c>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d143      	bne.n	80005be <main+0x39e>
 8000536:	4bbe      	ldr	r3, [pc, #760]	; (8000830 <main+0x610>)
 8000538:	691a      	ldr	r2, [r3, #16]
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	4013      	ands	r3, r2
 8000540:	d03d      	beq.n	80005be <main+0x39e>
 8000542:	4bbb      	ldr	r3, [pc, #748]	; (8000830 <main+0x610>)
 8000544:	691a      	ldr	r2, [r3, #16]
 8000546:	2380      	movs	r3, #128	; 0x80
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	4013      	ands	r3, r2
 800054c:	d037      	beq.n	80005be <main+0x39e>
 800054e:	4bb8      	ldr	r3, [pc, #736]	; (8000830 <main+0x610>)
 8000550:	691b      	ldr	r3, [r3, #16]
 8000552:	2280      	movs	r2, #128	; 0x80
 8000554:	4013      	ands	r3, r2
 8000556:	d032      	beq.n	80005be <main+0x39e>
 8000558:	4bb5      	ldr	r3, [pc, #724]	; (8000830 <main+0x610>)
 800055a:	691b      	ldr	r3, [r3, #16]
 800055c:	2240      	movs	r2, #64	; 0x40
 800055e:	4013      	ands	r3, r2
 8000560:	d02d      	beq.n	80005be <main+0x39e>
 8000562:	4bb4      	ldr	r3, [pc, #720]	; (8000834 <main+0x614>)
 8000564:	691a      	ldr	r2, [r3, #16]
 8000566:	2380      	movs	r3, #128	; 0x80
 8000568:	021b      	lsls	r3, r3, #8
 800056a:	4013      	ands	r3, r2
 800056c:	d027      	beq.n	80005be <main+0x39e>
 800056e:	4bb1      	ldr	r3, [pc, #708]	; (8000834 <main+0x614>)
 8000570:	691a      	ldr	r2, [r3, #16]
 8000572:	2380      	movs	r3, #128	; 0x80
 8000574:	01db      	lsls	r3, r3, #7
 8000576:	4013      	ands	r3, r2
 8000578:	d021      	beq.n	80005be <main+0x39e>
 800057a:	4bae      	ldr	r3, [pc, #696]	; (8000834 <main+0x614>)
 800057c:	691a      	ldr	r2, [r3, #16]
 800057e:	2380      	movs	r3, #128	; 0x80
 8000580:	019b      	lsls	r3, r3, #6
 8000582:	4013      	ands	r3, r2
 8000584:	d01b      	beq.n	80005be <main+0x39e>
 8000586:	4bab      	ldr	r3, [pc, #684]	; (8000834 <main+0x614>)
 8000588:	691a      	ldr	r2, [r3, #16]
 800058a:	2380      	movs	r3, #128	; 0x80
 800058c:	015b      	lsls	r3, r3, #5
 800058e:	4013      	ands	r3, r2
 8000590:	d015      	beq.n	80005be <main+0x39e>
 8000592:	4ba8      	ldr	r3, [pc, #672]	; (8000834 <main+0x614>)
 8000594:	691b      	ldr	r3, [r3, #16]
 8000596:	2204      	movs	r2, #4
 8000598:	4013      	ands	r3, r2
 800059a:	d010      	beq.n	80005be <main+0x39e>
 800059c:	4ba5      	ldr	r3, [pc, #660]	; (8000834 <main+0x614>)
 800059e:	691b      	ldr	r3, [r3, #16]
 80005a0:	2202      	movs	r2, #2
 80005a2:	4013      	ands	r3, r2
 80005a4:	d00b      	beq.n	80005be <main+0x39e>
 80005a6:	4ba3      	ldr	r3, [pc, #652]	; (8000834 <main+0x614>)
 80005a8:	691b      	ldr	r3, [r3, #16]
 80005aa:	2201      	movs	r2, #1
 80005ac:	4013      	ands	r3, r2
 80005ae:	d006      	beq.n	80005be <main+0x39e>
 80005b0:	4b9f      	ldr	r3, [pc, #636]	; (8000830 <main+0x610>)
 80005b2:	691b      	ldr	r3, [r3, #16]
 80005b4:	2220      	movs	r2, #32
 80005b6:	4013      	ands	r3, r2
 80005b8:	d001      	beq.n	80005be <main+0x39e>
 80005ba:	2301      	movs	r3, #1
 80005bc:	e000      	b.n	80005c0 <main+0x3a0>
 80005be:	2300      	movs	r3, #0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d100      	bne.n	80005c6 <main+0x3a6>
 80005c4:	e0a5      	b.n	8000712 <main+0x4f2>
		{
			spi_state = 1;
 80005c6:	4b98      	ldr	r3, [pc, #608]	; (8000828 <main+0x608>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	701a      	strb	r2, [r3, #0]

			/* Prisvaivaem massivy otpravlyaemomy po SPI znacheniya signalov, prinyatyh po UART--------------------------------------------*/
			spi_tx[0] = uart_rx_slice[3];
 80005cc:	4b9a      	ldr	r3, [pc, #616]	; (8000838 <main+0x618>)
 80005ce:	78da      	ldrb	r2, [r3, #3]
 80005d0:	4b9a      	ldr	r3, [pc, #616]	; (800083c <main+0x61c>)
 80005d2:	701a      	strb	r2, [r3, #0]
			spi_tx[1] = uart_rx_slice[4];
 80005d4:	4b98      	ldr	r3, [pc, #608]	; (8000838 <main+0x618>)
 80005d6:	791a      	ldrb	r2, [r3, #4]
 80005d8:	4b98      	ldr	r3, [pc, #608]	; (800083c <main+0x61c>)
 80005da:	705a      	strb	r2, [r3, #1]
			spi_tx[2] = uart_rx_slice[5];
 80005dc:	4b96      	ldr	r3, [pc, #600]	; (8000838 <main+0x618>)
 80005de:	795a      	ldrb	r2, [r3, #5]
 80005e0:	4b96      	ldr	r3, [pc, #600]	; (800083c <main+0x61c>)
 80005e2:	709a      	strb	r2, [r3, #2]
			spi_tx[3] = uart_rx_slice[6];
 80005e4:	4b94      	ldr	r3, [pc, #592]	; (8000838 <main+0x618>)
 80005e6:	799a      	ldrb	r2, [r3, #6]
 80005e8:	4b94      	ldr	r3, [pc, #592]	; (800083c <main+0x61c>)
 80005ea:	70da      	strb	r2, [r3, #3]

			/* Schitayem kontrolnyu summy, i zapisyvaem v poslednii element massiva, otpravlyaemogo po SPI---------------------------------*/
			spi_tx[5] = spi_tx[0] + spi_tx[1] + spi_tx[2] + spi_tx[3] + spi_tx[4];
 80005ec:	4b93      	ldr	r3, [pc, #588]	; (800083c <main+0x61c>)
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	4b92      	ldr	r3, [pc, #584]	; (800083c <main+0x61c>)
 80005f2:	785b      	ldrb	r3, [r3, #1]
 80005f4:	18d3      	adds	r3, r2, r3
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b90      	ldr	r3, [pc, #576]	; (800083c <main+0x61c>)
 80005fa:	789b      	ldrb	r3, [r3, #2]
 80005fc:	18d3      	adds	r3, r2, r3
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	4b8e      	ldr	r3, [pc, #568]	; (800083c <main+0x61c>)
 8000602:	78db      	ldrb	r3, [r3, #3]
 8000604:	18d3      	adds	r3, r2, r3
 8000606:	b2da      	uxtb	r2, r3
 8000608:	4b8c      	ldr	r3, [pc, #560]	; (800083c <main+0x61c>)
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	18d3      	adds	r3, r2, r3
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b8a      	ldr	r3, [pc, #552]	; (800083c <main+0x61c>)
 8000612:	715a      	strb	r2, [r3, #5]

			/* Opyskaem nogy CS, i proizvodim priemo-peredachu po SPI----------------------------------------------------------------------*/
			GPIOC->BRR = (1<<9);
 8000614:	4b86      	ldr	r3, [pc, #536]	; (8000830 <main+0x610>)
 8000616:	2280      	movs	r2, #128	; 0x80
 8000618:	0092      	lsls	r2, r2, #2
 800061a:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*)spi_tx, (uint8_t*)spi_rx, 0x06);
 800061c:	4a88      	ldr	r2, [pc, #544]	; (8000840 <main+0x620>)
 800061e:	4987      	ldr	r1, [pc, #540]	; (800083c <main+0x61c>)
 8000620:	4888      	ldr	r0, [pc, #544]	; (8000844 <main+0x624>)
 8000622:	2306      	movs	r3, #6
 8000624:	f004 fa9a 	bl	8004b5c <HAL_SPI_TransmitReceive_IT>

			/* Platy vstavili v port 12----------------------------------------------------------------------------------------------------*/
			if(board_12_type != 0x00 && (last_port_state & (1<<11)) == 0x00)
 8000628:	4b87      	ldr	r3, [pc, #540]	; (8000848 <main+0x628>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d018      	beq.n	8000662 <main+0x442>
 8000630:	4b86      	ldr	r3, [pc, #536]	; (800084c <main+0x62c>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	001a      	movs	r2, r3
 8000636:	2380      	movs	r3, #128	; 0x80
 8000638:	011b      	lsls	r3, r3, #4
 800063a:	4013      	ands	r3, r2
 800063c:	d111      	bne.n	8000662 <main+0x442>
			{
				uart_tx   [0x04] &= ~ (1 << 3); // Zapis 0 v bity sostoyaniya porta
 800063e:	4b84      	ldr	r3, [pc, #528]	; (8000850 <main+0x630>)
 8000640:	791b      	ldrb	r3, [r3, #4]
 8000642:	2208      	movs	r2, #8
 8000644:	4393      	bics	r3, r2
 8000646:	b2da      	uxtb	r2, r3
 8000648:	4b81      	ldr	r3, [pc, #516]	; (8000850 <main+0x630>)
 800064a:	711a      	strb	r2, [r3, #4]
				last_port_state |= (1 << 11); 	      // Poslednee sostoyanie ravno 1
 800064c:	4b7f      	ldr	r3, [pc, #508]	; (800084c <main+0x62c>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	2280      	movs	r2, #128	; 0x80
 8000652:	0112      	lsls	r2, r2, #4
 8000654:	4313      	orrs	r3, r2
 8000656:	b29a      	uxth	r2, r3
 8000658:	4b7c      	ldr	r3, [pc, #496]	; (800084c <main+0x62c>)
 800065a:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;		      // Razreshaem peredachy
 800065c:	4b7d      	ldr	r3, [pc, #500]	; (8000854 <main+0x634>)
 800065e:	2201      	movs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]
			}

			/* Platy dostali iz porta 12---------------------------------------------------------------------------------------------------*/
			if(board_12_type == 0x00 && (last_port_state & (1<<11)) != 0x00)
 8000662:	4b79      	ldr	r3, [pc, #484]	; (8000848 <main+0x628>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d117      	bne.n	800069a <main+0x47a>
 800066a:	4b78      	ldr	r3, [pc, #480]	; (800084c <main+0x62c>)
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	001a      	movs	r2, r3
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	011b      	lsls	r3, r3, #4
 8000674:	4013      	ands	r3, r2
 8000676:	d010      	beq.n	800069a <main+0x47a>
			{
				uart_tx   [0x04] |= (1 << 3); // Zapis 1 v bity sostoyaniya porta
 8000678:	4b75      	ldr	r3, [pc, #468]	; (8000850 <main+0x630>)
 800067a:	791b      	ldrb	r3, [r3, #4]
 800067c:	2208      	movs	r2, #8
 800067e:	4313      	orrs	r3, r2
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4b73      	ldr	r3, [pc, #460]	; (8000850 <main+0x630>)
 8000684:	711a      	strb	r2, [r3, #4]
				last_port_state &= ~ (1 << 11); // Poslednee sostoyanie ravno 0
 8000686:	4b71      	ldr	r3, [pc, #452]	; (800084c <main+0x62c>)
 8000688:	881b      	ldrh	r3, [r3, #0]
 800068a:	4a73      	ldr	r2, [pc, #460]	; (8000858 <main+0x638>)
 800068c:	4013      	ands	r3, r2
 800068e:	b29a      	uxth	r2, r3
 8000690:	4b6e      	ldr	r3, [pc, #440]	; (800084c <main+0x62c>)
 8000692:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;	      // Razreshaem peredachy
 8000694:	4b6f      	ldr	r3, [pc, #444]	; (8000854 <main+0x634>)
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
			}

			/* Otpravka massiva pri izmenenii v signale------------------------------------------------------------------------------------*/
			if (last_sig_p_12[0] != uart_tx[49])
 800069a:	4b70      	ldr	r3, [pc, #448]	; (800085c <main+0x63c>)
 800069c:	781a      	ldrb	r2, [r3, #0]
 800069e:	4b6c      	ldr	r3, [pc, #432]	; (8000850 <main+0x630>)
 80006a0:	2131      	movs	r1, #49	; 0x31
 80006a2:	5c5b      	ldrb	r3, [r3, r1]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d007      	beq.n	80006b8 <main+0x498>
			{
				last_sig_p_12[0] = uart_tx[49];
 80006a8:	4b69      	ldr	r3, [pc, #420]	; (8000850 <main+0x630>)
 80006aa:	2231      	movs	r2, #49	; 0x31
 80006ac:	5c9a      	ldrb	r2, [r3, r2]
 80006ae:	4b6b      	ldr	r3, [pc, #428]	; (800085c <main+0x63c>)
 80006b0:	701a      	strb	r2, [r3, #0]
				uart_tx_on = 1;
 80006b2:	4b68      	ldr	r3, [pc, #416]	; (8000854 <main+0x634>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_12[1] != uart_tx[50])
 80006b8:	4b68      	ldr	r3, [pc, #416]	; (800085c <main+0x63c>)
 80006ba:	785a      	ldrb	r2, [r3, #1]
 80006bc:	4b64      	ldr	r3, [pc, #400]	; (8000850 <main+0x630>)
 80006be:	2132      	movs	r1, #50	; 0x32
 80006c0:	5c5b      	ldrb	r3, [r3, r1]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d007      	beq.n	80006d6 <main+0x4b6>
			{
				last_sig_p_12[1] = uart_tx[50];
 80006c6:	4b62      	ldr	r3, [pc, #392]	; (8000850 <main+0x630>)
 80006c8:	2232      	movs	r2, #50	; 0x32
 80006ca:	5c9a      	ldrb	r2, [r3, r2]
 80006cc:	4b63      	ldr	r3, [pc, #396]	; (800085c <main+0x63c>)
 80006ce:	705a      	strb	r2, [r3, #1]
				uart_tx_on = 1;
 80006d0:	4b60      	ldr	r3, [pc, #384]	; (8000854 <main+0x634>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_12[2] != uart_tx[51])
 80006d6:	4b61      	ldr	r3, [pc, #388]	; (800085c <main+0x63c>)
 80006d8:	789a      	ldrb	r2, [r3, #2]
 80006da:	4b5d      	ldr	r3, [pc, #372]	; (8000850 <main+0x630>)
 80006dc:	2133      	movs	r1, #51	; 0x33
 80006de:	5c5b      	ldrb	r3, [r3, r1]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d007      	beq.n	80006f4 <main+0x4d4>
			{
				last_sig_p_12[2] = uart_tx[51];
 80006e4:	4b5a      	ldr	r3, [pc, #360]	; (8000850 <main+0x630>)
 80006e6:	2233      	movs	r2, #51	; 0x33
 80006e8:	5c9a      	ldrb	r2, [r3, r2]
 80006ea:	4b5c      	ldr	r3, [pc, #368]	; (800085c <main+0x63c>)
 80006ec:	709a      	strb	r2, [r3, #2]
				uart_tx_on = 1;
 80006ee:	4b59      	ldr	r3, [pc, #356]	; (8000854 <main+0x634>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_12[3] != uart_tx[52])
 80006f4:	4b59      	ldr	r3, [pc, #356]	; (800085c <main+0x63c>)
 80006f6:	78da      	ldrb	r2, [r3, #3]
 80006f8:	4b55      	ldr	r3, [pc, #340]	; (8000850 <main+0x630>)
 80006fa:	2134      	movs	r1, #52	; 0x34
 80006fc:	5c5b      	ldrb	r3, [r3, r1]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d007      	beq.n	8000712 <main+0x4f2>
			{
				last_sig_p_12[3] = uart_tx[52];
 8000702:	4b53      	ldr	r3, [pc, #332]	; (8000850 <main+0x630>)
 8000704:	2234      	movs	r2, #52	; 0x34
 8000706:	5c9a      	ldrb	r2, [r3, r2]
 8000708:	4b54      	ldr	r3, [pc, #336]	; (800085c <main+0x63c>)
 800070a:	70da      	strb	r2, [r3, #3]
				uart_tx_on = 1;
 800070c:	4b51      	ldr	r3, [pc, #324]	; (8000854 <main+0x634>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]


		}


		if(spi_state == 2 && spi_port == 1 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 8000712:	4b45      	ldr	r3, [pc, #276]	; (8000828 <main+0x608>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b02      	cmp	r3, #2
 8000718:	d147      	bne.n	80007aa <main+0x58a>
 800071a:	4b44      	ldr	r3, [pc, #272]	; (800082c <main+0x60c>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d143      	bne.n	80007aa <main+0x58a>
 8000722:	4b43      	ldr	r3, [pc, #268]	; (8000830 <main+0x610>)
 8000724:	691a      	ldr	r2, [r3, #16]
 8000726:	2380      	movs	r3, #128	; 0x80
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4013      	ands	r3, r2
 800072c:	d03d      	beq.n	80007aa <main+0x58a>
 800072e:	4b40      	ldr	r3, [pc, #256]	; (8000830 <main+0x610>)
 8000730:	691a      	ldr	r2, [r3, #16]
 8000732:	2380      	movs	r3, #128	; 0x80
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	4013      	ands	r3, r2
 8000738:	d037      	beq.n	80007aa <main+0x58a>
 800073a:	4b3d      	ldr	r3, [pc, #244]	; (8000830 <main+0x610>)
 800073c:	691b      	ldr	r3, [r3, #16]
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	4013      	ands	r3, r2
 8000742:	d032      	beq.n	80007aa <main+0x58a>
 8000744:	4b3a      	ldr	r3, [pc, #232]	; (8000830 <main+0x610>)
 8000746:	691b      	ldr	r3, [r3, #16]
 8000748:	2240      	movs	r2, #64	; 0x40
 800074a:	4013      	ands	r3, r2
 800074c:	d02d      	beq.n	80007aa <main+0x58a>
 800074e:	4b39      	ldr	r3, [pc, #228]	; (8000834 <main+0x614>)
 8000750:	691a      	ldr	r2, [r3, #16]
 8000752:	2380      	movs	r3, #128	; 0x80
 8000754:	021b      	lsls	r3, r3, #8
 8000756:	4013      	ands	r3, r2
 8000758:	d027      	beq.n	80007aa <main+0x58a>
 800075a:	4b36      	ldr	r3, [pc, #216]	; (8000834 <main+0x614>)
 800075c:	691a      	ldr	r2, [r3, #16]
 800075e:	2380      	movs	r3, #128	; 0x80
 8000760:	01db      	lsls	r3, r3, #7
 8000762:	4013      	ands	r3, r2
 8000764:	d021      	beq.n	80007aa <main+0x58a>
 8000766:	4b33      	ldr	r3, [pc, #204]	; (8000834 <main+0x614>)
 8000768:	691a      	ldr	r2, [r3, #16]
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	019b      	lsls	r3, r3, #6
 800076e:	4013      	ands	r3, r2
 8000770:	d01b      	beq.n	80007aa <main+0x58a>
 8000772:	4b30      	ldr	r3, [pc, #192]	; (8000834 <main+0x614>)
 8000774:	691a      	ldr	r2, [r3, #16]
 8000776:	2380      	movs	r3, #128	; 0x80
 8000778:	015b      	lsls	r3, r3, #5
 800077a:	4013      	ands	r3, r2
 800077c:	d015      	beq.n	80007aa <main+0x58a>
 800077e:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <main+0x614>)
 8000780:	691b      	ldr	r3, [r3, #16]
 8000782:	2204      	movs	r2, #4
 8000784:	4013      	ands	r3, r2
 8000786:	d010      	beq.n	80007aa <main+0x58a>
 8000788:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <main+0x614>)
 800078a:	691b      	ldr	r3, [r3, #16]
 800078c:	2202      	movs	r2, #2
 800078e:	4013      	ands	r3, r2
 8000790:	d00b      	beq.n	80007aa <main+0x58a>
 8000792:	4b28      	ldr	r3, [pc, #160]	; (8000834 <main+0x614>)
 8000794:	691b      	ldr	r3, [r3, #16]
 8000796:	2201      	movs	r2, #1
 8000798:	4013      	ands	r3, r2
 800079a:	d006      	beq.n	80007aa <main+0x58a>
 800079c:	4b24      	ldr	r3, [pc, #144]	; (8000830 <main+0x610>)
 800079e:	691b      	ldr	r3, [r3, #16]
 80007a0:	2220      	movs	r2, #32
 80007a2:	4013      	ands	r3, r2
 80007a4:	d001      	beq.n	80007aa <main+0x58a>
 80007a6:	2301      	movs	r3, #1
 80007a8:	e000      	b.n	80007ac <main+0x58c>
 80007aa:	2300      	movs	r3, #0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d05e      	beq.n	800086e <main+0x64e>
		{
			spi_rx_ctrl_summ = spi_rx[0] + spi_rx[1] + spi_rx[2] + spi_rx[3] + spi_rx[4];
 80007b0:	4b23      	ldr	r3, [pc, #140]	; (8000840 <main+0x620>)
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <main+0x620>)
 80007b6:	785b      	ldrb	r3, [r3, #1]
 80007b8:	18d3      	adds	r3, r2, r3
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b20      	ldr	r3, [pc, #128]	; (8000840 <main+0x620>)
 80007be:	789b      	ldrb	r3, [r3, #2]
 80007c0:	18d3      	adds	r3, r2, r3
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <main+0x620>)
 80007c6:	78db      	ldrb	r3, [r3, #3]
 80007c8:	18d3      	adds	r3, r2, r3
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <main+0x620>)
 80007ce:	791b      	ldrb	r3, [r3, #4]
 80007d0:	18d3      	adds	r3, r2, r3
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <main+0x640>)
 80007d6:	701a      	strb	r2, [r3, #0]

			if(spi_rx_ctrl_summ == spi_rx[5])
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <main+0x620>)
 80007da:	795a      	ldrb	r2, [r3, #5]
 80007dc:	4b20      	ldr	r3, [pc, #128]	; (8000860 <main+0x640>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d141      	bne.n	8000868 <main+0x648>
			{
				spi_state = 0;
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <main+0x608>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
				spi_port = 2;
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <main+0x60c>)
 80007ec:	2202      	movs	r2, #2
 80007ee:	701a      	strb	r2, [r3, #0]

				board_1_type = spi_rx[4];
 80007f0:	4b13      	ldr	r3, [pc, #76]	; (8000840 <main+0x620>)
 80007f2:	791a      	ldrb	r2, [r3, #4]
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <main+0x644>)
 80007f6:	701a      	strb	r2, [r3, #0]
				uart_tx [5]  = spi_rx[0];
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <main+0x620>)
 80007fa:	781a      	ldrb	r2, [r3, #0]
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <main+0x630>)
 80007fe:	715a      	strb	r2, [r3, #5]
				uart_tx [6]  = spi_rx[1];
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <main+0x620>)
 8000802:	785a      	ldrb	r2, [r3, #1]
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <main+0x630>)
 8000806:	719a      	strb	r2, [r3, #6]
				uart_tx [7]  = spi_rx[2];
 8000808:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <main+0x620>)
 800080a:	789a      	ldrb	r2, [r3, #2]
 800080c:	4b10      	ldr	r3, [pc, #64]	; (8000850 <main+0x630>)
 800080e:	71da      	strb	r2, [r3, #7]
				uart_tx [8]  = spi_rx[3];
 8000810:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <main+0x620>)
 8000812:	78da      	ldrb	r2, [r3, #3]
 8000814:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <main+0x630>)
 8000816:	721a      	strb	r2, [r3, #8]
 8000818:	e029      	b.n	800086e <main+0x64e>
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	20000384 	.word	0x20000384
 8000820:	20000316 	.word	0x20000316
 8000824:	20000317 	.word	0x20000317
 8000828:	20000208 	.word	0x20000208
 800082c:	20000000 	.word	0x20000000
 8000830:	48000800 	.word	0x48000800
 8000834:	48000400 	.word	0x48000400
 8000838:	200002e0 	.word	0x200002e0
 800083c:	20000200 	.word	0x20000200
 8000840:	200001f8 	.word	0x200001f8
 8000844:	2000005c 	.word	0x2000005c
 8000848:	20000214 	.word	0x20000214
 800084c:	20000350 	.word	0x20000350
 8000850:	20000004 	.word	0x20000004
 8000854:	2000003b 	.word	0x2000003b
 8000858:	fffff7ff 	.word	0xfffff7ff
 800085c:	20000380 	.word	0x20000380
 8000860:	20000206 	.word	0x20000206
 8000864:	20000209 	.word	0x20000209
			}
			else
			{
				spi_state = 0;
 8000868:	4bb8      	ldr	r3, [pc, #736]	; (8000b4c <main+0x92c>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
		/* ------------------------------------------------------------------------------------------------------------------------------*/


		/* *****PORT_2*****--------------------------------------------------------------------------------------------------------------*/
		/* Esli sostoyanie SPI ravno 0, to proveryaem, chto proishodit opros nyznogo porta, i vse nogi spi podnyaty----------------------*/
		if(spi_state == 0 && spi_port == 2 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 800086e:	4bb7      	ldr	r3, [pc, #732]	; (8000b4c <main+0x92c>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d147      	bne.n	8000906 <main+0x6e6>
 8000876:	4bb6      	ldr	r3, [pc, #728]	; (8000b50 <main+0x930>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b02      	cmp	r3, #2
 800087c:	d143      	bne.n	8000906 <main+0x6e6>
 800087e:	4bb5      	ldr	r3, [pc, #724]	; (8000b54 <main+0x934>)
 8000880:	691a      	ldr	r2, [r3, #16]
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	4013      	ands	r3, r2
 8000888:	d03d      	beq.n	8000906 <main+0x6e6>
 800088a:	4bb2      	ldr	r3, [pc, #712]	; (8000b54 <main+0x934>)
 800088c:	691a      	ldr	r2, [r3, #16]
 800088e:	2380      	movs	r3, #128	; 0x80
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	4013      	ands	r3, r2
 8000894:	d037      	beq.n	8000906 <main+0x6e6>
 8000896:	4baf      	ldr	r3, [pc, #700]	; (8000b54 <main+0x934>)
 8000898:	691b      	ldr	r3, [r3, #16]
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	4013      	ands	r3, r2
 800089e:	d032      	beq.n	8000906 <main+0x6e6>
 80008a0:	4bac      	ldr	r3, [pc, #688]	; (8000b54 <main+0x934>)
 80008a2:	691b      	ldr	r3, [r3, #16]
 80008a4:	2240      	movs	r2, #64	; 0x40
 80008a6:	4013      	ands	r3, r2
 80008a8:	d02d      	beq.n	8000906 <main+0x6e6>
 80008aa:	4bab      	ldr	r3, [pc, #684]	; (8000b58 <main+0x938>)
 80008ac:	691a      	ldr	r2, [r3, #16]
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	4013      	ands	r3, r2
 80008b4:	d027      	beq.n	8000906 <main+0x6e6>
 80008b6:	4ba8      	ldr	r3, [pc, #672]	; (8000b58 <main+0x938>)
 80008b8:	691a      	ldr	r2, [r3, #16]
 80008ba:	2380      	movs	r3, #128	; 0x80
 80008bc:	01db      	lsls	r3, r3, #7
 80008be:	4013      	ands	r3, r2
 80008c0:	d021      	beq.n	8000906 <main+0x6e6>
 80008c2:	4ba5      	ldr	r3, [pc, #660]	; (8000b58 <main+0x938>)
 80008c4:	691a      	ldr	r2, [r3, #16]
 80008c6:	2380      	movs	r3, #128	; 0x80
 80008c8:	019b      	lsls	r3, r3, #6
 80008ca:	4013      	ands	r3, r2
 80008cc:	d01b      	beq.n	8000906 <main+0x6e6>
 80008ce:	4ba2      	ldr	r3, [pc, #648]	; (8000b58 <main+0x938>)
 80008d0:	691a      	ldr	r2, [r3, #16]
 80008d2:	2380      	movs	r3, #128	; 0x80
 80008d4:	015b      	lsls	r3, r3, #5
 80008d6:	4013      	ands	r3, r2
 80008d8:	d015      	beq.n	8000906 <main+0x6e6>
 80008da:	4b9f      	ldr	r3, [pc, #636]	; (8000b58 <main+0x938>)
 80008dc:	691b      	ldr	r3, [r3, #16]
 80008de:	2204      	movs	r2, #4
 80008e0:	4013      	ands	r3, r2
 80008e2:	d010      	beq.n	8000906 <main+0x6e6>
 80008e4:	4b9c      	ldr	r3, [pc, #624]	; (8000b58 <main+0x938>)
 80008e6:	691b      	ldr	r3, [r3, #16]
 80008e8:	2202      	movs	r2, #2
 80008ea:	4013      	ands	r3, r2
 80008ec:	d00b      	beq.n	8000906 <main+0x6e6>
 80008ee:	4b9a      	ldr	r3, [pc, #616]	; (8000b58 <main+0x938>)
 80008f0:	691b      	ldr	r3, [r3, #16]
 80008f2:	2201      	movs	r2, #1
 80008f4:	4013      	ands	r3, r2
 80008f6:	d006      	beq.n	8000906 <main+0x6e6>
 80008f8:	4b96      	ldr	r3, [pc, #600]	; (8000b54 <main+0x934>)
 80008fa:	691b      	ldr	r3, [r3, #16]
 80008fc:	2220      	movs	r2, #32
 80008fe:	4013      	ands	r3, r2
 8000900:	d001      	beq.n	8000906 <main+0x6e6>
 8000902:	2301      	movs	r3, #1
 8000904:	e000      	b.n	8000908 <main+0x6e8>
 8000906:	2300      	movs	r3, #0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d100      	bne.n	800090e <main+0x6ee>
 800090c:	e09a      	b.n	8000a44 <main+0x824>
		{
			spi_state = 1;
 800090e:	4b8f      	ldr	r3, [pc, #572]	; (8000b4c <main+0x92c>)
 8000910:	2201      	movs	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]

			/* Prisvaivaem massivy otpravlyaemomy po SPI znacheniya signalov, prinyatyh po UART--------------------------------------------*/
			spi_tx[0] = uart_rx_slice[7];
 8000914:	4b91      	ldr	r3, [pc, #580]	; (8000b5c <main+0x93c>)
 8000916:	79da      	ldrb	r2, [r3, #7]
 8000918:	4b91      	ldr	r3, [pc, #580]	; (8000b60 <main+0x940>)
 800091a:	701a      	strb	r2, [r3, #0]
			spi_tx[1] = uart_rx_slice[8];
 800091c:	4b8f      	ldr	r3, [pc, #572]	; (8000b5c <main+0x93c>)
 800091e:	7a1a      	ldrb	r2, [r3, #8]
 8000920:	4b8f      	ldr	r3, [pc, #572]	; (8000b60 <main+0x940>)
 8000922:	705a      	strb	r2, [r3, #1]
			spi_tx[2] = uart_rx_slice[9];
 8000924:	4b8d      	ldr	r3, [pc, #564]	; (8000b5c <main+0x93c>)
 8000926:	7a5a      	ldrb	r2, [r3, #9]
 8000928:	4b8d      	ldr	r3, [pc, #564]	; (8000b60 <main+0x940>)
 800092a:	709a      	strb	r2, [r3, #2]
			spi_tx[3] = uart_rx_slice[10];
 800092c:	4b8b      	ldr	r3, [pc, #556]	; (8000b5c <main+0x93c>)
 800092e:	7a9a      	ldrb	r2, [r3, #10]
 8000930:	4b8b      	ldr	r3, [pc, #556]	; (8000b60 <main+0x940>)
 8000932:	70da      	strb	r2, [r3, #3]

			/* Schitayem kontrolnyu summy, i zapisyvaem v poslednii element massiva, otpravlyaemogo po SPI---------------------------------*/
			spi_tx[5] = spi_tx[0] + spi_tx[1] + spi_tx[2] + spi_tx[3] + spi_tx[4];
 8000934:	4b8a      	ldr	r3, [pc, #552]	; (8000b60 <main+0x940>)
 8000936:	781a      	ldrb	r2, [r3, #0]
 8000938:	4b89      	ldr	r3, [pc, #548]	; (8000b60 <main+0x940>)
 800093a:	785b      	ldrb	r3, [r3, #1]
 800093c:	18d3      	adds	r3, r2, r3
 800093e:	b2da      	uxtb	r2, r3
 8000940:	4b87      	ldr	r3, [pc, #540]	; (8000b60 <main+0x940>)
 8000942:	789b      	ldrb	r3, [r3, #2]
 8000944:	18d3      	adds	r3, r2, r3
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b85      	ldr	r3, [pc, #532]	; (8000b60 <main+0x940>)
 800094a:	78db      	ldrb	r3, [r3, #3]
 800094c:	18d3      	adds	r3, r2, r3
 800094e:	b2da      	uxtb	r2, r3
 8000950:	4b83      	ldr	r3, [pc, #524]	; (8000b60 <main+0x940>)
 8000952:	791b      	ldrb	r3, [r3, #4]
 8000954:	18d3      	adds	r3, r2, r3
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b81      	ldr	r3, [pc, #516]	; (8000b60 <main+0x940>)
 800095a:	715a      	strb	r2, [r3, #5]

			/* Opyskaem nogy CS, i proizvodim priemo-peredachu po SPI----------------------------------------------------------------------*/
			GPIOC->BRR = (1<<8);
 800095c:	4b7d      	ldr	r3, [pc, #500]	; (8000b54 <main+0x934>)
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	0052      	lsls	r2, r2, #1
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*)spi_tx, (uint8_t*)spi_rx, 0x06);
 8000964:	4a7f      	ldr	r2, [pc, #508]	; (8000b64 <main+0x944>)
 8000966:	497e      	ldr	r1, [pc, #504]	; (8000b60 <main+0x940>)
 8000968:	487f      	ldr	r0, [pc, #508]	; (8000b68 <main+0x948>)
 800096a:	2306      	movs	r3, #6
 800096c:	f004 f8f6 	bl	8004b5c <HAL_SPI_TransmitReceive_IT>

			/* Platy vstavili v port 1-----------------------------------------------------------------------------------------------------*/
			if(board_1_type != 0x00 && (last_port_state & (1<<0)) == 0x00)
 8000970:	4b7e      	ldr	r3, [pc, #504]	; (8000b6c <main+0x94c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d016      	beq.n	80009a6 <main+0x786>
 8000978:	4b7d      	ldr	r3, [pc, #500]	; (8000b70 <main+0x950>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	001a      	movs	r2, r3
 800097e:	2301      	movs	r3, #1
 8000980:	4013      	ands	r3, r2
 8000982:	d110      	bne.n	80009a6 <main+0x786>
			{
				uart_tx [0x03] &= ~ (1 << 0); // Zapis 0 v bity sostoyaniya porta
 8000984:	4b7b      	ldr	r3, [pc, #492]	; (8000b74 <main+0x954>)
 8000986:	78db      	ldrb	r3, [r3, #3]
 8000988:	2201      	movs	r2, #1
 800098a:	4393      	bics	r3, r2
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b79      	ldr	r3, [pc, #484]	; (8000b74 <main+0x954>)
 8000990:	70da      	strb	r2, [r3, #3]
				last_port_state |=   (1 << 0);  	// Sostoyanie porta ravno 1
 8000992:	4b77      	ldr	r3, [pc, #476]	; (8000b70 <main+0x950>)
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	2201      	movs	r2, #1
 8000998:	4313      	orrs	r3, r2
 800099a:	b29a      	uxth	r2, r3
 800099c:	4b74      	ldr	r3, [pc, #464]	; (8000b70 <main+0x950>)
 800099e:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;		      // Razreshaem peredachy po UART
 80009a0:	4b75      	ldr	r3, [pc, #468]	; (8000b78 <main+0x958>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	701a      	strb	r2, [r3, #0]
			}

			/* Platy dostali iz porta 1----------------------------------------------------------------------------------------------------*/
			if(board_1_type == 0x00 && (last_port_state & (1<<0)) != 0x00)
 80009a6:	4b71      	ldr	r3, [pc, #452]	; (8000b6c <main+0x94c>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d116      	bne.n	80009dc <main+0x7bc>
 80009ae:	4b70      	ldr	r3, [pc, #448]	; (8000b70 <main+0x950>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	001a      	movs	r2, r3
 80009b4:	2301      	movs	r3, #1
 80009b6:	4013      	ands	r3, r2
 80009b8:	d010      	beq.n	80009dc <main+0x7bc>
			{
				uart_tx [0x03] |= (1 << 0); // Zapis 1 v bity sostoyaniya porta
 80009ba:	4b6e      	ldr	r3, [pc, #440]	; (8000b74 <main+0x954>)
 80009bc:	78db      	ldrb	r3, [r3, #3]
 80009be:	2201      	movs	r2, #1
 80009c0:	4313      	orrs	r3, r2
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b6b      	ldr	r3, [pc, #428]	; (8000b74 <main+0x954>)
 80009c6:	70da      	strb	r2, [r3, #3]
				last_port_state &= ~ (1 << 0);   // Sostoyanie ravno 0
 80009c8:	4b69      	ldr	r3, [pc, #420]	; (8000b70 <main+0x950>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	2201      	movs	r2, #1
 80009ce:	4393      	bics	r3, r2
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	4b67      	ldr	r3, [pc, #412]	; (8000b70 <main+0x950>)
 80009d4:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;
 80009d6:	4b68      	ldr	r3, [pc, #416]	; (8000b78 <main+0x958>)
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
			}

			/* Otpravka massiva pri izmenenii v signale -----------------------------------------------------------------------------------*/
			if (last_sig_p_1[0] != uart_tx[5])
 80009dc:	4b67      	ldr	r3, [pc, #412]	; (8000b7c <main+0x95c>)
 80009de:	781a      	ldrb	r2, [r3, #0]
 80009e0:	4b64      	ldr	r3, [pc, #400]	; (8000b74 <main+0x954>)
 80009e2:	795b      	ldrb	r3, [r3, #5]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d006      	beq.n	80009f6 <main+0x7d6>
			{
				last_sig_p_1[0] = uart_tx[5];
 80009e8:	4b62      	ldr	r3, [pc, #392]	; (8000b74 <main+0x954>)
 80009ea:	795a      	ldrb	r2, [r3, #5]
 80009ec:	4b63      	ldr	r3, [pc, #396]	; (8000b7c <main+0x95c>)
 80009ee:	701a      	strb	r2, [r3, #0]
				uart_tx_on = 1;
 80009f0:	4b61      	ldr	r3, [pc, #388]	; (8000b78 <main+0x958>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_1[1] != uart_tx[6])
 80009f6:	4b61      	ldr	r3, [pc, #388]	; (8000b7c <main+0x95c>)
 80009f8:	785a      	ldrb	r2, [r3, #1]
 80009fa:	4b5e      	ldr	r3, [pc, #376]	; (8000b74 <main+0x954>)
 80009fc:	799b      	ldrb	r3, [r3, #6]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d006      	beq.n	8000a10 <main+0x7f0>
			{
				last_sig_p_1[1] = uart_tx[6];
 8000a02:	4b5c      	ldr	r3, [pc, #368]	; (8000b74 <main+0x954>)
 8000a04:	799a      	ldrb	r2, [r3, #6]
 8000a06:	4b5d      	ldr	r3, [pc, #372]	; (8000b7c <main+0x95c>)
 8000a08:	705a      	strb	r2, [r3, #1]
				uart_tx_on = 1;
 8000a0a:	4b5b      	ldr	r3, [pc, #364]	; (8000b78 <main+0x958>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_1[2] != uart_tx[7])
 8000a10:	4b5a      	ldr	r3, [pc, #360]	; (8000b7c <main+0x95c>)
 8000a12:	789a      	ldrb	r2, [r3, #2]
 8000a14:	4b57      	ldr	r3, [pc, #348]	; (8000b74 <main+0x954>)
 8000a16:	79db      	ldrb	r3, [r3, #7]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d006      	beq.n	8000a2a <main+0x80a>
			{
				last_sig_p_1[2] = uart_tx[7];
 8000a1c:	4b55      	ldr	r3, [pc, #340]	; (8000b74 <main+0x954>)
 8000a1e:	79da      	ldrb	r2, [r3, #7]
 8000a20:	4b56      	ldr	r3, [pc, #344]	; (8000b7c <main+0x95c>)
 8000a22:	709a      	strb	r2, [r3, #2]
				uart_tx_on = 1;
 8000a24:	4b54      	ldr	r3, [pc, #336]	; (8000b78 <main+0x958>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_1[3] != uart_tx[8])
 8000a2a:	4b54      	ldr	r3, [pc, #336]	; (8000b7c <main+0x95c>)
 8000a2c:	78da      	ldrb	r2, [r3, #3]
 8000a2e:	4b51      	ldr	r3, [pc, #324]	; (8000b74 <main+0x954>)
 8000a30:	7a1b      	ldrb	r3, [r3, #8]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d006      	beq.n	8000a44 <main+0x824>
			{
				last_sig_p_1[3] = uart_tx[8];
 8000a36:	4b4f      	ldr	r3, [pc, #316]	; (8000b74 <main+0x954>)
 8000a38:	7a1a      	ldrb	r2, [r3, #8]
 8000a3a:	4b50      	ldr	r3, [pc, #320]	; (8000b7c <main+0x95c>)
 8000a3c:	70da      	strb	r2, [r3, #3]
				uart_tx_on = 1;
 8000a3e:	4b4e      	ldr	r3, [pc, #312]	; (8000b78 <main+0x958>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]


		}


		if(spi_state == 2 && spi_port == 2 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 8000a44:	4b41      	ldr	r3, [pc, #260]	; (8000b4c <main+0x92c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d147      	bne.n	8000adc <main+0x8bc>
 8000a4c:	4b40      	ldr	r3, [pc, #256]	; (8000b50 <main+0x930>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d143      	bne.n	8000adc <main+0x8bc>
 8000a54:	4b3f      	ldr	r3, [pc, #252]	; (8000b54 <main+0x934>)
 8000a56:	691a      	ldr	r2, [r3, #16]
 8000a58:	2380      	movs	r3, #128	; 0x80
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	d03d      	beq.n	8000adc <main+0x8bc>
 8000a60:	4b3c      	ldr	r3, [pc, #240]	; (8000b54 <main+0x934>)
 8000a62:	691a      	ldr	r2, [r3, #16]
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4013      	ands	r3, r2
 8000a6a:	d037      	beq.n	8000adc <main+0x8bc>
 8000a6c:	4b39      	ldr	r3, [pc, #228]	; (8000b54 <main+0x934>)
 8000a6e:	691b      	ldr	r3, [r3, #16]
 8000a70:	2280      	movs	r2, #128	; 0x80
 8000a72:	4013      	ands	r3, r2
 8000a74:	d032      	beq.n	8000adc <main+0x8bc>
 8000a76:	4b37      	ldr	r3, [pc, #220]	; (8000b54 <main+0x934>)
 8000a78:	691b      	ldr	r3, [r3, #16]
 8000a7a:	2240      	movs	r2, #64	; 0x40
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	d02d      	beq.n	8000adc <main+0x8bc>
 8000a80:	4b35      	ldr	r3, [pc, #212]	; (8000b58 <main+0x938>)
 8000a82:	691a      	ldr	r2, [r3, #16]
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	021b      	lsls	r3, r3, #8
 8000a88:	4013      	ands	r3, r2
 8000a8a:	d027      	beq.n	8000adc <main+0x8bc>
 8000a8c:	4b32      	ldr	r3, [pc, #200]	; (8000b58 <main+0x938>)
 8000a8e:	691a      	ldr	r2, [r3, #16]
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	01db      	lsls	r3, r3, #7
 8000a94:	4013      	ands	r3, r2
 8000a96:	d021      	beq.n	8000adc <main+0x8bc>
 8000a98:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <main+0x938>)
 8000a9a:	691a      	ldr	r2, [r3, #16]
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	019b      	lsls	r3, r3, #6
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	d01b      	beq.n	8000adc <main+0x8bc>
 8000aa4:	4b2c      	ldr	r3, [pc, #176]	; (8000b58 <main+0x938>)
 8000aa6:	691a      	ldr	r2, [r3, #16]
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	015b      	lsls	r3, r3, #5
 8000aac:	4013      	ands	r3, r2
 8000aae:	d015      	beq.n	8000adc <main+0x8bc>
 8000ab0:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <main+0x938>)
 8000ab2:	691b      	ldr	r3, [r3, #16]
 8000ab4:	2204      	movs	r2, #4
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	d010      	beq.n	8000adc <main+0x8bc>
 8000aba:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <main+0x938>)
 8000abc:	691b      	ldr	r3, [r3, #16]
 8000abe:	2202      	movs	r2, #2
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	d00b      	beq.n	8000adc <main+0x8bc>
 8000ac4:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <main+0x938>)
 8000ac6:	691b      	ldr	r3, [r3, #16]
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4013      	ands	r3, r2
 8000acc:	d006      	beq.n	8000adc <main+0x8bc>
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <main+0x934>)
 8000ad0:	691b      	ldr	r3, [r3, #16]
 8000ad2:	2220      	movs	r2, #32
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	d001      	beq.n	8000adc <main+0x8bc>
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e000      	b.n	8000ade <main+0x8be>
 8000adc:	2300      	movs	r3, #0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d055      	beq.n	8000b8e <main+0x96e>
		{
			spi_rx_ctrl_summ = spi_rx[0] + spi_rx[1] + spi_rx[2] + spi_rx[3] + spi_rx[4];
 8000ae2:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <main+0x944>)
 8000ae4:	781a      	ldrb	r2, [r3, #0]
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <main+0x944>)
 8000ae8:	785b      	ldrb	r3, [r3, #1]
 8000aea:	18d3      	adds	r3, r2, r3
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <main+0x944>)
 8000af0:	789b      	ldrb	r3, [r3, #2]
 8000af2:	18d3      	adds	r3, r2, r3
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <main+0x944>)
 8000af8:	78db      	ldrb	r3, [r3, #3]
 8000afa:	18d3      	adds	r3, r2, r3
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <main+0x944>)
 8000b00:	791b      	ldrb	r3, [r3, #4]
 8000b02:	18d3      	adds	r3, r2, r3
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <main+0x960>)
 8000b08:	701a      	strb	r2, [r3, #0]

			if(spi_rx_ctrl_summ == spi_rx[5])
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <main+0x944>)
 8000b0c:	795a      	ldrb	r2, [r3, #5]
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <main+0x960>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d138      	bne.n	8000b88 <main+0x968>
			{
				spi_state = 0;
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <main+0x92c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
				spi_port = 3;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <main+0x930>)
 8000b1e:	2203      	movs	r2, #3
 8000b20:	701a      	strb	r2, [r3, #0]

				board_2_type = spi_rx[4];
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <main+0x944>)
 8000b24:	791a      	ldrb	r2, [r3, #4]
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <main+0x964>)
 8000b28:	701a      	strb	r2, [r3, #0]
				uart_tx [9]  = spi_rx[0];
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <main+0x944>)
 8000b2c:	781a      	ldrb	r2, [r3, #0]
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <main+0x954>)
 8000b30:	725a      	strb	r2, [r3, #9]
				uart_tx [10]  = spi_rx[1];
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <main+0x944>)
 8000b34:	785a      	ldrb	r2, [r3, #1]
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <main+0x954>)
 8000b38:	729a      	strb	r2, [r3, #10]
				uart_tx [11]  = spi_rx[2];
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <main+0x944>)
 8000b3c:	789a      	ldrb	r2, [r3, #2]
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <main+0x954>)
 8000b40:	72da      	strb	r2, [r3, #11]
				uart_tx [12]  = spi_rx[3];
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <main+0x944>)
 8000b44:	78da      	ldrb	r2, [r3, #3]
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <main+0x954>)
 8000b48:	731a      	strb	r2, [r3, #12]
 8000b4a:	e020      	b.n	8000b8e <main+0x96e>
 8000b4c:	20000208 	.word	0x20000208
 8000b50:	20000000 	.word	0x20000000
 8000b54:	48000800 	.word	0x48000800
 8000b58:	48000400 	.word	0x48000400
 8000b5c:	200002e0 	.word	0x200002e0
 8000b60:	20000200 	.word	0x20000200
 8000b64:	200001f8 	.word	0x200001f8
 8000b68:	2000005c 	.word	0x2000005c
 8000b6c:	20000209 	.word	0x20000209
 8000b70:	20000350 	.word	0x20000350
 8000b74:	20000004 	.word	0x20000004
 8000b78:	2000003b 	.word	0x2000003b
 8000b7c:	20000354 	.word	0x20000354
 8000b80:	20000206 	.word	0x20000206
 8000b84:	2000020a 	.word	0x2000020a
			}
			else
			{
				spi_state = 0;
 8000b88:	4bb8      	ldr	r3, [pc, #736]	; (8000e6c <main+0xc4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
		/* ------------------------------------------------------------------------------------------------------------------------------*/


		/* *****PORT_3*****--------------------------------------------------------------------------------------------------------------*/
		/* Esli sostoyanie SPI ravno 0, to proveryaem, chto proishodit opros nyznogo porta, i vse nogi spi podnyaty----------------------*/
		if(spi_state == 0 && spi_port == 3 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 8000b8e:	4bb7      	ldr	r3, [pc, #732]	; (8000e6c <main+0xc4c>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d147      	bne.n	8000c26 <main+0xa06>
 8000b96:	4bb6      	ldr	r3, [pc, #728]	; (8000e70 <main+0xc50>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d143      	bne.n	8000c26 <main+0xa06>
 8000b9e:	4bb5      	ldr	r3, [pc, #724]	; (8000e74 <main+0xc54>)
 8000ba0:	691a      	ldr	r2, [r3, #16]
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	d03d      	beq.n	8000c26 <main+0xa06>
 8000baa:	4bb2      	ldr	r3, [pc, #712]	; (8000e74 <main+0xc54>)
 8000bac:	691a      	ldr	r2, [r3, #16]
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	d037      	beq.n	8000c26 <main+0xa06>
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <main+0xc54>)
 8000bb8:	691b      	ldr	r3, [r3, #16]
 8000bba:	2280      	movs	r2, #128	; 0x80
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	d032      	beq.n	8000c26 <main+0xa06>
 8000bc0:	4bac      	ldr	r3, [pc, #688]	; (8000e74 <main+0xc54>)
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	2240      	movs	r2, #64	; 0x40
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	d02d      	beq.n	8000c26 <main+0xa06>
 8000bca:	4bab      	ldr	r3, [pc, #684]	; (8000e78 <main+0xc58>)
 8000bcc:	691a      	ldr	r2, [r3, #16]
 8000bce:	2380      	movs	r3, #128	; 0x80
 8000bd0:	021b      	lsls	r3, r3, #8
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	d027      	beq.n	8000c26 <main+0xa06>
 8000bd6:	4ba8      	ldr	r3, [pc, #672]	; (8000e78 <main+0xc58>)
 8000bd8:	691a      	ldr	r2, [r3, #16]
 8000bda:	2380      	movs	r3, #128	; 0x80
 8000bdc:	01db      	lsls	r3, r3, #7
 8000bde:	4013      	ands	r3, r2
 8000be0:	d021      	beq.n	8000c26 <main+0xa06>
 8000be2:	4ba5      	ldr	r3, [pc, #660]	; (8000e78 <main+0xc58>)
 8000be4:	691a      	ldr	r2, [r3, #16]
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	019b      	lsls	r3, r3, #6
 8000bea:	4013      	ands	r3, r2
 8000bec:	d01b      	beq.n	8000c26 <main+0xa06>
 8000bee:	4ba2      	ldr	r3, [pc, #648]	; (8000e78 <main+0xc58>)
 8000bf0:	691a      	ldr	r2, [r3, #16]
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	015b      	lsls	r3, r3, #5
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	d015      	beq.n	8000c26 <main+0xa06>
 8000bfa:	4b9f      	ldr	r3, [pc, #636]	; (8000e78 <main+0xc58>)
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	2204      	movs	r2, #4
 8000c00:	4013      	ands	r3, r2
 8000c02:	d010      	beq.n	8000c26 <main+0xa06>
 8000c04:	4b9c      	ldr	r3, [pc, #624]	; (8000e78 <main+0xc58>)
 8000c06:	691b      	ldr	r3, [r3, #16]
 8000c08:	2202      	movs	r2, #2
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	d00b      	beq.n	8000c26 <main+0xa06>
 8000c0e:	4b9a      	ldr	r3, [pc, #616]	; (8000e78 <main+0xc58>)
 8000c10:	691b      	ldr	r3, [r3, #16]
 8000c12:	2201      	movs	r2, #1
 8000c14:	4013      	ands	r3, r2
 8000c16:	d006      	beq.n	8000c26 <main+0xa06>
 8000c18:	4b96      	ldr	r3, [pc, #600]	; (8000e74 <main+0xc54>)
 8000c1a:	691b      	ldr	r3, [r3, #16]
 8000c1c:	2220      	movs	r2, #32
 8000c1e:	4013      	ands	r3, r2
 8000c20:	d001      	beq.n	8000c26 <main+0xa06>
 8000c22:	2301      	movs	r3, #1
 8000c24:	e000      	b.n	8000c28 <main+0xa08>
 8000c26:	2300      	movs	r3, #0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d100      	bne.n	8000c2e <main+0xa0e>
 8000c2c:	e099      	b.n	8000d62 <main+0xb42>
		{
			spi_state = 1;
 8000c2e:	4b8f      	ldr	r3, [pc, #572]	; (8000e6c <main+0xc4c>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]

			/* Prisvaivaem massivy otpravlyaemomy po SPI znacheniya signalov, prinyatyh po UART--------------------------------------------*/
			spi_tx[0] = uart_rx_slice[11];
 8000c34:	4b91      	ldr	r3, [pc, #580]	; (8000e7c <main+0xc5c>)
 8000c36:	7ada      	ldrb	r2, [r3, #11]
 8000c38:	4b91      	ldr	r3, [pc, #580]	; (8000e80 <main+0xc60>)
 8000c3a:	701a      	strb	r2, [r3, #0]
			spi_tx[1] = uart_rx_slice[12];
 8000c3c:	4b8f      	ldr	r3, [pc, #572]	; (8000e7c <main+0xc5c>)
 8000c3e:	7b1a      	ldrb	r2, [r3, #12]
 8000c40:	4b8f      	ldr	r3, [pc, #572]	; (8000e80 <main+0xc60>)
 8000c42:	705a      	strb	r2, [r3, #1]
			spi_tx[2] = uart_rx_slice[13];
 8000c44:	4b8d      	ldr	r3, [pc, #564]	; (8000e7c <main+0xc5c>)
 8000c46:	7b5a      	ldrb	r2, [r3, #13]
 8000c48:	4b8d      	ldr	r3, [pc, #564]	; (8000e80 <main+0xc60>)
 8000c4a:	709a      	strb	r2, [r3, #2]
			spi_tx[3] = uart_rx_slice[14];
 8000c4c:	4b8b      	ldr	r3, [pc, #556]	; (8000e7c <main+0xc5c>)
 8000c4e:	7b9a      	ldrb	r2, [r3, #14]
 8000c50:	4b8b      	ldr	r3, [pc, #556]	; (8000e80 <main+0xc60>)
 8000c52:	70da      	strb	r2, [r3, #3]

			/* Schitayem kontrolnyu summy, i zapisyvaem v poslednii element massiva, otpravlyaemogo po SPI---------------------------------*/
			spi_tx[5] = spi_tx[0] + spi_tx[1] + spi_tx[2] + spi_tx[3] + spi_tx[4];
 8000c54:	4b8a      	ldr	r3, [pc, #552]	; (8000e80 <main+0xc60>)
 8000c56:	781a      	ldrb	r2, [r3, #0]
 8000c58:	4b89      	ldr	r3, [pc, #548]	; (8000e80 <main+0xc60>)
 8000c5a:	785b      	ldrb	r3, [r3, #1]
 8000c5c:	18d3      	adds	r3, r2, r3
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	4b87      	ldr	r3, [pc, #540]	; (8000e80 <main+0xc60>)
 8000c62:	789b      	ldrb	r3, [r3, #2]
 8000c64:	18d3      	adds	r3, r2, r3
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	4b85      	ldr	r3, [pc, #532]	; (8000e80 <main+0xc60>)
 8000c6a:	78db      	ldrb	r3, [r3, #3]
 8000c6c:	18d3      	adds	r3, r2, r3
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	4b83      	ldr	r3, [pc, #524]	; (8000e80 <main+0xc60>)
 8000c72:	791b      	ldrb	r3, [r3, #4]
 8000c74:	18d3      	adds	r3, r2, r3
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b81      	ldr	r3, [pc, #516]	; (8000e80 <main+0xc60>)
 8000c7a:	715a      	strb	r2, [r3, #5]

			/* Opyskaem nogy CS, i proizvodim priemo-peredachu po SPI----------------------------------------------------------------------*/
			GPIOC->BRR = (1<<7);
 8000c7c:	4b7d      	ldr	r3, [pc, #500]	; (8000e74 <main+0xc54>)
 8000c7e:	2280      	movs	r2, #128	; 0x80
 8000c80:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*)spi_tx, (uint8_t*)spi_rx, 0x06);
 8000c82:	4a80      	ldr	r2, [pc, #512]	; (8000e84 <main+0xc64>)
 8000c84:	497e      	ldr	r1, [pc, #504]	; (8000e80 <main+0xc60>)
 8000c86:	4880      	ldr	r0, [pc, #512]	; (8000e88 <main+0xc68>)
 8000c88:	2306      	movs	r3, #6
 8000c8a:	f003 ff67 	bl	8004b5c <HAL_SPI_TransmitReceive_IT>

			/* Platy vstavili v port ------------------------------------------------------------------------------------------------------*/
			if(board_2_type != 0x00 && (last_port_state & (1<<1)) == 0x00)
 8000c8e:	4b7f      	ldr	r3, [pc, #508]	; (8000e8c <main+0xc6c>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d016      	beq.n	8000cc4 <main+0xaa4>
 8000c96:	4b7e      	ldr	r3, [pc, #504]	; (8000e90 <main+0xc70>)
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	001a      	movs	r2, r3
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	d110      	bne.n	8000cc4 <main+0xaa4>
			{
				uart_tx [0x03] &= ~ (1 << 1); // Zapis 0 v bity sostoyaniya porta
 8000ca2:	4b7c      	ldr	r3, [pc, #496]	; (8000e94 <main+0xc74>)
 8000ca4:	78db      	ldrb	r3, [r3, #3]
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	4393      	bics	r3, r2
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b79      	ldr	r3, [pc, #484]	; (8000e94 <main+0xc74>)
 8000cae:	70da      	strb	r2, [r3, #3]
				last_port_state |=   (1 << 1);  	 		  // Poslednee sostoyanie ravno 1
 8000cb0:	4b77      	ldr	r3, [pc, #476]	; (8000e90 <main+0xc70>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	4b75      	ldr	r3, [pc, #468]	; (8000e90 <main+0xc70>)
 8000cbc:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;		 			// Razreshaem peredachy
 8000cbe:	4b76      	ldr	r3, [pc, #472]	; (8000e98 <main+0xc78>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]
			}
			/* ----------------------------------------------------------------------------------------------------------------------------*/


			/* Platy dostali iz porta -----------------------------------------------------------------------------------------------------*/
			if(board_2_type == 0x00 && (last_port_state & (1<<1)) != 0x00)
 8000cc4:	4b71      	ldr	r3, [pc, #452]	; (8000e8c <main+0xc6c>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d116      	bne.n	8000cfa <main+0xada>
 8000ccc:	4b70      	ldr	r3, [pc, #448]	; (8000e90 <main+0xc70>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	001a      	movs	r2, r3
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	d010      	beq.n	8000cfa <main+0xada>
			{
				uart_tx [0x03] |= (1 << 1); // Zapis 1 v bity sostoyaniya porta
 8000cd8:	4b6e      	ldr	r3, [pc, #440]	; (8000e94 <main+0xc74>)
 8000cda:	78db      	ldrb	r3, [r3, #3]
 8000cdc:	2202      	movs	r2, #2
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4b6c      	ldr	r3, [pc, #432]	; (8000e94 <main+0xc74>)
 8000ce4:	70da      	strb	r2, [r3, #3]
				last_port_state &= ~ (1 << 1);        // Poslednee sostoyanie ravno 0
 8000ce6:	4b6a      	ldr	r3, [pc, #424]	; (8000e90 <main+0xc70>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	2202      	movs	r2, #2
 8000cec:	4393      	bics	r3, r2
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	4b67      	ldr	r3, [pc, #412]	; (8000e90 <main+0xc70>)
 8000cf2:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;	      // Razreshaem peredachy
 8000cf4:	4b68      	ldr	r3, [pc, #416]	; (8000e98 <main+0xc78>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
			}
			/* ----------------------------------------------------------------------------------------------------------------------------*/

			/* Otpravka massiva pri izmenenii v signale -----------------------------------------------------------------------------------*/
			if (last_sig_p_2[0] != uart_tx[9])
 8000cfa:	4b68      	ldr	r3, [pc, #416]	; (8000e9c <main+0xc7c>)
 8000cfc:	781a      	ldrb	r2, [r3, #0]
 8000cfe:	4b65      	ldr	r3, [pc, #404]	; (8000e94 <main+0xc74>)
 8000d00:	7a5b      	ldrb	r3, [r3, #9]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d006      	beq.n	8000d14 <main+0xaf4>
			{
				last_sig_p_2[0] = uart_tx[9];
 8000d06:	4b63      	ldr	r3, [pc, #396]	; (8000e94 <main+0xc74>)
 8000d08:	7a5a      	ldrb	r2, [r3, #9]
 8000d0a:	4b64      	ldr	r3, [pc, #400]	; (8000e9c <main+0xc7c>)
 8000d0c:	701a      	strb	r2, [r3, #0]
				uart_tx_on = 1;
 8000d0e:	4b62      	ldr	r3, [pc, #392]	; (8000e98 <main+0xc78>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_2[1] != uart_tx[10])
 8000d14:	4b61      	ldr	r3, [pc, #388]	; (8000e9c <main+0xc7c>)
 8000d16:	785a      	ldrb	r2, [r3, #1]
 8000d18:	4b5e      	ldr	r3, [pc, #376]	; (8000e94 <main+0xc74>)
 8000d1a:	7a9b      	ldrb	r3, [r3, #10]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d006      	beq.n	8000d2e <main+0xb0e>
			{
				last_sig_p_2[1] = uart_tx[10];
 8000d20:	4b5c      	ldr	r3, [pc, #368]	; (8000e94 <main+0xc74>)
 8000d22:	7a9a      	ldrb	r2, [r3, #10]
 8000d24:	4b5d      	ldr	r3, [pc, #372]	; (8000e9c <main+0xc7c>)
 8000d26:	705a      	strb	r2, [r3, #1]
				uart_tx_on = 1;
 8000d28:	4b5b      	ldr	r3, [pc, #364]	; (8000e98 <main+0xc78>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_2[2] != uart_tx[11])
 8000d2e:	4b5b      	ldr	r3, [pc, #364]	; (8000e9c <main+0xc7c>)
 8000d30:	789a      	ldrb	r2, [r3, #2]
 8000d32:	4b58      	ldr	r3, [pc, #352]	; (8000e94 <main+0xc74>)
 8000d34:	7adb      	ldrb	r3, [r3, #11]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d006      	beq.n	8000d48 <main+0xb28>
			{
				last_sig_p_2[2] = uart_tx[11];
 8000d3a:	4b56      	ldr	r3, [pc, #344]	; (8000e94 <main+0xc74>)
 8000d3c:	7ada      	ldrb	r2, [r3, #11]
 8000d3e:	4b57      	ldr	r3, [pc, #348]	; (8000e9c <main+0xc7c>)
 8000d40:	709a      	strb	r2, [r3, #2]
				uart_tx_on = 1;
 8000d42:	4b55      	ldr	r3, [pc, #340]	; (8000e98 <main+0xc78>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_2[3] != uart_tx[12])
 8000d48:	4b54      	ldr	r3, [pc, #336]	; (8000e9c <main+0xc7c>)
 8000d4a:	78da      	ldrb	r2, [r3, #3]
 8000d4c:	4b51      	ldr	r3, [pc, #324]	; (8000e94 <main+0xc74>)
 8000d4e:	7b1b      	ldrb	r3, [r3, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d006      	beq.n	8000d62 <main+0xb42>
			{
				last_sig_p_2[3] = uart_tx[12];
 8000d54:	4b4f      	ldr	r3, [pc, #316]	; (8000e94 <main+0xc74>)
 8000d56:	7b1a      	ldrb	r2, [r3, #12]
 8000d58:	4b50      	ldr	r3, [pc, #320]	; (8000e9c <main+0xc7c>)
 8000d5a:	70da      	strb	r2, [r3, #3]
				uart_tx_on = 1;
 8000d5c:	4b4e      	ldr	r3, [pc, #312]	; (8000e98 <main+0xc78>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
			}


		}

		if(spi_state == 2 && spi_port == 3 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 8000d62:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <main+0xc4c>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d147      	bne.n	8000dfa <main+0xbda>
 8000d6a:	4b41      	ldr	r3, [pc, #260]	; (8000e70 <main+0xc50>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	d143      	bne.n	8000dfa <main+0xbda>
 8000d72:	4b40      	ldr	r3, [pc, #256]	; (8000e74 <main+0xc54>)
 8000d74:	691a      	ldr	r2, [r3, #16]
 8000d76:	2380      	movs	r3, #128	; 0x80
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	d03d      	beq.n	8000dfa <main+0xbda>
 8000d7e:	4b3d      	ldr	r3, [pc, #244]	; (8000e74 <main+0xc54>)
 8000d80:	691a      	ldr	r2, [r3, #16]
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	4013      	ands	r3, r2
 8000d88:	d037      	beq.n	8000dfa <main+0xbda>
 8000d8a:	4b3a      	ldr	r3, [pc, #232]	; (8000e74 <main+0xc54>)
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	2280      	movs	r2, #128	; 0x80
 8000d90:	4013      	ands	r3, r2
 8000d92:	d032      	beq.n	8000dfa <main+0xbda>
 8000d94:	4b37      	ldr	r3, [pc, #220]	; (8000e74 <main+0xc54>)
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	2240      	movs	r2, #64	; 0x40
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	d02d      	beq.n	8000dfa <main+0xbda>
 8000d9e:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <main+0xc58>)
 8000da0:	691a      	ldr	r2, [r3, #16]
 8000da2:	2380      	movs	r3, #128	; 0x80
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	4013      	ands	r3, r2
 8000da8:	d027      	beq.n	8000dfa <main+0xbda>
 8000daa:	4b33      	ldr	r3, [pc, #204]	; (8000e78 <main+0xc58>)
 8000dac:	691a      	ldr	r2, [r3, #16]
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	01db      	lsls	r3, r3, #7
 8000db2:	4013      	ands	r3, r2
 8000db4:	d021      	beq.n	8000dfa <main+0xbda>
 8000db6:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <main+0xc58>)
 8000db8:	691a      	ldr	r2, [r3, #16]
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	019b      	lsls	r3, r3, #6
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	d01b      	beq.n	8000dfa <main+0xbda>
 8000dc2:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <main+0xc58>)
 8000dc4:	691a      	ldr	r2, [r3, #16]
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	015b      	lsls	r3, r3, #5
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d015      	beq.n	8000dfa <main+0xbda>
 8000dce:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <main+0xc58>)
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	d010      	beq.n	8000dfa <main+0xbda>
 8000dd8:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <main+0xc58>)
 8000dda:	691b      	ldr	r3, [r3, #16]
 8000ddc:	2202      	movs	r2, #2
 8000dde:	4013      	ands	r3, r2
 8000de0:	d00b      	beq.n	8000dfa <main+0xbda>
 8000de2:	4b25      	ldr	r3, [pc, #148]	; (8000e78 <main+0xc58>)
 8000de4:	691b      	ldr	r3, [r3, #16]
 8000de6:	2201      	movs	r2, #1
 8000de8:	4013      	ands	r3, r2
 8000dea:	d006      	beq.n	8000dfa <main+0xbda>
 8000dec:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <main+0xc54>)
 8000dee:	691b      	ldr	r3, [r3, #16]
 8000df0:	2220      	movs	r2, #32
 8000df2:	4013      	ands	r3, r2
 8000df4:	d001      	beq.n	8000dfa <main+0xbda>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <main+0xbdc>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d056      	beq.n	8000eae <main+0xc8e>
		{
			spi_rx_ctrl_summ = spi_rx[0] + spi_rx[1] + spi_rx[2] + spi_rx[3] + spi_rx[4];
 8000e00:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <main+0xc64>)
 8000e02:	781a      	ldrb	r2, [r3, #0]
 8000e04:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <main+0xc64>)
 8000e06:	785b      	ldrb	r3, [r3, #1]
 8000e08:	18d3      	adds	r3, r2, r3
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <main+0xc64>)
 8000e0e:	789b      	ldrb	r3, [r3, #2]
 8000e10:	18d3      	adds	r3, r2, r3
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <main+0xc64>)
 8000e16:	78db      	ldrb	r3, [r3, #3]
 8000e18:	18d3      	adds	r3, r2, r3
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <main+0xc64>)
 8000e1e:	791b      	ldrb	r3, [r3, #4]
 8000e20:	18d3      	adds	r3, r2, r3
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <main+0xc80>)
 8000e26:	701a      	strb	r2, [r3, #0]

			if(spi_rx_ctrl_summ == spi_rx[5])
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <main+0xc64>)
 8000e2a:	795a      	ldrb	r2, [r3, #5]
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <main+0xc80>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d139      	bne.n	8000ea8 <main+0xc88>
			{
				spi_state = 0;
 8000e34:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <main+0xc4c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
				spi_port = 4;
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <main+0xc50>)
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	701a      	strb	r2, [r3, #0]

				board_3_type = spi_rx[4];
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <main+0xc64>)
 8000e42:	791a      	ldrb	r2, [r3, #4]
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <main+0xc84>)
 8000e46:	701a      	strb	r2, [r3, #0]
				uart_tx [13]  = spi_rx[0];
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <main+0xc64>)
 8000e4a:	781a      	ldrb	r2, [r3, #0]
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <main+0xc74>)
 8000e4e:	735a      	strb	r2, [r3, #13]
				uart_tx [14]  = spi_rx[1];
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <main+0xc64>)
 8000e52:	785a      	ldrb	r2, [r3, #1]
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <main+0xc74>)
 8000e56:	739a      	strb	r2, [r3, #14]
				uart_tx [15]  = spi_rx[2];
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <main+0xc64>)
 8000e5a:	789a      	ldrb	r2, [r3, #2]
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <main+0xc74>)
 8000e5e:	73da      	strb	r2, [r3, #15]
				uart_tx [16]  = spi_rx[3];
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <main+0xc64>)
 8000e62:	78da      	ldrb	r2, [r3, #3]
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <main+0xc74>)
 8000e66:	741a      	strb	r2, [r3, #16]
 8000e68:	e021      	b.n	8000eae <main+0xc8e>
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	20000208 	.word	0x20000208
 8000e70:	20000000 	.word	0x20000000
 8000e74:	48000800 	.word	0x48000800
 8000e78:	48000400 	.word	0x48000400
 8000e7c:	200002e0 	.word	0x200002e0
 8000e80:	20000200 	.word	0x20000200
 8000e84:	200001f8 	.word	0x200001f8
 8000e88:	2000005c 	.word	0x2000005c
 8000e8c:	2000020a 	.word	0x2000020a
 8000e90:	20000350 	.word	0x20000350
 8000e94:	20000004 	.word	0x20000004
 8000e98:	2000003b 	.word	0x2000003b
 8000e9c:	20000358 	.word	0x20000358
 8000ea0:	20000206 	.word	0x20000206
 8000ea4:	2000020b 	.word	0x2000020b
			}
			else
			{
				spi_state = 0;
 8000ea8:	4bb8      	ldr	r3, [pc, #736]	; (800118c <main+0xf6c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
		/* ------------------------------------------------------------------------------------------------------------------------------*/


		/* *****PORT_4*****--------------------------------------------------------------------------------------------------------------*/
		/* Esli sostoyanie SPI ravno 0, to proveryaem, chto proishodit opros nyznogo porta, i vse nogi spi podnyaty----------------------*/
		if(spi_state == 0 && spi_port == 4 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 8000eae:	4bb7      	ldr	r3, [pc, #732]	; (800118c <main+0xf6c>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d147      	bne.n	8000f46 <main+0xd26>
 8000eb6:	4bb6      	ldr	r3, [pc, #728]	; (8001190 <main+0xf70>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d143      	bne.n	8000f46 <main+0xd26>
 8000ebe:	4bb5      	ldr	r3, [pc, #724]	; (8001194 <main+0xf74>)
 8000ec0:	691a      	ldr	r2, [r3, #16]
 8000ec2:	2380      	movs	r3, #128	; 0x80
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	d03d      	beq.n	8000f46 <main+0xd26>
 8000eca:	4bb2      	ldr	r3, [pc, #712]	; (8001194 <main+0xf74>)
 8000ecc:	691a      	ldr	r2, [r3, #16]
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d037      	beq.n	8000f46 <main+0xd26>
 8000ed6:	4baf      	ldr	r3, [pc, #700]	; (8001194 <main+0xf74>)
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	4013      	ands	r3, r2
 8000ede:	d032      	beq.n	8000f46 <main+0xd26>
 8000ee0:	4bac      	ldr	r3, [pc, #688]	; (8001194 <main+0xf74>)
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	2240      	movs	r2, #64	; 0x40
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d02d      	beq.n	8000f46 <main+0xd26>
 8000eea:	4bab      	ldr	r3, [pc, #684]	; (8001198 <main+0xf78>)
 8000eec:	691a      	ldr	r2, [r3, #16]
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d027      	beq.n	8000f46 <main+0xd26>
 8000ef6:	4ba8      	ldr	r3, [pc, #672]	; (8001198 <main+0xf78>)
 8000ef8:	691a      	ldr	r2, [r3, #16]
 8000efa:	2380      	movs	r3, #128	; 0x80
 8000efc:	01db      	lsls	r3, r3, #7
 8000efe:	4013      	ands	r3, r2
 8000f00:	d021      	beq.n	8000f46 <main+0xd26>
 8000f02:	4ba5      	ldr	r3, [pc, #660]	; (8001198 <main+0xf78>)
 8000f04:	691a      	ldr	r2, [r3, #16]
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	019b      	lsls	r3, r3, #6
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d01b      	beq.n	8000f46 <main+0xd26>
 8000f0e:	4ba2      	ldr	r3, [pc, #648]	; (8001198 <main+0xf78>)
 8000f10:	691a      	ldr	r2, [r3, #16]
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	015b      	lsls	r3, r3, #5
 8000f16:	4013      	ands	r3, r2
 8000f18:	d015      	beq.n	8000f46 <main+0xd26>
 8000f1a:	4b9f      	ldr	r3, [pc, #636]	; (8001198 <main+0xf78>)
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	2204      	movs	r2, #4
 8000f20:	4013      	ands	r3, r2
 8000f22:	d010      	beq.n	8000f46 <main+0xd26>
 8000f24:	4b9c      	ldr	r3, [pc, #624]	; (8001198 <main+0xf78>)
 8000f26:	691b      	ldr	r3, [r3, #16]
 8000f28:	2202      	movs	r2, #2
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d00b      	beq.n	8000f46 <main+0xd26>
 8000f2e:	4b9a      	ldr	r3, [pc, #616]	; (8001198 <main+0xf78>)
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	2201      	movs	r2, #1
 8000f34:	4013      	ands	r3, r2
 8000f36:	d006      	beq.n	8000f46 <main+0xd26>
 8000f38:	4b96      	ldr	r3, [pc, #600]	; (8001194 <main+0xf74>)
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	2220      	movs	r2, #32
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d001      	beq.n	8000f46 <main+0xd26>
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <main+0xd28>
 8000f46:	2300      	movs	r3, #0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d100      	bne.n	8000f4e <main+0xd2e>
 8000f4c:	e099      	b.n	8001082 <main+0xe62>
		{
			spi_state = 1;
 8000f4e:	4b8f      	ldr	r3, [pc, #572]	; (800118c <main+0xf6c>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]

			/* Prisvaivaem massivy otpravlyaemomy po SPI znacheniya signalov, prinyatyh po UART--------------------------------------------*/
			spi_tx[0] = uart_rx_slice[15];
 8000f54:	4b91      	ldr	r3, [pc, #580]	; (800119c <main+0xf7c>)
 8000f56:	7bda      	ldrb	r2, [r3, #15]
 8000f58:	4b91      	ldr	r3, [pc, #580]	; (80011a0 <main+0xf80>)
 8000f5a:	701a      	strb	r2, [r3, #0]
			spi_tx[1] = uart_rx_slice[16];
 8000f5c:	4b8f      	ldr	r3, [pc, #572]	; (800119c <main+0xf7c>)
 8000f5e:	7c1a      	ldrb	r2, [r3, #16]
 8000f60:	4b8f      	ldr	r3, [pc, #572]	; (80011a0 <main+0xf80>)
 8000f62:	705a      	strb	r2, [r3, #1]
			spi_tx[2] = uart_rx_slice[17];
 8000f64:	4b8d      	ldr	r3, [pc, #564]	; (800119c <main+0xf7c>)
 8000f66:	7c5a      	ldrb	r2, [r3, #17]
 8000f68:	4b8d      	ldr	r3, [pc, #564]	; (80011a0 <main+0xf80>)
 8000f6a:	709a      	strb	r2, [r3, #2]
			spi_tx[3] = uart_rx_slice[18];
 8000f6c:	4b8b      	ldr	r3, [pc, #556]	; (800119c <main+0xf7c>)
 8000f6e:	7c9a      	ldrb	r2, [r3, #18]
 8000f70:	4b8b      	ldr	r3, [pc, #556]	; (80011a0 <main+0xf80>)
 8000f72:	70da      	strb	r2, [r3, #3]

			/* Schitayem kontrolnyu summy, i zapisyvaem v poslednii element massiva, otpravlyaemogo po SPI---------------------------------*/
			spi_tx[5] = spi_tx[0] + spi_tx[1] + spi_tx[2] + spi_tx[3] + spi_tx[4];
 8000f74:	4b8a      	ldr	r3, [pc, #552]	; (80011a0 <main+0xf80>)
 8000f76:	781a      	ldrb	r2, [r3, #0]
 8000f78:	4b89      	ldr	r3, [pc, #548]	; (80011a0 <main+0xf80>)
 8000f7a:	785b      	ldrb	r3, [r3, #1]
 8000f7c:	18d3      	adds	r3, r2, r3
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b87      	ldr	r3, [pc, #540]	; (80011a0 <main+0xf80>)
 8000f82:	789b      	ldrb	r3, [r3, #2]
 8000f84:	18d3      	adds	r3, r2, r3
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	4b85      	ldr	r3, [pc, #532]	; (80011a0 <main+0xf80>)
 8000f8a:	78db      	ldrb	r3, [r3, #3]
 8000f8c:	18d3      	adds	r3, r2, r3
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	4b83      	ldr	r3, [pc, #524]	; (80011a0 <main+0xf80>)
 8000f92:	791b      	ldrb	r3, [r3, #4]
 8000f94:	18d3      	adds	r3, r2, r3
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b81      	ldr	r3, [pc, #516]	; (80011a0 <main+0xf80>)
 8000f9a:	715a      	strb	r2, [r3, #5]

			/* Opyskaem nogy CS, i proizvodim priemo-peredachu po SPI----------------------------------------------------------------------*/
			GPIOC->BRR = (1<<6);
 8000f9c:	4b7d      	ldr	r3, [pc, #500]	; (8001194 <main+0xf74>)
 8000f9e:	2240      	movs	r2, #64	; 0x40
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*)spi_tx, (uint8_t*)spi_rx, 0x06);
 8000fa2:	4a80      	ldr	r2, [pc, #512]	; (80011a4 <main+0xf84>)
 8000fa4:	497e      	ldr	r1, [pc, #504]	; (80011a0 <main+0xf80>)
 8000fa6:	4880      	ldr	r0, [pc, #512]	; (80011a8 <main+0xf88>)
 8000fa8:	2306      	movs	r3, #6
 8000faa:	f003 fdd7 	bl	8004b5c <HAL_SPI_TransmitReceive_IT>

			/* Platy vstavili v port ------------------------------------------------------------------------------------------------------*/
			if(board_3_type != 0x00 && (last_port_state & (1<<2)) == 0x00)
 8000fae:	4b7f      	ldr	r3, [pc, #508]	; (80011ac <main+0xf8c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d016      	beq.n	8000fe4 <main+0xdc4>
 8000fb6:	4b7e      	ldr	r3, [pc, #504]	; (80011b0 <main+0xf90>)
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	001a      	movs	r2, r3
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d110      	bne.n	8000fe4 <main+0xdc4>
			{
				uart_tx   [0x03] &= ~ (1 << 2); // Zapis 0 v bity sostoyaniya porta
 8000fc2:	4b7c      	ldr	r3, [pc, #496]	; (80011b4 <main+0xf94>)
 8000fc4:	78db      	ldrb	r3, [r3, #3]
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	4393      	bics	r3, r2
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	4b79      	ldr	r3, [pc, #484]	; (80011b4 <main+0xf94>)
 8000fce:	70da      	strb	r2, [r3, #3]
				last_port_state |= (1 << 2);  	      // Poslednee sostoyanie ravno 1
 8000fd0:	4b77      	ldr	r3, [pc, #476]	; (80011b0 <main+0xf90>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	4b75      	ldr	r3, [pc, #468]	; (80011b0 <main+0xf90>)
 8000fdc:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;		      // Razreshaem peredachy
 8000fde:	4b76      	ldr	r3, [pc, #472]	; (80011b8 <main+0xf98>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]
			}
			/* ----------------------------------------------------------------------------------------------------------------------------*/

			/* Platy dostali iz porta -----------------------------------------------------------------------------------------------------*/
			if(board_3_type == 0x00 && (last_port_state & (1<<2)) != 0x00)
 8000fe4:	4b71      	ldr	r3, [pc, #452]	; (80011ac <main+0xf8c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d116      	bne.n	800101a <main+0xdfa>
 8000fec:	4b70      	ldr	r3, [pc, #448]	; (80011b0 <main+0xf90>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	001a      	movs	r2, r3
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d010      	beq.n	800101a <main+0xdfa>
			{
				uart_tx   [0x03] |= (1 << 2); // Zapis 1 v bity sostoyaniya porta
 8000ff8:	4b6e      	ldr	r3, [pc, #440]	; (80011b4 <main+0xf94>)
 8000ffa:	78db      	ldrb	r3, [r3, #3]
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b6c      	ldr	r3, [pc, #432]	; (80011b4 <main+0xf94>)
 8001004:	70da      	strb	r2, [r3, #3]
				last_port_state &= ~ (1 << 2);       // Poslednee sostoyanie ravno 0
 8001006:	4b6a      	ldr	r3, [pc, #424]	; (80011b0 <main+0xf90>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	2204      	movs	r2, #4
 800100c:	4393      	bics	r3, r2
 800100e:	b29a      	uxth	r2, r3
 8001010:	4b67      	ldr	r3, [pc, #412]	; (80011b0 <main+0xf90>)
 8001012:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;	      // Razreshaem peredachy
 8001014:	4b68      	ldr	r3, [pc, #416]	; (80011b8 <main+0xf98>)
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
			}
			/* ----------------------------------------------------------------------------------------------------------------------------*/

			/* Otpravka massiva pri izmenenii v signale -----------------------------------------------------------------------------------*/
			if (last_sig_p_3[0] != uart_tx[13])
 800101a:	4b68      	ldr	r3, [pc, #416]	; (80011bc <main+0xf9c>)
 800101c:	781a      	ldrb	r2, [r3, #0]
 800101e:	4b65      	ldr	r3, [pc, #404]	; (80011b4 <main+0xf94>)
 8001020:	7b5b      	ldrb	r3, [r3, #13]
 8001022:	429a      	cmp	r2, r3
 8001024:	d006      	beq.n	8001034 <main+0xe14>
			{
				last_sig_p_3[0] = uart_tx[13];
 8001026:	4b63      	ldr	r3, [pc, #396]	; (80011b4 <main+0xf94>)
 8001028:	7b5a      	ldrb	r2, [r3, #13]
 800102a:	4b64      	ldr	r3, [pc, #400]	; (80011bc <main+0xf9c>)
 800102c:	701a      	strb	r2, [r3, #0]
				uart_tx_on = 1;
 800102e:	4b62      	ldr	r3, [pc, #392]	; (80011b8 <main+0xf98>)
 8001030:	2201      	movs	r2, #1
 8001032:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_3[1] != uart_tx[14])
 8001034:	4b61      	ldr	r3, [pc, #388]	; (80011bc <main+0xf9c>)
 8001036:	785a      	ldrb	r2, [r3, #1]
 8001038:	4b5e      	ldr	r3, [pc, #376]	; (80011b4 <main+0xf94>)
 800103a:	7b9b      	ldrb	r3, [r3, #14]
 800103c:	429a      	cmp	r2, r3
 800103e:	d006      	beq.n	800104e <main+0xe2e>
			{
				last_sig_p_3[1] = uart_tx[14];
 8001040:	4b5c      	ldr	r3, [pc, #368]	; (80011b4 <main+0xf94>)
 8001042:	7b9a      	ldrb	r2, [r3, #14]
 8001044:	4b5d      	ldr	r3, [pc, #372]	; (80011bc <main+0xf9c>)
 8001046:	705a      	strb	r2, [r3, #1]
				uart_tx_on = 1;
 8001048:	4b5b      	ldr	r3, [pc, #364]	; (80011b8 <main+0xf98>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_3[2] != uart_tx[15])
 800104e:	4b5b      	ldr	r3, [pc, #364]	; (80011bc <main+0xf9c>)
 8001050:	789a      	ldrb	r2, [r3, #2]
 8001052:	4b58      	ldr	r3, [pc, #352]	; (80011b4 <main+0xf94>)
 8001054:	7bdb      	ldrb	r3, [r3, #15]
 8001056:	429a      	cmp	r2, r3
 8001058:	d006      	beq.n	8001068 <main+0xe48>
			{
				last_sig_p_3[2] = uart_tx[15];
 800105a:	4b56      	ldr	r3, [pc, #344]	; (80011b4 <main+0xf94>)
 800105c:	7bda      	ldrb	r2, [r3, #15]
 800105e:	4b57      	ldr	r3, [pc, #348]	; (80011bc <main+0xf9c>)
 8001060:	709a      	strb	r2, [r3, #2]
				uart_tx_on = 1;
 8001062:	4b55      	ldr	r3, [pc, #340]	; (80011b8 <main+0xf98>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_3[3] != uart_tx[16])
 8001068:	4b54      	ldr	r3, [pc, #336]	; (80011bc <main+0xf9c>)
 800106a:	78da      	ldrb	r2, [r3, #3]
 800106c:	4b51      	ldr	r3, [pc, #324]	; (80011b4 <main+0xf94>)
 800106e:	7c1b      	ldrb	r3, [r3, #16]
 8001070:	429a      	cmp	r2, r3
 8001072:	d006      	beq.n	8001082 <main+0xe62>
			{
				last_sig_p_3[3] = uart_tx[16];
 8001074:	4b4f      	ldr	r3, [pc, #316]	; (80011b4 <main+0xf94>)
 8001076:	7c1a      	ldrb	r2, [r3, #16]
 8001078:	4b50      	ldr	r3, [pc, #320]	; (80011bc <main+0xf9c>)
 800107a:	70da      	strb	r2, [r3, #3]
				uart_tx_on = 1;
 800107c:	4b4e      	ldr	r3, [pc, #312]	; (80011b8 <main+0xf98>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
			}


		}

		if(spi_state == 2 && spi_port == 4 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 8001082:	4b42      	ldr	r3, [pc, #264]	; (800118c <main+0xf6c>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d147      	bne.n	800111a <main+0xefa>
 800108a:	4b41      	ldr	r3, [pc, #260]	; (8001190 <main+0xf70>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b04      	cmp	r3, #4
 8001090:	d143      	bne.n	800111a <main+0xefa>
 8001092:	4b40      	ldr	r3, [pc, #256]	; (8001194 <main+0xf74>)
 8001094:	691a      	ldr	r2, [r3, #16]
 8001096:	2380      	movs	r3, #128	; 0x80
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4013      	ands	r3, r2
 800109c:	d03d      	beq.n	800111a <main+0xefa>
 800109e:	4b3d      	ldr	r3, [pc, #244]	; (8001194 <main+0xf74>)
 80010a0:	691a      	ldr	r2, [r3, #16]
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4013      	ands	r3, r2
 80010a8:	d037      	beq.n	800111a <main+0xefa>
 80010aa:	4b3a      	ldr	r3, [pc, #232]	; (8001194 <main+0xf74>)
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	4013      	ands	r3, r2
 80010b2:	d032      	beq.n	800111a <main+0xefa>
 80010b4:	4b37      	ldr	r3, [pc, #220]	; (8001194 <main+0xf74>)
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	2240      	movs	r2, #64	; 0x40
 80010ba:	4013      	ands	r3, r2
 80010bc:	d02d      	beq.n	800111a <main+0xefa>
 80010be:	4b36      	ldr	r3, [pc, #216]	; (8001198 <main+0xf78>)
 80010c0:	691a      	ldr	r2, [r3, #16]
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	4013      	ands	r3, r2
 80010c8:	d027      	beq.n	800111a <main+0xefa>
 80010ca:	4b33      	ldr	r3, [pc, #204]	; (8001198 <main+0xf78>)
 80010cc:	691a      	ldr	r2, [r3, #16]
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	01db      	lsls	r3, r3, #7
 80010d2:	4013      	ands	r3, r2
 80010d4:	d021      	beq.n	800111a <main+0xefa>
 80010d6:	4b30      	ldr	r3, [pc, #192]	; (8001198 <main+0xf78>)
 80010d8:	691a      	ldr	r2, [r3, #16]
 80010da:	2380      	movs	r3, #128	; 0x80
 80010dc:	019b      	lsls	r3, r3, #6
 80010de:	4013      	ands	r3, r2
 80010e0:	d01b      	beq.n	800111a <main+0xefa>
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <main+0xf78>)
 80010e4:	691a      	ldr	r2, [r3, #16]
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	015b      	lsls	r3, r3, #5
 80010ea:	4013      	ands	r3, r2
 80010ec:	d015      	beq.n	800111a <main+0xefa>
 80010ee:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <main+0xf78>)
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	2204      	movs	r2, #4
 80010f4:	4013      	ands	r3, r2
 80010f6:	d010      	beq.n	800111a <main+0xefa>
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <main+0xf78>)
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	2202      	movs	r2, #2
 80010fe:	4013      	ands	r3, r2
 8001100:	d00b      	beq.n	800111a <main+0xefa>
 8001102:	4b25      	ldr	r3, [pc, #148]	; (8001198 <main+0xf78>)
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	2201      	movs	r2, #1
 8001108:	4013      	ands	r3, r2
 800110a:	d006      	beq.n	800111a <main+0xefa>
 800110c:	4b21      	ldr	r3, [pc, #132]	; (8001194 <main+0xf74>)
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	2220      	movs	r2, #32
 8001112:	4013      	ands	r3, r2
 8001114:	d001      	beq.n	800111a <main+0xefa>
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <main+0xefc>
 800111a:	2300      	movs	r3, #0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d056      	beq.n	80011ce <main+0xfae>
		{
			spi_rx_ctrl_summ = spi_rx[0] + spi_rx[1] + spi_rx[2] + spi_rx[3] + spi_rx[4];
 8001120:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <main+0xf84>)
 8001122:	781a      	ldrb	r2, [r3, #0]
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <main+0xf84>)
 8001126:	785b      	ldrb	r3, [r3, #1]
 8001128:	18d3      	adds	r3, r2, r3
 800112a:	b2da      	uxtb	r2, r3
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <main+0xf84>)
 800112e:	789b      	ldrb	r3, [r3, #2]
 8001130:	18d3      	adds	r3, r2, r3
 8001132:	b2da      	uxtb	r2, r3
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <main+0xf84>)
 8001136:	78db      	ldrb	r3, [r3, #3]
 8001138:	18d3      	adds	r3, r2, r3
 800113a:	b2da      	uxtb	r2, r3
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <main+0xf84>)
 800113e:	791b      	ldrb	r3, [r3, #4]
 8001140:	18d3      	adds	r3, r2, r3
 8001142:	b2da      	uxtb	r2, r3
 8001144:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <main+0xfa0>)
 8001146:	701a      	strb	r2, [r3, #0]

			if(spi_rx_ctrl_summ == spi_rx[5])
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <main+0xf84>)
 800114a:	795a      	ldrb	r2, [r3, #5]
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <main+0xfa0>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d139      	bne.n	80011c8 <main+0xfa8>
			{
				spi_state = 0;
 8001154:	4b0d      	ldr	r3, [pc, #52]	; (800118c <main+0xf6c>)
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
				spi_port = 5;
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <main+0xf70>)
 800115c:	2205      	movs	r2, #5
 800115e:	701a      	strb	r2, [r3, #0]

				board_4_type = spi_rx[4];
 8001160:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <main+0xf84>)
 8001162:	791a      	ldrb	r2, [r3, #4]
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <main+0xfa4>)
 8001166:	701a      	strb	r2, [r3, #0]
				uart_tx [17]  = spi_rx[0];
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <main+0xf84>)
 800116a:	781a      	ldrb	r2, [r3, #0]
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <main+0xf94>)
 800116e:	745a      	strb	r2, [r3, #17]
				uart_tx [18]  = spi_rx[1];
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <main+0xf84>)
 8001172:	785a      	ldrb	r2, [r3, #1]
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <main+0xf94>)
 8001176:	749a      	strb	r2, [r3, #18]
				uart_tx [19]  = spi_rx[2];
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <main+0xf84>)
 800117a:	789a      	ldrb	r2, [r3, #2]
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <main+0xf94>)
 800117e:	74da      	strb	r2, [r3, #19]
				uart_tx [20]  = spi_rx[3];
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <main+0xf84>)
 8001182:	78da      	ldrb	r2, [r3, #3]
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <main+0xf94>)
 8001186:	751a      	strb	r2, [r3, #20]
 8001188:	e021      	b.n	80011ce <main+0xfae>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	20000208 	.word	0x20000208
 8001190:	20000000 	.word	0x20000000
 8001194:	48000800 	.word	0x48000800
 8001198:	48000400 	.word	0x48000400
 800119c:	200002e0 	.word	0x200002e0
 80011a0:	20000200 	.word	0x20000200
 80011a4:	200001f8 	.word	0x200001f8
 80011a8:	2000005c 	.word	0x2000005c
 80011ac:	2000020b 	.word	0x2000020b
 80011b0:	20000350 	.word	0x20000350
 80011b4:	20000004 	.word	0x20000004
 80011b8:	2000003b 	.word	0x2000003b
 80011bc:	2000035c 	.word	0x2000035c
 80011c0:	20000206 	.word	0x20000206
 80011c4:	2000020c 	.word	0x2000020c
			}
			else
			{
				spi_state = 0;
 80011c8:	4bb8      	ldr	r3, [pc, #736]	; (80014ac <main+0x128c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
		/* ------------------------------------------------------------------------------------------------------------------------------*/


		/* *****PORT_5*****--------------------------------------------------------------------------------------------------------------*/
		/* Esli sostoyanie SPI ravno 0, to proveryaem, chto proishodit opros nyznogo porta, i vse nogi spi podnyaty----------------------*/
		if(spi_state == 0 && spi_port == 5 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 80011ce:	4bb7      	ldr	r3, [pc, #732]	; (80014ac <main+0x128c>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d147      	bne.n	8001266 <main+0x1046>
 80011d6:	4bb6      	ldr	r3, [pc, #728]	; (80014b0 <main+0x1290>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b05      	cmp	r3, #5
 80011dc:	d143      	bne.n	8001266 <main+0x1046>
 80011de:	4bb5      	ldr	r3, [pc, #724]	; (80014b4 <main+0x1294>)
 80011e0:	691a      	ldr	r2, [r3, #16]
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4013      	ands	r3, r2
 80011e8:	d03d      	beq.n	8001266 <main+0x1046>
 80011ea:	4bb2      	ldr	r3, [pc, #712]	; (80014b4 <main+0x1294>)
 80011ec:	691a      	ldr	r2, [r3, #16]
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4013      	ands	r3, r2
 80011f4:	d037      	beq.n	8001266 <main+0x1046>
 80011f6:	4baf      	ldr	r3, [pc, #700]	; (80014b4 <main+0x1294>)
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	2280      	movs	r2, #128	; 0x80
 80011fc:	4013      	ands	r3, r2
 80011fe:	d032      	beq.n	8001266 <main+0x1046>
 8001200:	4bac      	ldr	r3, [pc, #688]	; (80014b4 <main+0x1294>)
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	2240      	movs	r2, #64	; 0x40
 8001206:	4013      	ands	r3, r2
 8001208:	d02d      	beq.n	8001266 <main+0x1046>
 800120a:	4bab      	ldr	r3, [pc, #684]	; (80014b8 <main+0x1298>)
 800120c:	691a      	ldr	r2, [r3, #16]
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	4013      	ands	r3, r2
 8001214:	d027      	beq.n	8001266 <main+0x1046>
 8001216:	4ba8      	ldr	r3, [pc, #672]	; (80014b8 <main+0x1298>)
 8001218:	691a      	ldr	r2, [r3, #16]
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	01db      	lsls	r3, r3, #7
 800121e:	4013      	ands	r3, r2
 8001220:	d021      	beq.n	8001266 <main+0x1046>
 8001222:	4ba5      	ldr	r3, [pc, #660]	; (80014b8 <main+0x1298>)
 8001224:	691a      	ldr	r2, [r3, #16]
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	019b      	lsls	r3, r3, #6
 800122a:	4013      	ands	r3, r2
 800122c:	d01b      	beq.n	8001266 <main+0x1046>
 800122e:	4ba2      	ldr	r3, [pc, #648]	; (80014b8 <main+0x1298>)
 8001230:	691a      	ldr	r2, [r3, #16]
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	015b      	lsls	r3, r3, #5
 8001236:	4013      	ands	r3, r2
 8001238:	d015      	beq.n	8001266 <main+0x1046>
 800123a:	4b9f      	ldr	r3, [pc, #636]	; (80014b8 <main+0x1298>)
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	2204      	movs	r2, #4
 8001240:	4013      	ands	r3, r2
 8001242:	d010      	beq.n	8001266 <main+0x1046>
 8001244:	4b9c      	ldr	r3, [pc, #624]	; (80014b8 <main+0x1298>)
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	2202      	movs	r2, #2
 800124a:	4013      	ands	r3, r2
 800124c:	d00b      	beq.n	8001266 <main+0x1046>
 800124e:	4b9a      	ldr	r3, [pc, #616]	; (80014b8 <main+0x1298>)
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	2201      	movs	r2, #1
 8001254:	4013      	ands	r3, r2
 8001256:	d006      	beq.n	8001266 <main+0x1046>
 8001258:	4b96      	ldr	r3, [pc, #600]	; (80014b4 <main+0x1294>)
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	2220      	movs	r2, #32
 800125e:	4013      	ands	r3, r2
 8001260:	d001      	beq.n	8001266 <main+0x1046>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <main+0x1048>
 8001266:	2300      	movs	r3, #0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d100      	bne.n	800126e <main+0x104e>
 800126c:	e09a      	b.n	80013a4 <main+0x1184>
		{
			spi_state = 1;
 800126e:	4b8f      	ldr	r3, [pc, #572]	; (80014ac <main+0x128c>)
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]

			/* Prisvaivaem massivy otpravlyaemomy po SPI znacheniya signalov, prinyatyh po UART--------------------------------------------*/
			spi_tx[0] = uart_rx_slice[19];
 8001274:	4b91      	ldr	r3, [pc, #580]	; (80014bc <main+0x129c>)
 8001276:	7cda      	ldrb	r2, [r3, #19]
 8001278:	4b91      	ldr	r3, [pc, #580]	; (80014c0 <main+0x12a0>)
 800127a:	701a      	strb	r2, [r3, #0]
			spi_tx[1] = uart_rx_slice[20];
 800127c:	4b8f      	ldr	r3, [pc, #572]	; (80014bc <main+0x129c>)
 800127e:	7d1a      	ldrb	r2, [r3, #20]
 8001280:	4b8f      	ldr	r3, [pc, #572]	; (80014c0 <main+0x12a0>)
 8001282:	705a      	strb	r2, [r3, #1]
			spi_tx[2] = uart_rx_slice[21];
 8001284:	4b8d      	ldr	r3, [pc, #564]	; (80014bc <main+0x129c>)
 8001286:	7d5a      	ldrb	r2, [r3, #21]
 8001288:	4b8d      	ldr	r3, [pc, #564]	; (80014c0 <main+0x12a0>)
 800128a:	709a      	strb	r2, [r3, #2]
			spi_tx[3] = uart_rx_slice[22];
 800128c:	4b8b      	ldr	r3, [pc, #556]	; (80014bc <main+0x129c>)
 800128e:	7d9a      	ldrb	r2, [r3, #22]
 8001290:	4b8b      	ldr	r3, [pc, #556]	; (80014c0 <main+0x12a0>)
 8001292:	70da      	strb	r2, [r3, #3]

				/* Schitayem kontrolnyu summy, i zapisyvaem v poslednii element massiva, otpravlyaemogo po SPI---------------------------------*/
				spi_tx[5] = spi_tx[0] + spi_tx[1] + spi_tx[2] + spi_tx[3] + spi_tx[4];
 8001294:	4b8a      	ldr	r3, [pc, #552]	; (80014c0 <main+0x12a0>)
 8001296:	781a      	ldrb	r2, [r3, #0]
 8001298:	4b89      	ldr	r3, [pc, #548]	; (80014c0 <main+0x12a0>)
 800129a:	785b      	ldrb	r3, [r3, #1]
 800129c:	18d3      	adds	r3, r2, r3
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	4b87      	ldr	r3, [pc, #540]	; (80014c0 <main+0x12a0>)
 80012a2:	789b      	ldrb	r3, [r3, #2]
 80012a4:	18d3      	adds	r3, r2, r3
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	4b85      	ldr	r3, [pc, #532]	; (80014c0 <main+0x12a0>)
 80012aa:	78db      	ldrb	r3, [r3, #3]
 80012ac:	18d3      	adds	r3, r2, r3
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b83      	ldr	r3, [pc, #524]	; (80014c0 <main+0x12a0>)
 80012b2:	791b      	ldrb	r3, [r3, #4]
 80012b4:	18d3      	adds	r3, r2, r3
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b81      	ldr	r3, [pc, #516]	; (80014c0 <main+0x12a0>)
 80012ba:	715a      	strb	r2, [r3, #5]

			/* Opyskaem nogy CS, i proizvodim priemo-peredachu po SPI----------------------------------------------------------------------*/
			GPIOB->BRR = (1<<15);
 80012bc:	4b7e      	ldr	r3, [pc, #504]	; (80014b8 <main+0x1298>)
 80012be:	2280      	movs	r2, #128	; 0x80
 80012c0:	0212      	lsls	r2, r2, #8
 80012c2:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*)spi_tx, (uint8_t*)spi_rx, 0x06);
 80012c4:	4a7f      	ldr	r2, [pc, #508]	; (80014c4 <main+0x12a4>)
 80012c6:	497e      	ldr	r1, [pc, #504]	; (80014c0 <main+0x12a0>)
 80012c8:	487f      	ldr	r0, [pc, #508]	; (80014c8 <main+0x12a8>)
 80012ca:	2306      	movs	r3, #6
 80012cc:	f003 fc46 	bl	8004b5c <HAL_SPI_TransmitReceive_IT>

			/* Platy vstavili v port ------------------------------------------------------------------------------------------------------*/
			if(board_4_type != 0x00 && (last_port_state & (1<<3)) == 0x00)
 80012d0:	4b7e      	ldr	r3, [pc, #504]	; (80014cc <main+0x12ac>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d016      	beq.n	8001306 <main+0x10e6>
 80012d8:	4b7d      	ldr	r3, [pc, #500]	; (80014d0 <main+0x12b0>)
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	001a      	movs	r2, r3
 80012de:	2308      	movs	r3, #8
 80012e0:	4013      	ands	r3, r2
 80012e2:	d110      	bne.n	8001306 <main+0x10e6>
			{
				uart_tx   [0x03] &= ~ (1 << 3); // Zapis 0 v bity sostoyaniya porta
 80012e4:	4b7b      	ldr	r3, [pc, #492]	; (80014d4 <main+0x12b4>)
 80012e6:	78db      	ldrb	r3, [r3, #3]
 80012e8:	2208      	movs	r2, #8
 80012ea:	4393      	bics	r3, r2
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b79      	ldr	r3, [pc, #484]	; (80014d4 <main+0x12b4>)
 80012f0:	70da      	strb	r2, [r3, #3]
				last_port_state |= (1 << 3); 	      // Poslednee sostoyanie ravno 1
 80012f2:	4b77      	ldr	r3, [pc, #476]	; (80014d0 <main+0x12b0>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	2208      	movs	r2, #8
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	4b74      	ldr	r3, [pc, #464]	; (80014d0 <main+0x12b0>)
 80012fe:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;		      // Razreshaem peredachy
 8001300:	4b75      	ldr	r3, [pc, #468]	; (80014d8 <main+0x12b8>)
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
			}
			/* ----------------------------------------------------------------------------------------------------------------------------*/


			/* Platy dostali iz porta -----------------------------------------------------------------------------------------------------*/
			if(board_4_type == 0x00 && (last_port_state & (1<<3)) != 0x00)
 8001306:	4b71      	ldr	r3, [pc, #452]	; (80014cc <main+0x12ac>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d116      	bne.n	800133c <main+0x111c>
 800130e:	4b70      	ldr	r3, [pc, #448]	; (80014d0 <main+0x12b0>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	001a      	movs	r2, r3
 8001314:	2308      	movs	r3, #8
 8001316:	4013      	ands	r3, r2
 8001318:	d010      	beq.n	800133c <main+0x111c>
			{
				uart_tx   [0x03] |= (1 << 3); // Zapis 1 v bity sostoyaniya porta
 800131a:	4b6e      	ldr	r3, [pc, #440]	; (80014d4 <main+0x12b4>)
 800131c:	78db      	ldrb	r3, [r3, #3]
 800131e:	2208      	movs	r2, #8
 8001320:	4313      	orrs	r3, r2
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b6b      	ldr	r3, [pc, #428]	; (80014d4 <main+0x12b4>)
 8001326:	70da      	strb	r2, [r3, #3]
				last_port_state &= ~ (1 << 3);       // Poslednee sostoyanie ravno 0
 8001328:	4b69      	ldr	r3, [pc, #420]	; (80014d0 <main+0x12b0>)
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	2208      	movs	r2, #8
 800132e:	4393      	bics	r3, r2
 8001330:	b29a      	uxth	r2, r3
 8001332:	4b67      	ldr	r3, [pc, #412]	; (80014d0 <main+0x12b0>)
 8001334:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;	      // Razreshaem peredachy
 8001336:	4b68      	ldr	r3, [pc, #416]	; (80014d8 <main+0x12b8>)
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]
			}
			/* ----------------------------------------------------------------------------------------------------------------------------*/

			/* Otpravka massiva pri izmenenii v signale -----------------------------------------------------------------------------------*/
			if (last_sig_p_4[0] != uart_tx[17])
 800133c:	4b67      	ldr	r3, [pc, #412]	; (80014dc <main+0x12bc>)
 800133e:	781a      	ldrb	r2, [r3, #0]
 8001340:	4b64      	ldr	r3, [pc, #400]	; (80014d4 <main+0x12b4>)
 8001342:	7c5b      	ldrb	r3, [r3, #17]
 8001344:	429a      	cmp	r2, r3
 8001346:	d006      	beq.n	8001356 <main+0x1136>
			{
				last_sig_p_4[0] = uart_tx[17];
 8001348:	4b62      	ldr	r3, [pc, #392]	; (80014d4 <main+0x12b4>)
 800134a:	7c5a      	ldrb	r2, [r3, #17]
 800134c:	4b63      	ldr	r3, [pc, #396]	; (80014dc <main+0x12bc>)
 800134e:	701a      	strb	r2, [r3, #0]
				uart_tx_on = 1;
 8001350:	4b61      	ldr	r3, [pc, #388]	; (80014d8 <main+0x12b8>)
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_4[1] != uart_tx[18])
 8001356:	4b61      	ldr	r3, [pc, #388]	; (80014dc <main+0x12bc>)
 8001358:	785a      	ldrb	r2, [r3, #1]
 800135a:	4b5e      	ldr	r3, [pc, #376]	; (80014d4 <main+0x12b4>)
 800135c:	7c9b      	ldrb	r3, [r3, #18]
 800135e:	429a      	cmp	r2, r3
 8001360:	d006      	beq.n	8001370 <main+0x1150>
			{
				last_sig_p_4[1] = uart_tx[18];
 8001362:	4b5c      	ldr	r3, [pc, #368]	; (80014d4 <main+0x12b4>)
 8001364:	7c9a      	ldrb	r2, [r3, #18]
 8001366:	4b5d      	ldr	r3, [pc, #372]	; (80014dc <main+0x12bc>)
 8001368:	705a      	strb	r2, [r3, #1]
				uart_tx_on = 1;
 800136a:	4b5b      	ldr	r3, [pc, #364]	; (80014d8 <main+0x12b8>)
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_4[2] != uart_tx[19])
 8001370:	4b5a      	ldr	r3, [pc, #360]	; (80014dc <main+0x12bc>)
 8001372:	789a      	ldrb	r2, [r3, #2]
 8001374:	4b57      	ldr	r3, [pc, #348]	; (80014d4 <main+0x12b4>)
 8001376:	7cdb      	ldrb	r3, [r3, #19]
 8001378:	429a      	cmp	r2, r3
 800137a:	d006      	beq.n	800138a <main+0x116a>
			{
				last_sig_p_4[2] = uart_tx[19];
 800137c:	4b55      	ldr	r3, [pc, #340]	; (80014d4 <main+0x12b4>)
 800137e:	7cda      	ldrb	r2, [r3, #19]
 8001380:	4b56      	ldr	r3, [pc, #344]	; (80014dc <main+0x12bc>)
 8001382:	709a      	strb	r2, [r3, #2]
				uart_tx_on = 1;
 8001384:	4b54      	ldr	r3, [pc, #336]	; (80014d8 <main+0x12b8>)
 8001386:	2201      	movs	r2, #1
 8001388:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_4[3] != uart_tx[20])
 800138a:	4b54      	ldr	r3, [pc, #336]	; (80014dc <main+0x12bc>)
 800138c:	78da      	ldrb	r2, [r3, #3]
 800138e:	4b51      	ldr	r3, [pc, #324]	; (80014d4 <main+0x12b4>)
 8001390:	7d1b      	ldrb	r3, [r3, #20]
 8001392:	429a      	cmp	r2, r3
 8001394:	d006      	beq.n	80013a4 <main+0x1184>
			{
				last_sig_p_4[3] = uart_tx[20];
 8001396:	4b4f      	ldr	r3, [pc, #316]	; (80014d4 <main+0x12b4>)
 8001398:	7d1a      	ldrb	r2, [r3, #20]
 800139a:	4b50      	ldr	r3, [pc, #320]	; (80014dc <main+0x12bc>)
 800139c:	70da      	strb	r2, [r3, #3]
				uart_tx_on = 1;
 800139e:	4b4e      	ldr	r3, [pc, #312]	; (80014d8 <main+0x12b8>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
			}


		}

		if(spi_state == 2 && spi_port == 5 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 80013a4:	4b41      	ldr	r3, [pc, #260]	; (80014ac <main+0x128c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d147      	bne.n	800143c <main+0x121c>
 80013ac:	4b40      	ldr	r3, [pc, #256]	; (80014b0 <main+0x1290>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b05      	cmp	r3, #5
 80013b2:	d143      	bne.n	800143c <main+0x121c>
 80013b4:	4b3f      	ldr	r3, [pc, #252]	; (80014b4 <main+0x1294>)
 80013b6:	691a      	ldr	r2, [r3, #16]
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4013      	ands	r3, r2
 80013be:	d03d      	beq.n	800143c <main+0x121c>
 80013c0:	4b3c      	ldr	r3, [pc, #240]	; (80014b4 <main+0x1294>)
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4013      	ands	r3, r2
 80013ca:	d037      	beq.n	800143c <main+0x121c>
 80013cc:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <main+0x1294>)
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	2280      	movs	r2, #128	; 0x80
 80013d2:	4013      	ands	r3, r2
 80013d4:	d032      	beq.n	800143c <main+0x121c>
 80013d6:	4b37      	ldr	r3, [pc, #220]	; (80014b4 <main+0x1294>)
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	2240      	movs	r2, #64	; 0x40
 80013dc:	4013      	ands	r3, r2
 80013de:	d02d      	beq.n	800143c <main+0x121c>
 80013e0:	4b35      	ldr	r3, [pc, #212]	; (80014b8 <main+0x1298>)
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	4013      	ands	r3, r2
 80013ea:	d027      	beq.n	800143c <main+0x121c>
 80013ec:	4b32      	ldr	r3, [pc, #200]	; (80014b8 <main+0x1298>)
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	01db      	lsls	r3, r3, #7
 80013f4:	4013      	ands	r3, r2
 80013f6:	d021      	beq.n	800143c <main+0x121c>
 80013f8:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <main+0x1298>)
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	019b      	lsls	r3, r3, #6
 8001400:	4013      	ands	r3, r2
 8001402:	d01b      	beq.n	800143c <main+0x121c>
 8001404:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <main+0x1298>)
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	015b      	lsls	r3, r3, #5
 800140c:	4013      	ands	r3, r2
 800140e:	d015      	beq.n	800143c <main+0x121c>
 8001410:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <main+0x1298>)
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	2204      	movs	r2, #4
 8001416:	4013      	ands	r3, r2
 8001418:	d010      	beq.n	800143c <main+0x121c>
 800141a:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <main+0x1298>)
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	2202      	movs	r2, #2
 8001420:	4013      	ands	r3, r2
 8001422:	d00b      	beq.n	800143c <main+0x121c>
 8001424:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <main+0x1298>)
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	2201      	movs	r2, #1
 800142a:	4013      	ands	r3, r2
 800142c:	d006      	beq.n	800143c <main+0x121c>
 800142e:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <main+0x1294>)
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	2220      	movs	r2, #32
 8001434:	4013      	ands	r3, r2
 8001436:	d001      	beq.n	800143c <main+0x121c>
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <main+0x121e>
 800143c:	2300      	movs	r3, #0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d055      	beq.n	80014ee <main+0x12ce>
		{
			spi_rx_ctrl_summ = spi_rx[0] + spi_rx[1] + spi_rx[2] + spi_rx[3] + spi_rx[4];
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <main+0x12a4>)
 8001444:	781a      	ldrb	r2, [r3, #0]
 8001446:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <main+0x12a4>)
 8001448:	785b      	ldrb	r3, [r3, #1]
 800144a:	18d3      	adds	r3, r2, r3
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <main+0x12a4>)
 8001450:	789b      	ldrb	r3, [r3, #2]
 8001452:	18d3      	adds	r3, r2, r3
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <main+0x12a4>)
 8001458:	78db      	ldrb	r3, [r3, #3]
 800145a:	18d3      	adds	r3, r2, r3
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <main+0x12a4>)
 8001460:	791b      	ldrb	r3, [r3, #4]
 8001462:	18d3      	adds	r3, r2, r3
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <main+0x12c0>)
 8001468:	701a      	strb	r2, [r3, #0]

			if(spi_rx_ctrl_summ == spi_rx[5])
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <main+0x12a4>)
 800146c:	795a      	ldrb	r2, [r3, #5]
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <main+0x12c0>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d138      	bne.n	80014e8 <main+0x12c8>
			{
				spi_state = 0;
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <main+0x128c>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
				spi_port = 6;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <main+0x1290>)
 800147e:	2206      	movs	r2, #6
 8001480:	701a      	strb	r2, [r3, #0]

				board_5_type = spi_rx[4];
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <main+0x12a4>)
 8001484:	791a      	ldrb	r2, [r3, #4]
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <main+0x12c4>)
 8001488:	701a      	strb	r2, [r3, #0]
				uart_tx [21]  = spi_rx[0];
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <main+0x12a4>)
 800148c:	781a      	ldrb	r2, [r3, #0]
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <main+0x12b4>)
 8001490:	755a      	strb	r2, [r3, #21]
				uart_tx [22]  = spi_rx[1];
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <main+0x12a4>)
 8001494:	785a      	ldrb	r2, [r3, #1]
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <main+0x12b4>)
 8001498:	759a      	strb	r2, [r3, #22]
				uart_tx [23]  = spi_rx[2];
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <main+0x12a4>)
 800149c:	789a      	ldrb	r2, [r3, #2]
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <main+0x12b4>)
 80014a0:	75da      	strb	r2, [r3, #23]
				uart_tx [24]  = spi_rx[3];
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <main+0x12a4>)
 80014a4:	78da      	ldrb	r2, [r3, #3]
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <main+0x12b4>)
 80014a8:	761a      	strb	r2, [r3, #24]
 80014aa:	e020      	b.n	80014ee <main+0x12ce>
 80014ac:	20000208 	.word	0x20000208
 80014b0:	20000000 	.word	0x20000000
 80014b4:	48000800 	.word	0x48000800
 80014b8:	48000400 	.word	0x48000400
 80014bc:	200002e0 	.word	0x200002e0
 80014c0:	20000200 	.word	0x20000200
 80014c4:	200001f8 	.word	0x200001f8
 80014c8:	2000005c 	.word	0x2000005c
 80014cc:	2000020c 	.word	0x2000020c
 80014d0:	20000350 	.word	0x20000350
 80014d4:	20000004 	.word	0x20000004
 80014d8:	2000003b 	.word	0x2000003b
 80014dc:	20000360 	.word	0x20000360
 80014e0:	20000206 	.word	0x20000206
 80014e4:	2000020d 	.word	0x2000020d
			}
			else
			{
				spi_state = 0;
 80014e8:	4bb8      	ldr	r3, [pc, #736]	; (80017cc <main+0x15ac>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
		/* ------------------------------------------------------------------------------------------------------------------------------*/


		/* *****PORT_6*****--------------------------------------------------------------------------------------------------------------*/
		/* Esli sostoyanie SPI ravno 0, to proveryaem, chto proishodit opros nyznogo porta, i vse nogi spi podnyaty----------------------*/
		if(spi_state == 0 && spi_port == 6 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 80014ee:	4bb7      	ldr	r3, [pc, #732]	; (80017cc <main+0x15ac>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d147      	bne.n	8001586 <main+0x1366>
 80014f6:	4bb6      	ldr	r3, [pc, #728]	; (80017d0 <main+0x15b0>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d143      	bne.n	8001586 <main+0x1366>
 80014fe:	4bb5      	ldr	r3, [pc, #724]	; (80017d4 <main+0x15b4>)
 8001500:	691a      	ldr	r2, [r3, #16]
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4013      	ands	r3, r2
 8001508:	d03d      	beq.n	8001586 <main+0x1366>
 800150a:	4bb2      	ldr	r3, [pc, #712]	; (80017d4 <main+0x15b4>)
 800150c:	691a      	ldr	r2, [r3, #16]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4013      	ands	r3, r2
 8001514:	d037      	beq.n	8001586 <main+0x1366>
 8001516:	4baf      	ldr	r3, [pc, #700]	; (80017d4 <main+0x15b4>)
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	2280      	movs	r2, #128	; 0x80
 800151c:	4013      	ands	r3, r2
 800151e:	d032      	beq.n	8001586 <main+0x1366>
 8001520:	4bac      	ldr	r3, [pc, #688]	; (80017d4 <main+0x15b4>)
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	2240      	movs	r2, #64	; 0x40
 8001526:	4013      	ands	r3, r2
 8001528:	d02d      	beq.n	8001586 <main+0x1366>
 800152a:	4bab      	ldr	r3, [pc, #684]	; (80017d8 <main+0x15b8>)
 800152c:	691a      	ldr	r2, [r3, #16]
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	021b      	lsls	r3, r3, #8
 8001532:	4013      	ands	r3, r2
 8001534:	d027      	beq.n	8001586 <main+0x1366>
 8001536:	4ba8      	ldr	r3, [pc, #672]	; (80017d8 <main+0x15b8>)
 8001538:	691a      	ldr	r2, [r3, #16]
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	01db      	lsls	r3, r3, #7
 800153e:	4013      	ands	r3, r2
 8001540:	d021      	beq.n	8001586 <main+0x1366>
 8001542:	4ba5      	ldr	r3, [pc, #660]	; (80017d8 <main+0x15b8>)
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	2380      	movs	r3, #128	; 0x80
 8001548:	019b      	lsls	r3, r3, #6
 800154a:	4013      	ands	r3, r2
 800154c:	d01b      	beq.n	8001586 <main+0x1366>
 800154e:	4ba2      	ldr	r3, [pc, #648]	; (80017d8 <main+0x15b8>)
 8001550:	691a      	ldr	r2, [r3, #16]
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	015b      	lsls	r3, r3, #5
 8001556:	4013      	ands	r3, r2
 8001558:	d015      	beq.n	8001586 <main+0x1366>
 800155a:	4b9f      	ldr	r3, [pc, #636]	; (80017d8 <main+0x15b8>)
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	2204      	movs	r2, #4
 8001560:	4013      	ands	r3, r2
 8001562:	d010      	beq.n	8001586 <main+0x1366>
 8001564:	4b9c      	ldr	r3, [pc, #624]	; (80017d8 <main+0x15b8>)
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	2202      	movs	r2, #2
 800156a:	4013      	ands	r3, r2
 800156c:	d00b      	beq.n	8001586 <main+0x1366>
 800156e:	4b9a      	ldr	r3, [pc, #616]	; (80017d8 <main+0x15b8>)
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	2201      	movs	r2, #1
 8001574:	4013      	ands	r3, r2
 8001576:	d006      	beq.n	8001586 <main+0x1366>
 8001578:	4b96      	ldr	r3, [pc, #600]	; (80017d4 <main+0x15b4>)
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	2220      	movs	r2, #32
 800157e:	4013      	ands	r3, r2
 8001580:	d001      	beq.n	8001586 <main+0x1366>
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <main+0x1368>
 8001586:	2300      	movs	r3, #0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d100      	bne.n	800158e <main+0x136e>
 800158c:	e09a      	b.n	80016c4 <main+0x14a4>
		{
			spi_state = 1;
 800158e:	4b8f      	ldr	r3, [pc, #572]	; (80017cc <main+0x15ac>)
 8001590:	2201      	movs	r2, #1
 8001592:	701a      	strb	r2, [r3, #0]


			/* Prisvaivaem massivy otpravlyaemomy po SPI znacheniya signalov, prinyatyh po UART--------------------------------------------*/
			spi_tx[0] = uart_rx_slice[23];
 8001594:	4b91      	ldr	r3, [pc, #580]	; (80017dc <main+0x15bc>)
 8001596:	7dda      	ldrb	r2, [r3, #23]
 8001598:	4b91      	ldr	r3, [pc, #580]	; (80017e0 <main+0x15c0>)
 800159a:	701a      	strb	r2, [r3, #0]
			spi_tx[1] = uart_rx_slice[24];
 800159c:	4b8f      	ldr	r3, [pc, #572]	; (80017dc <main+0x15bc>)
 800159e:	7e1a      	ldrb	r2, [r3, #24]
 80015a0:	4b8f      	ldr	r3, [pc, #572]	; (80017e0 <main+0x15c0>)
 80015a2:	705a      	strb	r2, [r3, #1]
			spi_tx[2] = uart_rx_slice[25];
 80015a4:	4b8d      	ldr	r3, [pc, #564]	; (80017dc <main+0x15bc>)
 80015a6:	7e5a      	ldrb	r2, [r3, #25]
 80015a8:	4b8d      	ldr	r3, [pc, #564]	; (80017e0 <main+0x15c0>)
 80015aa:	709a      	strb	r2, [r3, #2]
			spi_tx[3] = uart_rx_slice[26];
 80015ac:	4b8b      	ldr	r3, [pc, #556]	; (80017dc <main+0x15bc>)
 80015ae:	7e9a      	ldrb	r2, [r3, #26]
 80015b0:	4b8b      	ldr	r3, [pc, #556]	; (80017e0 <main+0x15c0>)
 80015b2:	70da      	strb	r2, [r3, #3]

			/* Schitayem kontrolnyu summy, i zapisyvaem v poslednii element massiva, otpravlyaemogo po SPI---------------------------------*/
			spi_tx[5] = spi_tx[0] + spi_tx[1] + spi_tx[2] + spi_tx[3] + spi_tx[4];
 80015b4:	4b8a      	ldr	r3, [pc, #552]	; (80017e0 <main+0x15c0>)
 80015b6:	781a      	ldrb	r2, [r3, #0]
 80015b8:	4b89      	ldr	r3, [pc, #548]	; (80017e0 <main+0x15c0>)
 80015ba:	785b      	ldrb	r3, [r3, #1]
 80015bc:	18d3      	adds	r3, r2, r3
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b87      	ldr	r3, [pc, #540]	; (80017e0 <main+0x15c0>)
 80015c2:	789b      	ldrb	r3, [r3, #2]
 80015c4:	18d3      	adds	r3, r2, r3
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	4b85      	ldr	r3, [pc, #532]	; (80017e0 <main+0x15c0>)
 80015ca:	78db      	ldrb	r3, [r3, #3]
 80015cc:	18d3      	adds	r3, r2, r3
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b83      	ldr	r3, [pc, #524]	; (80017e0 <main+0x15c0>)
 80015d2:	791b      	ldrb	r3, [r3, #4]
 80015d4:	18d3      	adds	r3, r2, r3
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	4b81      	ldr	r3, [pc, #516]	; (80017e0 <main+0x15c0>)
 80015da:	715a      	strb	r2, [r3, #5]


			/* Opyskaem nogy CS, i proizvodim priemo-peredachu po SPI----------------------------------------------------------------------*/
			GPIOB->BRR = (1<<14);
 80015dc:	4b7e      	ldr	r3, [pc, #504]	; (80017d8 <main+0x15b8>)
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	01d2      	lsls	r2, r2, #7
 80015e2:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*)spi_tx, (uint8_t*)spi_rx, 0x06);
 80015e4:	4a7f      	ldr	r2, [pc, #508]	; (80017e4 <main+0x15c4>)
 80015e6:	497e      	ldr	r1, [pc, #504]	; (80017e0 <main+0x15c0>)
 80015e8:	487f      	ldr	r0, [pc, #508]	; (80017e8 <main+0x15c8>)
 80015ea:	2306      	movs	r3, #6
 80015ec:	f003 fab6 	bl	8004b5c <HAL_SPI_TransmitReceive_IT>

			/* Platy vstavili v port ------------------------------------------------------------------------------------------------------*/
			if(board_5_type != 0x00 && (last_port_state & (1<<4)) == 0x00)
 80015f0:	4b7e      	ldr	r3, [pc, #504]	; (80017ec <main+0x15cc>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d016      	beq.n	8001626 <main+0x1406>
 80015f8:	4b7d      	ldr	r3, [pc, #500]	; (80017f0 <main+0x15d0>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	001a      	movs	r2, r3
 80015fe:	2310      	movs	r3, #16
 8001600:	4013      	ands	r3, r2
 8001602:	d110      	bne.n	8001626 <main+0x1406>
			{
				uart_tx   [0x03] &= ~ (1 << 4); // Zapis 0 v bity sostoyaniya porta
 8001604:	4b7b      	ldr	r3, [pc, #492]	; (80017f4 <main+0x15d4>)
 8001606:	78db      	ldrb	r3, [r3, #3]
 8001608:	2210      	movs	r2, #16
 800160a:	4393      	bics	r3, r2
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b79      	ldr	r3, [pc, #484]	; (80017f4 <main+0x15d4>)
 8001610:	70da      	strb	r2, [r3, #3]
				last_port_state |= (1 << 4);  	      // Poslednee sostoyanie ravno 1
 8001612:	4b77      	ldr	r3, [pc, #476]	; (80017f0 <main+0x15d0>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	2210      	movs	r2, #16
 8001618:	4313      	orrs	r3, r2
 800161a:	b29a      	uxth	r2, r3
 800161c:	4b74      	ldr	r3, [pc, #464]	; (80017f0 <main+0x15d0>)
 800161e:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;		      // Razreshaem peredachy
 8001620:	4b75      	ldr	r3, [pc, #468]	; (80017f8 <main+0x15d8>)
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]
			}
			/* ----------------------------------------------------------------------------------------------------------------------------*/


			/* Platy dostali iz porta -----------------------------------------------------------------------------------------------------*/
			if(board_5_type == 0x00 && (last_port_state & (1<<4)) != 0x00)
 8001626:	4b71      	ldr	r3, [pc, #452]	; (80017ec <main+0x15cc>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d116      	bne.n	800165c <main+0x143c>
 800162e:	4b70      	ldr	r3, [pc, #448]	; (80017f0 <main+0x15d0>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	001a      	movs	r2, r3
 8001634:	2310      	movs	r3, #16
 8001636:	4013      	ands	r3, r2
 8001638:	d010      	beq.n	800165c <main+0x143c>
			{
				uart_tx   [0x03] |= (1 << 4); // Zapis 1 v bity sostoyaniya porta
 800163a:	4b6e      	ldr	r3, [pc, #440]	; (80017f4 <main+0x15d4>)
 800163c:	78db      	ldrb	r3, [r3, #3]
 800163e:	2210      	movs	r2, #16
 8001640:	4313      	orrs	r3, r2
 8001642:	b2da      	uxtb	r2, r3
 8001644:	4b6b      	ldr	r3, [pc, #428]	; (80017f4 <main+0x15d4>)
 8001646:	70da      	strb	r2, [r3, #3]
				last_port_state &= ~ (1 << 4);       // Poslednee sostoyanie ravno 0
 8001648:	4b69      	ldr	r3, [pc, #420]	; (80017f0 <main+0x15d0>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	2210      	movs	r2, #16
 800164e:	4393      	bics	r3, r2
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b67      	ldr	r3, [pc, #412]	; (80017f0 <main+0x15d0>)
 8001654:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;	      // Razreshaem peredachy
 8001656:	4b68      	ldr	r3, [pc, #416]	; (80017f8 <main+0x15d8>)
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
			}
			/* ----------------------------------------------------------------------------------------------------------------------------*/

			/* Otpravka massiva pri izmenenii v signale -----------------------------------------------------------------------------------*/
			if (last_sig_p_5[0] != uart_tx[21])
 800165c:	4b67      	ldr	r3, [pc, #412]	; (80017fc <main+0x15dc>)
 800165e:	781a      	ldrb	r2, [r3, #0]
 8001660:	4b64      	ldr	r3, [pc, #400]	; (80017f4 <main+0x15d4>)
 8001662:	7d5b      	ldrb	r3, [r3, #21]
 8001664:	429a      	cmp	r2, r3
 8001666:	d006      	beq.n	8001676 <main+0x1456>
			{
				last_sig_p_5[0] = uart_tx[21];
 8001668:	4b62      	ldr	r3, [pc, #392]	; (80017f4 <main+0x15d4>)
 800166a:	7d5a      	ldrb	r2, [r3, #21]
 800166c:	4b63      	ldr	r3, [pc, #396]	; (80017fc <main+0x15dc>)
 800166e:	701a      	strb	r2, [r3, #0]
				uart_tx_on = 1;
 8001670:	4b61      	ldr	r3, [pc, #388]	; (80017f8 <main+0x15d8>)
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_5[1] != uart_tx[22])
 8001676:	4b61      	ldr	r3, [pc, #388]	; (80017fc <main+0x15dc>)
 8001678:	785a      	ldrb	r2, [r3, #1]
 800167a:	4b5e      	ldr	r3, [pc, #376]	; (80017f4 <main+0x15d4>)
 800167c:	7d9b      	ldrb	r3, [r3, #22]
 800167e:	429a      	cmp	r2, r3
 8001680:	d006      	beq.n	8001690 <main+0x1470>
			{
				last_sig_p_5[1] = uart_tx[22];
 8001682:	4b5c      	ldr	r3, [pc, #368]	; (80017f4 <main+0x15d4>)
 8001684:	7d9a      	ldrb	r2, [r3, #22]
 8001686:	4b5d      	ldr	r3, [pc, #372]	; (80017fc <main+0x15dc>)
 8001688:	705a      	strb	r2, [r3, #1]
				uart_tx_on = 1;
 800168a:	4b5b      	ldr	r3, [pc, #364]	; (80017f8 <main+0x15d8>)
 800168c:	2201      	movs	r2, #1
 800168e:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_5[2] != uart_tx[23])
 8001690:	4b5a      	ldr	r3, [pc, #360]	; (80017fc <main+0x15dc>)
 8001692:	789a      	ldrb	r2, [r3, #2]
 8001694:	4b57      	ldr	r3, [pc, #348]	; (80017f4 <main+0x15d4>)
 8001696:	7ddb      	ldrb	r3, [r3, #23]
 8001698:	429a      	cmp	r2, r3
 800169a:	d006      	beq.n	80016aa <main+0x148a>
			{
				last_sig_p_5[2] = uart_tx[23];
 800169c:	4b55      	ldr	r3, [pc, #340]	; (80017f4 <main+0x15d4>)
 800169e:	7dda      	ldrb	r2, [r3, #23]
 80016a0:	4b56      	ldr	r3, [pc, #344]	; (80017fc <main+0x15dc>)
 80016a2:	709a      	strb	r2, [r3, #2]
				uart_tx_on = 1;
 80016a4:	4b54      	ldr	r3, [pc, #336]	; (80017f8 <main+0x15d8>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_5[3] != uart_tx[24])
 80016aa:	4b54      	ldr	r3, [pc, #336]	; (80017fc <main+0x15dc>)
 80016ac:	78da      	ldrb	r2, [r3, #3]
 80016ae:	4b51      	ldr	r3, [pc, #324]	; (80017f4 <main+0x15d4>)
 80016b0:	7e1b      	ldrb	r3, [r3, #24]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d006      	beq.n	80016c4 <main+0x14a4>
			{
				last_sig_p_5[3] = uart_tx[24];
 80016b6:	4b4f      	ldr	r3, [pc, #316]	; (80017f4 <main+0x15d4>)
 80016b8:	7e1a      	ldrb	r2, [r3, #24]
 80016ba:	4b50      	ldr	r3, [pc, #320]	; (80017fc <main+0x15dc>)
 80016bc:	70da      	strb	r2, [r3, #3]
				uart_tx_on = 1;
 80016be:	4b4e      	ldr	r3, [pc, #312]	; (80017f8 <main+0x15d8>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	701a      	strb	r2, [r3, #0]
			}


		}

		if(spi_state == 2 && spi_port == 6 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 80016c4:	4b41      	ldr	r3, [pc, #260]	; (80017cc <main+0x15ac>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d147      	bne.n	800175c <main+0x153c>
 80016cc:	4b40      	ldr	r3, [pc, #256]	; (80017d0 <main+0x15b0>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b06      	cmp	r3, #6
 80016d2:	d143      	bne.n	800175c <main+0x153c>
 80016d4:	4b3f      	ldr	r3, [pc, #252]	; (80017d4 <main+0x15b4>)
 80016d6:	691a      	ldr	r2, [r3, #16]
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4013      	ands	r3, r2
 80016de:	d03d      	beq.n	800175c <main+0x153c>
 80016e0:	4b3c      	ldr	r3, [pc, #240]	; (80017d4 <main+0x15b4>)
 80016e2:	691a      	ldr	r2, [r3, #16]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4013      	ands	r3, r2
 80016ea:	d037      	beq.n	800175c <main+0x153c>
 80016ec:	4b39      	ldr	r3, [pc, #228]	; (80017d4 <main+0x15b4>)
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	2280      	movs	r2, #128	; 0x80
 80016f2:	4013      	ands	r3, r2
 80016f4:	d032      	beq.n	800175c <main+0x153c>
 80016f6:	4b37      	ldr	r3, [pc, #220]	; (80017d4 <main+0x15b4>)
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	2240      	movs	r2, #64	; 0x40
 80016fc:	4013      	ands	r3, r2
 80016fe:	d02d      	beq.n	800175c <main+0x153c>
 8001700:	4b35      	ldr	r3, [pc, #212]	; (80017d8 <main+0x15b8>)
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	4013      	ands	r3, r2
 800170a:	d027      	beq.n	800175c <main+0x153c>
 800170c:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <main+0x15b8>)
 800170e:	691a      	ldr	r2, [r3, #16]
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	01db      	lsls	r3, r3, #7
 8001714:	4013      	ands	r3, r2
 8001716:	d021      	beq.n	800175c <main+0x153c>
 8001718:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <main+0x15b8>)
 800171a:	691a      	ldr	r2, [r3, #16]
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	019b      	lsls	r3, r3, #6
 8001720:	4013      	ands	r3, r2
 8001722:	d01b      	beq.n	800175c <main+0x153c>
 8001724:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <main+0x15b8>)
 8001726:	691a      	ldr	r2, [r3, #16]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	015b      	lsls	r3, r3, #5
 800172c:	4013      	ands	r3, r2
 800172e:	d015      	beq.n	800175c <main+0x153c>
 8001730:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <main+0x15b8>)
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	2204      	movs	r2, #4
 8001736:	4013      	ands	r3, r2
 8001738:	d010      	beq.n	800175c <main+0x153c>
 800173a:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <main+0x15b8>)
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	2202      	movs	r2, #2
 8001740:	4013      	ands	r3, r2
 8001742:	d00b      	beq.n	800175c <main+0x153c>
 8001744:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <main+0x15b8>)
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	2201      	movs	r2, #1
 800174a:	4013      	ands	r3, r2
 800174c:	d006      	beq.n	800175c <main+0x153c>
 800174e:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <main+0x15b4>)
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	2220      	movs	r2, #32
 8001754:	4013      	ands	r3, r2
 8001756:	d001      	beq.n	800175c <main+0x153c>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <main+0x153e>
 800175c:	2300      	movs	r3, #0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d055      	beq.n	800180e <main+0x15ee>
		{
			spi_rx_ctrl_summ = spi_rx[0] + spi_rx[1] + spi_rx[2] + spi_rx[3] + spi_rx[4];
 8001762:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <main+0x15c4>)
 8001764:	781a      	ldrb	r2, [r3, #0]
 8001766:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <main+0x15c4>)
 8001768:	785b      	ldrb	r3, [r3, #1]
 800176a:	18d3      	adds	r3, r2, r3
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <main+0x15c4>)
 8001770:	789b      	ldrb	r3, [r3, #2]
 8001772:	18d3      	adds	r3, r2, r3
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <main+0x15c4>)
 8001778:	78db      	ldrb	r3, [r3, #3]
 800177a:	18d3      	adds	r3, r2, r3
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <main+0x15c4>)
 8001780:	791b      	ldrb	r3, [r3, #4]
 8001782:	18d3      	adds	r3, r2, r3
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <main+0x15e0>)
 8001788:	701a      	strb	r2, [r3, #0]

			if(spi_rx_ctrl_summ == spi_rx[5])
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <main+0x15c4>)
 800178c:	795a      	ldrb	r2, [r3, #5]
 800178e:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <main+0x15e0>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d138      	bne.n	8001808 <main+0x15e8>
			{
				spi_state = 0;
 8001796:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <main+0x15ac>)
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
				spi_port = 7;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <main+0x15b0>)
 800179e:	2207      	movs	r2, #7
 80017a0:	701a      	strb	r2, [r3, #0]

				board_6_type = spi_rx[4];
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <main+0x15c4>)
 80017a4:	791a      	ldrb	r2, [r3, #4]
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <main+0x15e4>)
 80017a8:	701a      	strb	r2, [r3, #0]
				uart_tx [25]  = spi_rx[0];
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <main+0x15c4>)
 80017ac:	781a      	ldrb	r2, [r3, #0]
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <main+0x15d4>)
 80017b0:	765a      	strb	r2, [r3, #25]
				uart_tx [26]  = spi_rx[1];
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <main+0x15c4>)
 80017b4:	785a      	ldrb	r2, [r3, #1]
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <main+0x15d4>)
 80017b8:	769a      	strb	r2, [r3, #26]
				uart_tx [27]  = spi_rx[2];
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <main+0x15c4>)
 80017bc:	789a      	ldrb	r2, [r3, #2]
 80017be:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <main+0x15d4>)
 80017c0:	76da      	strb	r2, [r3, #27]
				uart_tx [28]  = spi_rx[3];
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <main+0x15c4>)
 80017c4:	78da      	ldrb	r2, [r3, #3]
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <main+0x15d4>)
 80017c8:	771a      	strb	r2, [r3, #28]
 80017ca:	e020      	b.n	800180e <main+0x15ee>
 80017cc:	20000208 	.word	0x20000208
 80017d0:	20000000 	.word	0x20000000
 80017d4:	48000800 	.word	0x48000800
 80017d8:	48000400 	.word	0x48000400
 80017dc:	200002e0 	.word	0x200002e0
 80017e0:	20000200 	.word	0x20000200
 80017e4:	200001f8 	.word	0x200001f8
 80017e8:	2000005c 	.word	0x2000005c
 80017ec:	2000020d 	.word	0x2000020d
 80017f0:	20000350 	.word	0x20000350
 80017f4:	20000004 	.word	0x20000004
 80017f8:	2000003b 	.word	0x2000003b
 80017fc:	20000364 	.word	0x20000364
 8001800:	20000206 	.word	0x20000206
 8001804:	2000020e 	.word	0x2000020e
			}
			else
			{
				spi_state = 0;
 8001808:	4bb9      	ldr	r3, [pc, #740]	; (8001af0 <main+0x18d0>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
		/* ------------------------------------------------------------------------------------------------------------------------------*/


		/* *****PORT_7*****--------------------------------------------------------------------------------------------------------------*/
		/* Esli sostoyanie SPI ravno 0, to proveryaem, chto proishodit opros nyznogo porta, i vse nogi spi podnyaty----------------------*/
		if(spi_state == 0 && spi_port == 7 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 800180e:	4bb8      	ldr	r3, [pc, #736]	; (8001af0 <main+0x18d0>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d147      	bne.n	80018a6 <main+0x1686>
 8001816:	4bb7      	ldr	r3, [pc, #732]	; (8001af4 <main+0x18d4>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b07      	cmp	r3, #7
 800181c:	d143      	bne.n	80018a6 <main+0x1686>
 800181e:	4bb6      	ldr	r3, [pc, #728]	; (8001af8 <main+0x18d8>)
 8001820:	691a      	ldr	r2, [r3, #16]
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4013      	ands	r3, r2
 8001828:	d03d      	beq.n	80018a6 <main+0x1686>
 800182a:	4bb3      	ldr	r3, [pc, #716]	; (8001af8 <main+0x18d8>)
 800182c:	691a      	ldr	r2, [r3, #16]
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4013      	ands	r3, r2
 8001834:	d037      	beq.n	80018a6 <main+0x1686>
 8001836:	4bb0      	ldr	r3, [pc, #704]	; (8001af8 <main+0x18d8>)
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	2280      	movs	r2, #128	; 0x80
 800183c:	4013      	ands	r3, r2
 800183e:	d032      	beq.n	80018a6 <main+0x1686>
 8001840:	4bad      	ldr	r3, [pc, #692]	; (8001af8 <main+0x18d8>)
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	2240      	movs	r2, #64	; 0x40
 8001846:	4013      	ands	r3, r2
 8001848:	d02d      	beq.n	80018a6 <main+0x1686>
 800184a:	4bac      	ldr	r3, [pc, #688]	; (8001afc <main+0x18dc>)
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	4013      	ands	r3, r2
 8001854:	d027      	beq.n	80018a6 <main+0x1686>
 8001856:	4ba9      	ldr	r3, [pc, #676]	; (8001afc <main+0x18dc>)
 8001858:	691a      	ldr	r2, [r3, #16]
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	01db      	lsls	r3, r3, #7
 800185e:	4013      	ands	r3, r2
 8001860:	d021      	beq.n	80018a6 <main+0x1686>
 8001862:	4ba6      	ldr	r3, [pc, #664]	; (8001afc <main+0x18dc>)
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	019b      	lsls	r3, r3, #6
 800186a:	4013      	ands	r3, r2
 800186c:	d01b      	beq.n	80018a6 <main+0x1686>
 800186e:	4ba3      	ldr	r3, [pc, #652]	; (8001afc <main+0x18dc>)
 8001870:	691a      	ldr	r2, [r3, #16]
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	015b      	lsls	r3, r3, #5
 8001876:	4013      	ands	r3, r2
 8001878:	d015      	beq.n	80018a6 <main+0x1686>
 800187a:	4ba0      	ldr	r3, [pc, #640]	; (8001afc <main+0x18dc>)
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	2204      	movs	r2, #4
 8001880:	4013      	ands	r3, r2
 8001882:	d010      	beq.n	80018a6 <main+0x1686>
 8001884:	4b9d      	ldr	r3, [pc, #628]	; (8001afc <main+0x18dc>)
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	2202      	movs	r2, #2
 800188a:	4013      	ands	r3, r2
 800188c:	d00b      	beq.n	80018a6 <main+0x1686>
 800188e:	4b9b      	ldr	r3, [pc, #620]	; (8001afc <main+0x18dc>)
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2201      	movs	r2, #1
 8001894:	4013      	ands	r3, r2
 8001896:	d006      	beq.n	80018a6 <main+0x1686>
 8001898:	4b97      	ldr	r3, [pc, #604]	; (8001af8 <main+0x18d8>)
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	2220      	movs	r2, #32
 800189e:	4013      	ands	r3, r2
 80018a0:	d001      	beq.n	80018a6 <main+0x1686>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <main+0x1688>
 80018a6:	2300      	movs	r3, #0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d100      	bne.n	80018ae <main+0x168e>
 80018ac:	e09a      	b.n	80019e4 <main+0x17c4>
		{
			spi_state = 1;
 80018ae:	4b90      	ldr	r3, [pc, #576]	; (8001af0 <main+0x18d0>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]

			/* Prisvaivaem massivy otpravlyaemomy po SPI znacheniya signalov, prinyatyh po UART--------------------------------------------*/
			spi_tx[0] = uart_rx_slice[27];
 80018b4:	4b92      	ldr	r3, [pc, #584]	; (8001b00 <main+0x18e0>)
 80018b6:	7eda      	ldrb	r2, [r3, #27]
 80018b8:	4b92      	ldr	r3, [pc, #584]	; (8001b04 <main+0x18e4>)
 80018ba:	701a      	strb	r2, [r3, #0]
			spi_tx[1] = uart_rx_slice[28];
 80018bc:	4b90      	ldr	r3, [pc, #576]	; (8001b00 <main+0x18e0>)
 80018be:	7f1a      	ldrb	r2, [r3, #28]
 80018c0:	4b90      	ldr	r3, [pc, #576]	; (8001b04 <main+0x18e4>)
 80018c2:	705a      	strb	r2, [r3, #1]
			spi_tx[2] = uart_rx_slice[29];
 80018c4:	4b8e      	ldr	r3, [pc, #568]	; (8001b00 <main+0x18e0>)
 80018c6:	7f5a      	ldrb	r2, [r3, #29]
 80018c8:	4b8e      	ldr	r3, [pc, #568]	; (8001b04 <main+0x18e4>)
 80018ca:	709a      	strb	r2, [r3, #2]
			spi_tx[3] = uart_rx_slice[30];
 80018cc:	4b8c      	ldr	r3, [pc, #560]	; (8001b00 <main+0x18e0>)
 80018ce:	7f9a      	ldrb	r2, [r3, #30]
 80018d0:	4b8c      	ldr	r3, [pc, #560]	; (8001b04 <main+0x18e4>)
 80018d2:	70da      	strb	r2, [r3, #3]

			/* Schitayem kontrolnyu summy, i zapisyvaem v poslednii element massiva, otpravlyaemogo po SPI---------------------------------*/
			spi_tx[5] = spi_tx[0] + spi_tx[1] + spi_tx[2] + spi_tx[3] + spi_tx[4];
 80018d4:	4b8b      	ldr	r3, [pc, #556]	; (8001b04 <main+0x18e4>)
 80018d6:	781a      	ldrb	r2, [r3, #0]
 80018d8:	4b8a      	ldr	r3, [pc, #552]	; (8001b04 <main+0x18e4>)
 80018da:	785b      	ldrb	r3, [r3, #1]
 80018dc:	18d3      	adds	r3, r2, r3
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	4b88      	ldr	r3, [pc, #544]	; (8001b04 <main+0x18e4>)
 80018e2:	789b      	ldrb	r3, [r3, #2]
 80018e4:	18d3      	adds	r3, r2, r3
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	4b86      	ldr	r3, [pc, #536]	; (8001b04 <main+0x18e4>)
 80018ea:	78db      	ldrb	r3, [r3, #3]
 80018ec:	18d3      	adds	r3, r2, r3
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	4b84      	ldr	r3, [pc, #528]	; (8001b04 <main+0x18e4>)
 80018f2:	791b      	ldrb	r3, [r3, #4]
 80018f4:	18d3      	adds	r3, r2, r3
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	4b82      	ldr	r3, [pc, #520]	; (8001b04 <main+0x18e4>)
 80018fa:	715a      	strb	r2, [r3, #5]

			/* Opyskaem nogy CS, i proizvodim priemo-peredachu po SPI----------------------------------------------------------------------*/
			GPIOB->BRR = (1<<13);
 80018fc:	4b7f      	ldr	r3, [pc, #508]	; (8001afc <main+0x18dc>)
 80018fe:	2280      	movs	r2, #128	; 0x80
 8001900:	0192      	lsls	r2, r2, #6
 8001902:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*)spi_tx, (uint8_t*)spi_rx, 0x06);
 8001904:	4a80      	ldr	r2, [pc, #512]	; (8001b08 <main+0x18e8>)
 8001906:	497f      	ldr	r1, [pc, #508]	; (8001b04 <main+0x18e4>)
 8001908:	4880      	ldr	r0, [pc, #512]	; (8001b0c <main+0x18ec>)
 800190a:	2306      	movs	r3, #6
 800190c:	f003 f926 	bl	8004b5c <HAL_SPI_TransmitReceive_IT>

			/* Platy vstavili v port ------------------------------------------------------------------------------------------------------*/
			if(board_6_type != 0x00 && (last_port_state & (1<<5)) == 0x00)
 8001910:	4b7f      	ldr	r3, [pc, #508]	; (8001b10 <main+0x18f0>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d016      	beq.n	8001946 <main+0x1726>
 8001918:	4b7e      	ldr	r3, [pc, #504]	; (8001b14 <main+0x18f4>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	001a      	movs	r2, r3
 800191e:	2320      	movs	r3, #32
 8001920:	4013      	ands	r3, r2
 8001922:	d110      	bne.n	8001946 <main+0x1726>
			{
				uart_tx   [0x03] &= ~ (1 << 5); // Zapis 0 v bity sostoyaniya porta
 8001924:	4b7c      	ldr	r3, [pc, #496]	; (8001b18 <main+0x18f8>)
 8001926:	78db      	ldrb	r3, [r3, #3]
 8001928:	2220      	movs	r2, #32
 800192a:	4393      	bics	r3, r2
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4b7a      	ldr	r3, [pc, #488]	; (8001b18 <main+0x18f8>)
 8001930:	70da      	strb	r2, [r3, #3]
				last_port_state |= (1 << 5); 	      // Poslednee sostoyanie ravno 1
 8001932:	4b78      	ldr	r3, [pc, #480]	; (8001b14 <main+0x18f4>)
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	2220      	movs	r2, #32
 8001938:	4313      	orrs	r3, r2
 800193a:	b29a      	uxth	r2, r3
 800193c:	4b75      	ldr	r3, [pc, #468]	; (8001b14 <main+0x18f4>)
 800193e:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;		      // Razreshaem peredachy
 8001940:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <main+0x18fc>)
 8001942:	2201      	movs	r2, #1
 8001944:	701a      	strb	r2, [r3, #0]
			}
			/* ----------------------------------------------------------------------------------------------------------------------------*/

			/* Platy dostali iz porta -----------------------------------------------------------------------------------------------------*/
			if(board_6_type == 0x00 && (last_port_state & (1<<5)) != 0x00)
 8001946:	4b72      	ldr	r3, [pc, #456]	; (8001b10 <main+0x18f0>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d116      	bne.n	800197c <main+0x175c>
 800194e:	4b71      	ldr	r3, [pc, #452]	; (8001b14 <main+0x18f4>)
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	001a      	movs	r2, r3
 8001954:	2320      	movs	r3, #32
 8001956:	4013      	ands	r3, r2
 8001958:	d010      	beq.n	800197c <main+0x175c>
			{
				uart_tx   [0x03] |= (1 << 5); // Zapis 1 v bity sostoyaniya porta
 800195a:	4b6f      	ldr	r3, [pc, #444]	; (8001b18 <main+0x18f8>)
 800195c:	78db      	ldrb	r3, [r3, #3]
 800195e:	2220      	movs	r2, #32
 8001960:	4313      	orrs	r3, r2
 8001962:	b2da      	uxtb	r2, r3
 8001964:	4b6c      	ldr	r3, [pc, #432]	; (8001b18 <main+0x18f8>)
 8001966:	70da      	strb	r2, [r3, #3]
				last_port_state &= ~ (1 << 5);       // Poslednee sostoyanie ravno 0
 8001968:	4b6a      	ldr	r3, [pc, #424]	; (8001b14 <main+0x18f4>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	2220      	movs	r2, #32
 800196e:	4393      	bics	r3, r2
 8001970:	b29a      	uxth	r2, r3
 8001972:	4b68      	ldr	r3, [pc, #416]	; (8001b14 <main+0x18f4>)
 8001974:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;	      // Razreshaem peredachy
 8001976:	4b69      	ldr	r3, [pc, #420]	; (8001b1c <main+0x18fc>)
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]
			}
			/* ----------------------------------------------------------------------------------------------------------------------------*/

			/* Otpravka massiva pri izmenenii v signale -----------------------------------------------------------------------------------*/
			if (last_sig_p_6[0] != uart_tx[25])
 800197c:	4b68      	ldr	r3, [pc, #416]	; (8001b20 <main+0x1900>)
 800197e:	781a      	ldrb	r2, [r3, #0]
 8001980:	4b65      	ldr	r3, [pc, #404]	; (8001b18 <main+0x18f8>)
 8001982:	7e5b      	ldrb	r3, [r3, #25]
 8001984:	429a      	cmp	r2, r3
 8001986:	d006      	beq.n	8001996 <main+0x1776>
			{
				last_sig_p_6[0] = uart_tx[25];
 8001988:	4b63      	ldr	r3, [pc, #396]	; (8001b18 <main+0x18f8>)
 800198a:	7e5a      	ldrb	r2, [r3, #25]
 800198c:	4b64      	ldr	r3, [pc, #400]	; (8001b20 <main+0x1900>)
 800198e:	701a      	strb	r2, [r3, #0]
				uart_tx_on = 1;
 8001990:	4b62      	ldr	r3, [pc, #392]	; (8001b1c <main+0x18fc>)
 8001992:	2201      	movs	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_6[1] != uart_tx[26])
 8001996:	4b62      	ldr	r3, [pc, #392]	; (8001b20 <main+0x1900>)
 8001998:	785a      	ldrb	r2, [r3, #1]
 800199a:	4b5f      	ldr	r3, [pc, #380]	; (8001b18 <main+0x18f8>)
 800199c:	7e9b      	ldrb	r3, [r3, #26]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d006      	beq.n	80019b0 <main+0x1790>
			{
				last_sig_p_6[1] = uart_tx[26];
 80019a2:	4b5d      	ldr	r3, [pc, #372]	; (8001b18 <main+0x18f8>)
 80019a4:	7e9a      	ldrb	r2, [r3, #26]
 80019a6:	4b5e      	ldr	r3, [pc, #376]	; (8001b20 <main+0x1900>)
 80019a8:	705a      	strb	r2, [r3, #1]
				uart_tx_on = 1;
 80019aa:	4b5c      	ldr	r3, [pc, #368]	; (8001b1c <main+0x18fc>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_6[2] != uart_tx[27])
 80019b0:	4b5b      	ldr	r3, [pc, #364]	; (8001b20 <main+0x1900>)
 80019b2:	789a      	ldrb	r2, [r3, #2]
 80019b4:	4b58      	ldr	r3, [pc, #352]	; (8001b18 <main+0x18f8>)
 80019b6:	7edb      	ldrb	r3, [r3, #27]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d006      	beq.n	80019ca <main+0x17aa>
			{
				last_sig_p_6[2] = uart_tx[27];
 80019bc:	4b56      	ldr	r3, [pc, #344]	; (8001b18 <main+0x18f8>)
 80019be:	7eda      	ldrb	r2, [r3, #27]
 80019c0:	4b57      	ldr	r3, [pc, #348]	; (8001b20 <main+0x1900>)
 80019c2:	709a      	strb	r2, [r3, #2]
				uart_tx_on = 1;
 80019c4:	4b55      	ldr	r3, [pc, #340]	; (8001b1c <main+0x18fc>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_6[3] != uart_tx[28])
 80019ca:	4b55      	ldr	r3, [pc, #340]	; (8001b20 <main+0x1900>)
 80019cc:	78da      	ldrb	r2, [r3, #3]
 80019ce:	4b52      	ldr	r3, [pc, #328]	; (8001b18 <main+0x18f8>)
 80019d0:	7f1b      	ldrb	r3, [r3, #28]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d006      	beq.n	80019e4 <main+0x17c4>
			{
				last_sig_p_6[3] = uart_tx[28];
 80019d6:	4b50      	ldr	r3, [pc, #320]	; (8001b18 <main+0x18f8>)
 80019d8:	7f1a      	ldrb	r2, [r3, #28]
 80019da:	4b51      	ldr	r3, [pc, #324]	; (8001b20 <main+0x1900>)
 80019dc:	70da      	strb	r2, [r3, #3]
				uart_tx_on = 1;
 80019de:	4b4f      	ldr	r3, [pc, #316]	; (8001b1c <main+0x18fc>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]
			}


		}

		if(spi_state == 2 && spi_port == 7 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 80019e4:	4b42      	ldr	r3, [pc, #264]	; (8001af0 <main+0x18d0>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d147      	bne.n	8001a7c <main+0x185c>
 80019ec:	4b41      	ldr	r3, [pc, #260]	; (8001af4 <main+0x18d4>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b07      	cmp	r3, #7
 80019f2:	d143      	bne.n	8001a7c <main+0x185c>
 80019f4:	4b40      	ldr	r3, [pc, #256]	; (8001af8 <main+0x18d8>)
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4013      	ands	r3, r2
 80019fe:	d03d      	beq.n	8001a7c <main+0x185c>
 8001a00:	4b3d      	ldr	r3, [pc, #244]	; (8001af8 <main+0x18d8>)
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d037      	beq.n	8001a7c <main+0x185c>
 8001a0c:	4b3a      	ldr	r3, [pc, #232]	; (8001af8 <main+0x18d8>)
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	2280      	movs	r2, #128	; 0x80
 8001a12:	4013      	ands	r3, r2
 8001a14:	d032      	beq.n	8001a7c <main+0x185c>
 8001a16:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <main+0x18d8>)
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	2240      	movs	r2, #64	; 0x40
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d02d      	beq.n	8001a7c <main+0x185c>
 8001a20:	4b36      	ldr	r3, [pc, #216]	; (8001afc <main+0x18dc>)
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	021b      	lsls	r3, r3, #8
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d027      	beq.n	8001a7c <main+0x185c>
 8001a2c:	4b33      	ldr	r3, [pc, #204]	; (8001afc <main+0x18dc>)
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	01db      	lsls	r3, r3, #7
 8001a34:	4013      	ands	r3, r2
 8001a36:	d021      	beq.n	8001a7c <main+0x185c>
 8001a38:	4b30      	ldr	r3, [pc, #192]	; (8001afc <main+0x18dc>)
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	019b      	lsls	r3, r3, #6
 8001a40:	4013      	ands	r3, r2
 8001a42:	d01b      	beq.n	8001a7c <main+0x185c>
 8001a44:	4b2d      	ldr	r3, [pc, #180]	; (8001afc <main+0x18dc>)
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	015b      	lsls	r3, r3, #5
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d015      	beq.n	8001a7c <main+0x185c>
 8001a50:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <main+0x18dc>)
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	2204      	movs	r2, #4
 8001a56:	4013      	ands	r3, r2
 8001a58:	d010      	beq.n	8001a7c <main+0x185c>
 8001a5a:	4b28      	ldr	r3, [pc, #160]	; (8001afc <main+0x18dc>)
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	4013      	ands	r3, r2
 8001a62:	d00b      	beq.n	8001a7c <main+0x185c>
 8001a64:	4b25      	ldr	r3, [pc, #148]	; (8001afc <main+0x18dc>)
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d006      	beq.n	8001a7c <main+0x185c>
 8001a6e:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <main+0x18d8>)
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	2220      	movs	r2, #32
 8001a74:	4013      	ands	r3, r2
 8001a76:	d001      	beq.n	8001a7c <main+0x185c>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <main+0x185e>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d057      	beq.n	8001b32 <main+0x1912>
		{
			spi_rx_ctrl_summ = spi_rx[0] + spi_rx[1] + spi_rx[2] + spi_rx[3] + spi_rx[4];
 8001a82:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <main+0x18e8>)
 8001a84:	781a      	ldrb	r2, [r3, #0]
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <main+0x18e8>)
 8001a88:	785b      	ldrb	r3, [r3, #1]
 8001a8a:	18d3      	adds	r3, r2, r3
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <main+0x18e8>)
 8001a90:	789b      	ldrb	r3, [r3, #2]
 8001a92:	18d3      	adds	r3, r2, r3
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <main+0x18e8>)
 8001a98:	78db      	ldrb	r3, [r3, #3]
 8001a9a:	18d3      	adds	r3, r2, r3
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <main+0x18e8>)
 8001aa0:	791b      	ldrb	r3, [r3, #4]
 8001aa2:	18d3      	adds	r3, r2, r3
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <main+0x1904>)
 8001aa8:	701a      	strb	r2, [r3, #0]

			if(spi_rx_ctrl_summ == spi_rx[5])
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <main+0x18e8>)
 8001aac:	795a      	ldrb	r2, [r3, #5]
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <main+0x1904>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d13a      	bne.n	8001b2c <main+0x190c>
			{
				spi_state = 0;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <main+0x18d0>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
				spi_port = 8;
 8001abc:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <main+0x18d4>)
 8001abe:	2208      	movs	r2, #8
 8001ac0:	701a      	strb	r2, [r3, #0]

				board_7_type = spi_rx[4];
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <main+0x18e8>)
 8001ac4:	791a      	ldrb	r2, [r3, #4]
 8001ac6:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <main+0x1908>)
 8001ac8:	701a      	strb	r2, [r3, #0]
				uart_tx [29]  = spi_rx[0];
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <main+0x18e8>)
 8001acc:	781a      	ldrb	r2, [r3, #0]
 8001ace:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <main+0x18f8>)
 8001ad0:	775a      	strb	r2, [r3, #29]
				uart_tx [30]  = spi_rx[1];
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <main+0x18e8>)
 8001ad4:	785a      	ldrb	r2, [r3, #1]
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <main+0x18f8>)
 8001ad8:	779a      	strb	r2, [r3, #30]
				uart_tx [31]  = spi_rx[2];
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <main+0x18e8>)
 8001adc:	789a      	ldrb	r2, [r3, #2]
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <main+0x18f8>)
 8001ae0:	77da      	strb	r2, [r3, #31]
				uart_tx [32]  = spi_rx[3];
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <main+0x18e8>)
 8001ae4:	78d9      	ldrb	r1, [r3, #3]
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <main+0x18f8>)
 8001ae8:	2220      	movs	r2, #32
 8001aea:	5499      	strb	r1, [r3, r2]
 8001aec:	e021      	b.n	8001b32 <main+0x1912>
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	20000208 	.word	0x20000208
 8001af4:	20000000 	.word	0x20000000
 8001af8:	48000800 	.word	0x48000800
 8001afc:	48000400 	.word	0x48000400
 8001b00:	200002e0 	.word	0x200002e0
 8001b04:	20000200 	.word	0x20000200
 8001b08:	200001f8 	.word	0x200001f8
 8001b0c:	2000005c 	.word	0x2000005c
 8001b10:	2000020e 	.word	0x2000020e
 8001b14:	20000350 	.word	0x20000350
 8001b18:	20000004 	.word	0x20000004
 8001b1c:	2000003b 	.word	0x2000003b
 8001b20:	20000368 	.word	0x20000368
 8001b24:	20000206 	.word	0x20000206
 8001b28:	2000020f 	.word	0x2000020f
			}
			else
			{
				spi_state = 0;
 8001b2c:	4bbd      	ldr	r3, [pc, #756]	; (8001e24 <main+0x1c04>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
		/* ------------------------------------------------------------------------------------------------------------------------------*/


		/* *****PORT_8*****--------------------------------------------------------------------------------------------------------------*/
		/* Esli sostoyanie SPI ravno 0, to proveryaem, chto proishodit opros nyznogo porta, i vse nogi spi podnyaty----------------------*/
		if(spi_state == 0 && spi_port == 8 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 8001b32:	4bbc      	ldr	r3, [pc, #752]	; (8001e24 <main+0x1c04>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d147      	bne.n	8001bca <main+0x19aa>
 8001b3a:	4bbb      	ldr	r3, [pc, #748]	; (8001e28 <main+0x1c08>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d143      	bne.n	8001bca <main+0x19aa>
 8001b42:	4bba      	ldr	r3, [pc, #744]	; (8001e2c <main+0x1c0c>)
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d03d      	beq.n	8001bca <main+0x19aa>
 8001b4e:	4bb7      	ldr	r3, [pc, #732]	; (8001e2c <main+0x1c0c>)
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4013      	ands	r3, r2
 8001b58:	d037      	beq.n	8001bca <main+0x19aa>
 8001b5a:	4bb4      	ldr	r3, [pc, #720]	; (8001e2c <main+0x1c0c>)
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	2280      	movs	r2, #128	; 0x80
 8001b60:	4013      	ands	r3, r2
 8001b62:	d032      	beq.n	8001bca <main+0x19aa>
 8001b64:	4bb1      	ldr	r3, [pc, #708]	; (8001e2c <main+0x1c0c>)
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	2240      	movs	r2, #64	; 0x40
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d02d      	beq.n	8001bca <main+0x19aa>
 8001b6e:	4bb0      	ldr	r3, [pc, #704]	; (8001e30 <main+0x1c10>)
 8001b70:	691a      	ldr	r2, [r3, #16]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	4013      	ands	r3, r2
 8001b78:	d027      	beq.n	8001bca <main+0x19aa>
 8001b7a:	4bad      	ldr	r3, [pc, #692]	; (8001e30 <main+0x1c10>)
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	01db      	lsls	r3, r3, #7
 8001b82:	4013      	ands	r3, r2
 8001b84:	d021      	beq.n	8001bca <main+0x19aa>
 8001b86:	4baa      	ldr	r3, [pc, #680]	; (8001e30 <main+0x1c10>)
 8001b88:	691a      	ldr	r2, [r3, #16]
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	019b      	lsls	r3, r3, #6
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d01b      	beq.n	8001bca <main+0x19aa>
 8001b92:	4ba7      	ldr	r3, [pc, #668]	; (8001e30 <main+0x1c10>)
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	015b      	lsls	r3, r3, #5
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d015      	beq.n	8001bca <main+0x19aa>
 8001b9e:	4ba4      	ldr	r3, [pc, #656]	; (8001e30 <main+0x1c10>)
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d010      	beq.n	8001bca <main+0x19aa>
 8001ba8:	4ba1      	ldr	r3, [pc, #644]	; (8001e30 <main+0x1c10>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	2202      	movs	r2, #2
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d00b      	beq.n	8001bca <main+0x19aa>
 8001bb2:	4b9f      	ldr	r3, [pc, #636]	; (8001e30 <main+0x1c10>)
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d006      	beq.n	8001bca <main+0x19aa>
 8001bbc:	4b9b      	ldr	r3, [pc, #620]	; (8001e2c <main+0x1c0c>)
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d001      	beq.n	8001bca <main+0x19aa>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <main+0x19ac>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d100      	bne.n	8001bd2 <main+0x19b2>
 8001bd0:	e09f      	b.n	8001d12 <main+0x1af2>
		{
			spi_state = 1;
 8001bd2:	4b94      	ldr	r3, [pc, #592]	; (8001e24 <main+0x1c04>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]

			/* Prisvaivaem massivy otpravlyaemomy po SPI znacheniya signalov, prinyatyh po UART--------------------------------------------*/
			spi_tx[0] = uart_rx_slice[31];
 8001bd8:	4b96      	ldr	r3, [pc, #600]	; (8001e34 <main+0x1c14>)
 8001bda:	7fda      	ldrb	r2, [r3, #31]
 8001bdc:	4b96      	ldr	r3, [pc, #600]	; (8001e38 <main+0x1c18>)
 8001bde:	701a      	strb	r2, [r3, #0]
			spi_tx[1] = uart_rx_slice[32];
 8001be0:	4b94      	ldr	r3, [pc, #592]	; (8001e34 <main+0x1c14>)
 8001be2:	2220      	movs	r2, #32
 8001be4:	5c9a      	ldrb	r2, [r3, r2]
 8001be6:	4b94      	ldr	r3, [pc, #592]	; (8001e38 <main+0x1c18>)
 8001be8:	705a      	strb	r2, [r3, #1]
			spi_tx[2] = uart_rx_slice[33];
 8001bea:	4b92      	ldr	r3, [pc, #584]	; (8001e34 <main+0x1c14>)
 8001bec:	2221      	movs	r2, #33	; 0x21
 8001bee:	5c9a      	ldrb	r2, [r3, r2]
 8001bf0:	4b91      	ldr	r3, [pc, #580]	; (8001e38 <main+0x1c18>)
 8001bf2:	709a      	strb	r2, [r3, #2]
			spi_tx[3] = uart_rx_slice[34];
 8001bf4:	4b8f      	ldr	r3, [pc, #572]	; (8001e34 <main+0x1c14>)
 8001bf6:	2222      	movs	r2, #34	; 0x22
 8001bf8:	5c9a      	ldrb	r2, [r3, r2]
 8001bfa:	4b8f      	ldr	r3, [pc, #572]	; (8001e38 <main+0x1c18>)
 8001bfc:	70da      	strb	r2, [r3, #3]

			/* Schitayem kontrolnyu summy, i zapisyvaem v poslednii element massiva, otpravlyaemogo po SPI---------------------------------*/
			spi_tx[5] = spi_tx[0] + spi_tx[1] + spi_tx[2] + spi_tx[3] + spi_tx[4];
 8001bfe:	4b8e      	ldr	r3, [pc, #568]	; (8001e38 <main+0x1c18>)
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	4b8d      	ldr	r3, [pc, #564]	; (8001e38 <main+0x1c18>)
 8001c04:	785b      	ldrb	r3, [r3, #1]
 8001c06:	18d3      	adds	r3, r2, r3
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b8b      	ldr	r3, [pc, #556]	; (8001e38 <main+0x1c18>)
 8001c0c:	789b      	ldrb	r3, [r3, #2]
 8001c0e:	18d3      	adds	r3, r2, r3
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4b89      	ldr	r3, [pc, #548]	; (8001e38 <main+0x1c18>)
 8001c14:	78db      	ldrb	r3, [r3, #3]
 8001c16:	18d3      	adds	r3, r2, r3
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4b87      	ldr	r3, [pc, #540]	; (8001e38 <main+0x1c18>)
 8001c1c:	791b      	ldrb	r3, [r3, #4]
 8001c1e:	18d3      	adds	r3, r2, r3
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b85      	ldr	r3, [pc, #532]	; (8001e38 <main+0x1c18>)
 8001c24:	715a      	strb	r2, [r3, #5]

			/* Opyskaem nogy CS, i proizvodim priemo-peredachu po SPI----------------------------------------------------------------------*/
			GPIOB->BRR = (1<<12);
 8001c26:	4b82      	ldr	r3, [pc, #520]	; (8001e30 <main+0x1c10>)
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	0152      	lsls	r2, r2, #5
 8001c2c:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*)spi_tx, (uint8_t*)spi_rx, 0x06);
 8001c2e:	4a83      	ldr	r2, [pc, #524]	; (8001e3c <main+0x1c1c>)
 8001c30:	4981      	ldr	r1, [pc, #516]	; (8001e38 <main+0x1c18>)
 8001c32:	4883      	ldr	r0, [pc, #524]	; (8001e40 <main+0x1c20>)
 8001c34:	2306      	movs	r3, #6
 8001c36:	f002 ff91 	bl	8004b5c <HAL_SPI_TransmitReceive_IT>

			/* Platy vstavili v port ------------------------------------------------------------------------------------------------------*/
			if(board_7_type != 0x00 && (last_port_state & (1<<6)) == 0x00)
 8001c3a:	4b82      	ldr	r3, [pc, #520]	; (8001e44 <main+0x1c24>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d016      	beq.n	8001c70 <main+0x1a50>
 8001c42:	4b81      	ldr	r3, [pc, #516]	; (8001e48 <main+0x1c28>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	001a      	movs	r2, r3
 8001c48:	2340      	movs	r3, #64	; 0x40
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d110      	bne.n	8001c70 <main+0x1a50>
			{
				uart_tx   [0x03] &= ~ (1 << 6); // Zapis 0 v bity sostoyaniya porta
 8001c4e:	4b7f      	ldr	r3, [pc, #508]	; (8001e4c <main+0x1c2c>)
 8001c50:	78db      	ldrb	r3, [r3, #3]
 8001c52:	2240      	movs	r2, #64	; 0x40
 8001c54:	4393      	bics	r3, r2
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	4b7c      	ldr	r3, [pc, #496]	; (8001e4c <main+0x1c2c>)
 8001c5a:	70da      	strb	r2, [r3, #3]
				last_port_state |= (1 << 6);  	      // Poslednee sostoyanie ravno 1
 8001c5c:	4b7a      	ldr	r3, [pc, #488]	; (8001e48 <main+0x1c28>)
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	2240      	movs	r2, #64	; 0x40
 8001c62:	4313      	orrs	r3, r2
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	4b78      	ldr	r3, [pc, #480]	; (8001e48 <main+0x1c28>)
 8001c68:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;		      // Razreshaem peredachy
 8001c6a:	4b79      	ldr	r3, [pc, #484]	; (8001e50 <main+0x1c30>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]
			}
			/* ----------------------------------------------------------------------------------------------------------------------------*/


			/* Platy dostali iz porta -----------------------------------------------------------------------------------------------------*/
			if(board_7_type == 0x00 && (last_port_state & (1<<6)) != 0x00)
 8001c70:	4b74      	ldr	r3, [pc, #464]	; (8001e44 <main+0x1c24>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d116      	bne.n	8001ca6 <main+0x1a86>
 8001c78:	4b73      	ldr	r3, [pc, #460]	; (8001e48 <main+0x1c28>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	2340      	movs	r3, #64	; 0x40
 8001c80:	4013      	ands	r3, r2
 8001c82:	d010      	beq.n	8001ca6 <main+0x1a86>
			{
				uart_tx   [0x03] |= (1 << 6); // Zapis 1 v bity sostoyaniya porta
 8001c84:	4b71      	ldr	r3, [pc, #452]	; (8001e4c <main+0x1c2c>)
 8001c86:	78db      	ldrb	r3, [r3, #3]
 8001c88:	2240      	movs	r2, #64	; 0x40
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4b6f      	ldr	r3, [pc, #444]	; (8001e4c <main+0x1c2c>)
 8001c90:	70da      	strb	r2, [r3, #3]
				last_port_state &= ~ (1 << 6);       // Poslednee sostoyanie ravno 0
 8001c92:	4b6d      	ldr	r3, [pc, #436]	; (8001e48 <main+0x1c28>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	2240      	movs	r2, #64	; 0x40
 8001c98:	4393      	bics	r3, r2
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	4b6a      	ldr	r3, [pc, #424]	; (8001e48 <main+0x1c28>)
 8001c9e:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;	      // Razreshaem peredachy
 8001ca0:	4b6b      	ldr	r3, [pc, #428]	; (8001e50 <main+0x1c30>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
			}
			/* ------------------------------------------------------------------------------------------------------------------------------*/

			/* Otpravka massiva pri izmenenii v signale -------------------------------------------------------------------------------------*/
			if (last_sig_p_7[0] != uart_tx[29])
 8001ca6:	4b6b      	ldr	r3, [pc, #428]	; (8001e54 <main+0x1c34>)
 8001ca8:	781a      	ldrb	r2, [r3, #0]
 8001caa:	4b68      	ldr	r3, [pc, #416]	; (8001e4c <main+0x1c2c>)
 8001cac:	7f5b      	ldrb	r3, [r3, #29]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d006      	beq.n	8001cc0 <main+0x1aa0>
			{
				last_sig_p_7[0] = uart_tx[29];
 8001cb2:	4b66      	ldr	r3, [pc, #408]	; (8001e4c <main+0x1c2c>)
 8001cb4:	7f5a      	ldrb	r2, [r3, #29]
 8001cb6:	4b67      	ldr	r3, [pc, #412]	; (8001e54 <main+0x1c34>)
 8001cb8:	701a      	strb	r2, [r3, #0]
				uart_tx_on = 1;
 8001cba:	4b65      	ldr	r3, [pc, #404]	; (8001e50 <main+0x1c30>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_7[1] != uart_tx[30])
 8001cc0:	4b64      	ldr	r3, [pc, #400]	; (8001e54 <main+0x1c34>)
 8001cc2:	785a      	ldrb	r2, [r3, #1]
 8001cc4:	4b61      	ldr	r3, [pc, #388]	; (8001e4c <main+0x1c2c>)
 8001cc6:	7f9b      	ldrb	r3, [r3, #30]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d006      	beq.n	8001cda <main+0x1aba>
			{
				last_sig_p_7[1] = uart_tx[30];
 8001ccc:	4b5f      	ldr	r3, [pc, #380]	; (8001e4c <main+0x1c2c>)
 8001cce:	7f9a      	ldrb	r2, [r3, #30]
 8001cd0:	4b60      	ldr	r3, [pc, #384]	; (8001e54 <main+0x1c34>)
 8001cd2:	705a      	strb	r2, [r3, #1]
				uart_tx_on = 1;
 8001cd4:	4b5e      	ldr	r3, [pc, #376]	; (8001e50 <main+0x1c30>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_7[2] != uart_tx[31])
 8001cda:	4b5e      	ldr	r3, [pc, #376]	; (8001e54 <main+0x1c34>)
 8001cdc:	789a      	ldrb	r2, [r3, #2]
 8001cde:	4b5b      	ldr	r3, [pc, #364]	; (8001e4c <main+0x1c2c>)
 8001ce0:	7fdb      	ldrb	r3, [r3, #31]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d006      	beq.n	8001cf4 <main+0x1ad4>
			{
				last_sig_p_7[2] = uart_tx[31];
 8001ce6:	4b59      	ldr	r3, [pc, #356]	; (8001e4c <main+0x1c2c>)
 8001ce8:	7fda      	ldrb	r2, [r3, #31]
 8001cea:	4b5a      	ldr	r3, [pc, #360]	; (8001e54 <main+0x1c34>)
 8001cec:	709a      	strb	r2, [r3, #2]
				uart_tx_on = 1;
 8001cee:	4b58      	ldr	r3, [pc, #352]	; (8001e50 <main+0x1c30>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_7[3] != uart_tx[32])
 8001cf4:	4b57      	ldr	r3, [pc, #348]	; (8001e54 <main+0x1c34>)
 8001cf6:	78da      	ldrb	r2, [r3, #3]
 8001cf8:	4b54      	ldr	r3, [pc, #336]	; (8001e4c <main+0x1c2c>)
 8001cfa:	2120      	movs	r1, #32
 8001cfc:	5c5b      	ldrb	r3, [r3, r1]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d007      	beq.n	8001d12 <main+0x1af2>
			{
				last_sig_p_7[3] = uart_tx[32];
 8001d02:	4b52      	ldr	r3, [pc, #328]	; (8001e4c <main+0x1c2c>)
 8001d04:	2220      	movs	r2, #32
 8001d06:	5c9a      	ldrb	r2, [r3, r2]
 8001d08:	4b52      	ldr	r3, [pc, #328]	; (8001e54 <main+0x1c34>)
 8001d0a:	70da      	strb	r2, [r3, #3]
				uart_tx_on = 1;
 8001d0c:	4b50      	ldr	r3, [pc, #320]	; (8001e50 <main+0x1c30>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
			}


		}

		if(spi_state == 2 && spi_port == 8 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 8001d12:	4b44      	ldr	r3, [pc, #272]	; (8001e24 <main+0x1c04>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d147      	bne.n	8001daa <main+0x1b8a>
 8001d1a:	4b43      	ldr	r3, [pc, #268]	; (8001e28 <main+0x1c08>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d143      	bne.n	8001daa <main+0x1b8a>
 8001d22:	4b42      	ldr	r3, [pc, #264]	; (8001e2c <main+0x1c0c>)
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d03d      	beq.n	8001daa <main+0x1b8a>
 8001d2e:	4b3f      	ldr	r3, [pc, #252]	; (8001e2c <main+0x1c0c>)
 8001d30:	691a      	ldr	r2, [r3, #16]
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4013      	ands	r3, r2
 8001d38:	d037      	beq.n	8001daa <main+0x1b8a>
 8001d3a:	4b3c      	ldr	r3, [pc, #240]	; (8001e2c <main+0x1c0c>)
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	2280      	movs	r2, #128	; 0x80
 8001d40:	4013      	ands	r3, r2
 8001d42:	d032      	beq.n	8001daa <main+0x1b8a>
 8001d44:	4b39      	ldr	r3, [pc, #228]	; (8001e2c <main+0x1c0c>)
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	2240      	movs	r2, #64	; 0x40
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d02d      	beq.n	8001daa <main+0x1b8a>
 8001d4e:	4b38      	ldr	r3, [pc, #224]	; (8001e30 <main+0x1c10>)
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	4013      	ands	r3, r2
 8001d58:	d027      	beq.n	8001daa <main+0x1b8a>
 8001d5a:	4b35      	ldr	r3, [pc, #212]	; (8001e30 <main+0x1c10>)
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	01db      	lsls	r3, r3, #7
 8001d62:	4013      	ands	r3, r2
 8001d64:	d021      	beq.n	8001daa <main+0x1b8a>
 8001d66:	4b32      	ldr	r3, [pc, #200]	; (8001e30 <main+0x1c10>)
 8001d68:	691a      	ldr	r2, [r3, #16]
 8001d6a:	2380      	movs	r3, #128	; 0x80
 8001d6c:	019b      	lsls	r3, r3, #6
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d01b      	beq.n	8001daa <main+0x1b8a>
 8001d72:	4b2f      	ldr	r3, [pc, #188]	; (8001e30 <main+0x1c10>)
 8001d74:	691a      	ldr	r2, [r3, #16]
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	015b      	lsls	r3, r3, #5
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d015      	beq.n	8001daa <main+0x1b8a>
 8001d7e:	4b2c      	ldr	r3, [pc, #176]	; (8001e30 <main+0x1c10>)
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	2204      	movs	r2, #4
 8001d84:	4013      	ands	r3, r2
 8001d86:	d010      	beq.n	8001daa <main+0x1b8a>
 8001d88:	4b29      	ldr	r3, [pc, #164]	; (8001e30 <main+0x1c10>)
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d00b      	beq.n	8001daa <main+0x1b8a>
 8001d92:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <main+0x1c10>)
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	2201      	movs	r2, #1
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d006      	beq.n	8001daa <main+0x1b8a>
 8001d9c:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <main+0x1c0c>)
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	2220      	movs	r2, #32
 8001da2:	4013      	ands	r3, r2
 8001da4:	d001      	beq.n	8001daa <main+0x1b8a>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <main+0x1b8c>
 8001daa:	2300      	movs	r3, #0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d05a      	beq.n	8001e66 <main+0x1c46>
		{
			spi_rx_ctrl_summ = spi_rx[0] + spi_rx[1] + spi_rx[2] + spi_rx[3] + spi_rx[4];
 8001db0:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <main+0x1c1c>)
 8001db2:	781a      	ldrb	r2, [r3, #0]
 8001db4:	4b21      	ldr	r3, [pc, #132]	; (8001e3c <main+0x1c1c>)
 8001db6:	785b      	ldrb	r3, [r3, #1]
 8001db8:	18d3      	adds	r3, r2, r3
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <main+0x1c1c>)
 8001dbe:	789b      	ldrb	r3, [r3, #2]
 8001dc0:	18d3      	adds	r3, r2, r3
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <main+0x1c1c>)
 8001dc6:	78db      	ldrb	r3, [r3, #3]
 8001dc8:	18d3      	adds	r3, r2, r3
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <main+0x1c1c>)
 8001dce:	791b      	ldrb	r3, [r3, #4]
 8001dd0:	18d3      	adds	r3, r2, r3
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <main+0x1c38>)
 8001dd6:	701a      	strb	r2, [r3, #0]

			if(spi_rx_ctrl_summ == spi_rx[5])
 8001dd8:	4b18      	ldr	r3, [pc, #96]	; (8001e3c <main+0x1c1c>)
 8001dda:	795a      	ldrb	r2, [r3, #5]
 8001ddc:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <main+0x1c38>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d13d      	bne.n	8001e60 <main+0x1c40>
			{
				spi_state = 0;
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <main+0x1c04>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
				spi_port = 9;
 8001dea:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <main+0x1c08>)
 8001dec:	2209      	movs	r2, #9
 8001dee:	701a      	strb	r2, [r3, #0]

				board_8_type = spi_rx[4];
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <main+0x1c1c>)
 8001df2:	791a      	ldrb	r2, [r3, #4]
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <main+0x1c3c>)
 8001df6:	701a      	strb	r2, [r3, #0]
				uart_tx [33]  = spi_rx[0];
 8001df8:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <main+0x1c1c>)
 8001dfa:	7819      	ldrb	r1, [r3, #0]
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <main+0x1c2c>)
 8001dfe:	2221      	movs	r2, #33	; 0x21
 8001e00:	5499      	strb	r1, [r3, r2]
				uart_tx [34]  = spi_rx[1];
 8001e02:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <main+0x1c1c>)
 8001e04:	7859      	ldrb	r1, [r3, #1]
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <main+0x1c2c>)
 8001e08:	2222      	movs	r2, #34	; 0x22
 8001e0a:	5499      	strb	r1, [r3, r2]
				uart_tx [35]  = spi_rx[2];
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <main+0x1c1c>)
 8001e0e:	7899      	ldrb	r1, [r3, #2]
 8001e10:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <main+0x1c2c>)
 8001e12:	2223      	movs	r2, #35	; 0x23
 8001e14:	5499      	strb	r1, [r3, r2]
				uart_tx [36]  = spi_rx[3];
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <main+0x1c1c>)
 8001e18:	78d9      	ldrb	r1, [r3, #3]
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <main+0x1c2c>)
 8001e1c:	2224      	movs	r2, #36	; 0x24
 8001e1e:	5499      	strb	r1, [r3, r2]
 8001e20:	e021      	b.n	8001e66 <main+0x1c46>
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	20000208 	.word	0x20000208
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	48000800 	.word	0x48000800
 8001e30:	48000400 	.word	0x48000400
 8001e34:	200002e0 	.word	0x200002e0
 8001e38:	20000200 	.word	0x20000200
 8001e3c:	200001f8 	.word	0x200001f8
 8001e40:	2000005c 	.word	0x2000005c
 8001e44:	2000020f 	.word	0x2000020f
 8001e48:	20000350 	.word	0x20000350
 8001e4c:	20000004 	.word	0x20000004
 8001e50:	2000003b 	.word	0x2000003b
 8001e54:	2000036c 	.word	0x2000036c
 8001e58:	20000206 	.word	0x20000206
 8001e5c:	20000210 	.word	0x20000210
			}
			else
			{
				spi_state = 0;
 8001e60:	4bc0      	ldr	r3, [pc, #768]	; (8002164 <main+0x1f44>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
		/* ------------------------------------------------------------------------------------------------------------------------------*/


		/* *****PORT_9*****--------------------------------------------------------------------------------------------------------------*/
		/* Esli sostoyanie SPI ravno 0, to proveryaem, chto proishodit opros nyznogo porta, i vse nogi spi podnyaty----------------------*/
		if(spi_state == 0 && spi_port == 9 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 8001e66:	4bbf      	ldr	r3, [pc, #764]	; (8002164 <main+0x1f44>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d147      	bne.n	8001efe <main+0x1cde>
 8001e6e:	4bbe      	ldr	r3, [pc, #760]	; (8002168 <main+0x1f48>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b09      	cmp	r3, #9
 8001e74:	d143      	bne.n	8001efe <main+0x1cde>
 8001e76:	4bbd      	ldr	r3, [pc, #756]	; (800216c <main+0x1f4c>)
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d03d      	beq.n	8001efe <main+0x1cde>
 8001e82:	4bba      	ldr	r3, [pc, #744]	; (800216c <main+0x1f4c>)
 8001e84:	691a      	ldr	r2, [r3, #16]
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d037      	beq.n	8001efe <main+0x1cde>
 8001e8e:	4bb7      	ldr	r3, [pc, #732]	; (800216c <main+0x1f4c>)
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	2280      	movs	r2, #128	; 0x80
 8001e94:	4013      	ands	r3, r2
 8001e96:	d032      	beq.n	8001efe <main+0x1cde>
 8001e98:	4bb4      	ldr	r3, [pc, #720]	; (800216c <main+0x1f4c>)
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	2240      	movs	r2, #64	; 0x40
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d02d      	beq.n	8001efe <main+0x1cde>
 8001ea2:	4bb3      	ldr	r3, [pc, #716]	; (8002170 <main+0x1f50>)
 8001ea4:	691a      	ldr	r2, [r3, #16]
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d027      	beq.n	8001efe <main+0x1cde>
 8001eae:	4bb0      	ldr	r3, [pc, #704]	; (8002170 <main+0x1f50>)
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	01db      	lsls	r3, r3, #7
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d021      	beq.n	8001efe <main+0x1cde>
 8001eba:	4bad      	ldr	r3, [pc, #692]	; (8002170 <main+0x1f50>)
 8001ebc:	691a      	ldr	r2, [r3, #16]
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	019b      	lsls	r3, r3, #6
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d01b      	beq.n	8001efe <main+0x1cde>
 8001ec6:	4baa      	ldr	r3, [pc, #680]	; (8002170 <main+0x1f50>)
 8001ec8:	691a      	ldr	r2, [r3, #16]
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	015b      	lsls	r3, r3, #5
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d015      	beq.n	8001efe <main+0x1cde>
 8001ed2:	4ba7      	ldr	r3, [pc, #668]	; (8002170 <main+0x1f50>)
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d010      	beq.n	8001efe <main+0x1cde>
 8001edc:	4ba4      	ldr	r3, [pc, #656]	; (8002170 <main+0x1f50>)
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d00b      	beq.n	8001efe <main+0x1cde>
 8001ee6:	4ba2      	ldr	r3, [pc, #648]	; (8002170 <main+0x1f50>)
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2201      	movs	r2, #1
 8001eec:	4013      	ands	r3, r2
 8001eee:	d006      	beq.n	8001efe <main+0x1cde>
 8001ef0:	4b9e      	ldr	r3, [pc, #632]	; (800216c <main+0x1f4c>)
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d001      	beq.n	8001efe <main+0x1cde>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <main+0x1ce0>
 8001efe:	2300      	movs	r3, #0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d100      	bne.n	8001f06 <main+0x1ce6>
 8001f04:	e0a6      	b.n	8002054 <main+0x1e34>
		{
			spi_state = 1;
 8001f06:	4b97      	ldr	r3, [pc, #604]	; (8002164 <main+0x1f44>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]

			/* Prisvaivaem massivy otpravlyaemomy po SPI znacheniya signalov, prinyatyh po UART--------------------------------------------*/
			spi_tx[0] = uart_rx_slice[35];
 8001f0c:	4b99      	ldr	r3, [pc, #612]	; (8002174 <main+0x1f54>)
 8001f0e:	2223      	movs	r2, #35	; 0x23
 8001f10:	5c9a      	ldrb	r2, [r3, r2]
 8001f12:	4b99      	ldr	r3, [pc, #612]	; (8002178 <main+0x1f58>)
 8001f14:	701a      	strb	r2, [r3, #0]
			spi_tx[1] = uart_rx_slice[36];
 8001f16:	4b97      	ldr	r3, [pc, #604]	; (8002174 <main+0x1f54>)
 8001f18:	2224      	movs	r2, #36	; 0x24
 8001f1a:	5c9a      	ldrb	r2, [r3, r2]
 8001f1c:	4b96      	ldr	r3, [pc, #600]	; (8002178 <main+0x1f58>)
 8001f1e:	705a      	strb	r2, [r3, #1]
			spi_tx[2] = uart_rx_slice[37];
 8001f20:	4b94      	ldr	r3, [pc, #592]	; (8002174 <main+0x1f54>)
 8001f22:	2225      	movs	r2, #37	; 0x25
 8001f24:	5c9a      	ldrb	r2, [r3, r2]
 8001f26:	4b94      	ldr	r3, [pc, #592]	; (8002178 <main+0x1f58>)
 8001f28:	709a      	strb	r2, [r3, #2]
			spi_tx[3] = uart_rx_slice[38];
 8001f2a:	4b92      	ldr	r3, [pc, #584]	; (8002174 <main+0x1f54>)
 8001f2c:	2226      	movs	r2, #38	; 0x26
 8001f2e:	5c9a      	ldrb	r2, [r3, r2]
 8001f30:	4b91      	ldr	r3, [pc, #580]	; (8002178 <main+0x1f58>)
 8001f32:	70da      	strb	r2, [r3, #3]

			/* Schitayem kontrolnyu summy, i zapisyvaem v poslednii element massiva, otpravlyaemogo po SPI---------------------------------*/
			spi_tx[5] = spi_tx[0] + spi_tx[1] + spi_tx[2] + spi_tx[3] + spi_tx[4];
 8001f34:	4b90      	ldr	r3, [pc, #576]	; (8002178 <main+0x1f58>)
 8001f36:	781a      	ldrb	r2, [r3, #0]
 8001f38:	4b8f      	ldr	r3, [pc, #572]	; (8002178 <main+0x1f58>)
 8001f3a:	785b      	ldrb	r3, [r3, #1]
 8001f3c:	18d3      	adds	r3, r2, r3
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b8d      	ldr	r3, [pc, #564]	; (8002178 <main+0x1f58>)
 8001f42:	789b      	ldrb	r3, [r3, #2]
 8001f44:	18d3      	adds	r3, r2, r3
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	4b8b      	ldr	r3, [pc, #556]	; (8002178 <main+0x1f58>)
 8001f4a:	78db      	ldrb	r3, [r3, #3]
 8001f4c:	18d3      	adds	r3, r2, r3
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	4b89      	ldr	r3, [pc, #548]	; (8002178 <main+0x1f58>)
 8001f52:	791b      	ldrb	r3, [r3, #4]
 8001f54:	18d3      	adds	r3, r2, r3
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	4b87      	ldr	r3, [pc, #540]	; (8002178 <main+0x1f58>)
 8001f5a:	715a      	strb	r2, [r3, #5]

			/* Opyskaem nogy CS, i proizvodim priemo-peredachu po SPI----------------------------------------------------------------------*/
			GPIOB->BRR = (1<<2);
 8001f5c:	4b84      	ldr	r3, [pc, #528]	; (8002170 <main+0x1f50>)
 8001f5e:	2204      	movs	r2, #4
 8001f60:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*)spi_tx, (uint8_t*)spi_rx, 0x06);
 8001f62:	4a86      	ldr	r2, [pc, #536]	; (800217c <main+0x1f5c>)
 8001f64:	4984      	ldr	r1, [pc, #528]	; (8002178 <main+0x1f58>)
 8001f66:	4886      	ldr	r0, [pc, #536]	; (8002180 <main+0x1f60>)
 8001f68:	2306      	movs	r3, #6
 8001f6a:	f002 fdf7 	bl	8004b5c <HAL_SPI_TransmitReceive_IT>

			/* Platy vstavili v port ------------------------------------------------------------------------------------------------------*/
			if(board_8_type != 0x00 && (last_port_state & (1<<7)) == 0x00)
 8001f6e:	4b85      	ldr	r3, [pc, #532]	; (8002184 <main+0x1f64>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d016      	beq.n	8001fa4 <main+0x1d84>
 8001f76:	4b84      	ldr	r3, [pc, #528]	; (8002188 <main+0x1f68>)
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	001a      	movs	r2, r3
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d110      	bne.n	8001fa4 <main+0x1d84>
			{
				uart_tx   [0x03] &= ~ (1 << 7); // Zapis 0 v bity sostoyaniya porta
 8001f82:	4b82      	ldr	r3, [pc, #520]	; (800218c <main+0x1f6c>)
 8001f84:	78db      	ldrb	r3, [r3, #3]
 8001f86:	227f      	movs	r2, #127	; 0x7f
 8001f88:	4013      	ands	r3, r2
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	4b7f      	ldr	r3, [pc, #508]	; (800218c <main+0x1f6c>)
 8001f8e:	70da      	strb	r2, [r3, #3]
				last_port_state |= (1 << 7);  	      // Poslednee sostoyanie ravno 1
 8001f90:	4b7d      	ldr	r3, [pc, #500]	; (8002188 <main+0x1f68>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	2280      	movs	r2, #128	; 0x80
 8001f96:	4313      	orrs	r3, r2
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	4b7b      	ldr	r3, [pc, #492]	; (8002188 <main+0x1f68>)
 8001f9c:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;		      // Razreshaem peredachy
 8001f9e:	4b7c      	ldr	r3, [pc, #496]	; (8002190 <main+0x1f70>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
			}
			/* ----------------------------------------------------------------------------------------------------------------------------*/


			/* Platy dostali iz porta -----------------------------------------------------------------------------------------------------*/
			if(board_8_type == 0x00 && (last_port_state & (1<<7)) != 0x00)
 8001fa4:	4b77      	ldr	r3, [pc, #476]	; (8002184 <main+0x1f64>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d117      	bne.n	8001fdc <main+0x1dbc>
 8001fac:	4b76      	ldr	r3, [pc, #472]	; (8002188 <main+0x1f68>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	001a      	movs	r2, r3
 8001fb2:	2380      	movs	r3, #128	; 0x80
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d011      	beq.n	8001fdc <main+0x1dbc>
			{
				uart_tx   [0x03] |= (1 << 7); // Zapis 1 v bity sostoyaniya porta
 8001fb8:	4b74      	ldr	r3, [pc, #464]	; (800218c <main+0x1f6c>)
 8001fba:	78db      	ldrb	r3, [r3, #3]
 8001fbc:	2280      	movs	r2, #128	; 0x80
 8001fbe:	4252      	negs	r2, r2
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	4b71      	ldr	r3, [pc, #452]	; (800218c <main+0x1f6c>)
 8001fc6:	70da      	strb	r2, [r3, #3]
				last_port_state &= ~ (1 << 7);       // Poslednee sostoyanie ravno 0
 8001fc8:	4b6f      	ldr	r3, [pc, #444]	; (8002188 <main+0x1f68>)
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	2280      	movs	r2, #128	; 0x80
 8001fce:	4393      	bics	r3, r2
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	4b6d      	ldr	r3, [pc, #436]	; (8002188 <main+0x1f68>)
 8001fd4:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;	      // Razreshaem peredachy
 8001fd6:	4b6e      	ldr	r3, [pc, #440]	; (8002190 <main+0x1f70>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
			}
			/* ----------------------------------------------------------------------------------------------------------------------------*/

			/* Otpravka massiva pri izmenenii v signale -----------------------------------------------------------------------------------*/
			if (last_sig_p_8[0] != uart_tx[33])
 8001fdc:	4b6d      	ldr	r3, [pc, #436]	; (8002194 <main+0x1f74>)
 8001fde:	781a      	ldrb	r2, [r3, #0]
 8001fe0:	4b6a      	ldr	r3, [pc, #424]	; (800218c <main+0x1f6c>)
 8001fe2:	2121      	movs	r1, #33	; 0x21
 8001fe4:	5c5b      	ldrb	r3, [r3, r1]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d007      	beq.n	8001ffa <main+0x1dda>
			{
				last_sig_p_8[0] = uart_tx[33];
 8001fea:	4b68      	ldr	r3, [pc, #416]	; (800218c <main+0x1f6c>)
 8001fec:	2221      	movs	r2, #33	; 0x21
 8001fee:	5c9a      	ldrb	r2, [r3, r2]
 8001ff0:	4b68      	ldr	r3, [pc, #416]	; (8002194 <main+0x1f74>)
 8001ff2:	701a      	strb	r2, [r3, #0]
				uart_tx_on = 1;
 8001ff4:	4b66      	ldr	r3, [pc, #408]	; (8002190 <main+0x1f70>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_8[1] != uart_tx[34])
 8001ffa:	4b66      	ldr	r3, [pc, #408]	; (8002194 <main+0x1f74>)
 8001ffc:	785a      	ldrb	r2, [r3, #1]
 8001ffe:	4b63      	ldr	r3, [pc, #396]	; (800218c <main+0x1f6c>)
 8002000:	2122      	movs	r1, #34	; 0x22
 8002002:	5c5b      	ldrb	r3, [r3, r1]
 8002004:	429a      	cmp	r2, r3
 8002006:	d007      	beq.n	8002018 <main+0x1df8>
			{
				last_sig_p_8[1] = uart_tx[34];
 8002008:	4b60      	ldr	r3, [pc, #384]	; (800218c <main+0x1f6c>)
 800200a:	2222      	movs	r2, #34	; 0x22
 800200c:	5c9a      	ldrb	r2, [r3, r2]
 800200e:	4b61      	ldr	r3, [pc, #388]	; (8002194 <main+0x1f74>)
 8002010:	705a      	strb	r2, [r3, #1]
				uart_tx_on = 1;
 8002012:	4b5f      	ldr	r3, [pc, #380]	; (8002190 <main+0x1f70>)
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_8[2] != uart_tx[35])
 8002018:	4b5e      	ldr	r3, [pc, #376]	; (8002194 <main+0x1f74>)
 800201a:	789a      	ldrb	r2, [r3, #2]
 800201c:	4b5b      	ldr	r3, [pc, #364]	; (800218c <main+0x1f6c>)
 800201e:	2123      	movs	r1, #35	; 0x23
 8002020:	5c5b      	ldrb	r3, [r3, r1]
 8002022:	429a      	cmp	r2, r3
 8002024:	d007      	beq.n	8002036 <main+0x1e16>
			{
				last_sig_p_8[2] = uart_tx[35];
 8002026:	4b59      	ldr	r3, [pc, #356]	; (800218c <main+0x1f6c>)
 8002028:	2223      	movs	r2, #35	; 0x23
 800202a:	5c9a      	ldrb	r2, [r3, r2]
 800202c:	4b59      	ldr	r3, [pc, #356]	; (8002194 <main+0x1f74>)
 800202e:	709a      	strb	r2, [r3, #2]
				uart_tx_on = 1;
 8002030:	4b57      	ldr	r3, [pc, #348]	; (8002190 <main+0x1f70>)
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_8[3] != uart_tx[36])
 8002036:	4b57      	ldr	r3, [pc, #348]	; (8002194 <main+0x1f74>)
 8002038:	78da      	ldrb	r2, [r3, #3]
 800203a:	4b54      	ldr	r3, [pc, #336]	; (800218c <main+0x1f6c>)
 800203c:	2124      	movs	r1, #36	; 0x24
 800203e:	5c5b      	ldrb	r3, [r3, r1]
 8002040:	429a      	cmp	r2, r3
 8002042:	d007      	beq.n	8002054 <main+0x1e34>
			{
				last_sig_p_8[3] = uart_tx[36];
 8002044:	4b51      	ldr	r3, [pc, #324]	; (800218c <main+0x1f6c>)
 8002046:	2224      	movs	r2, #36	; 0x24
 8002048:	5c9a      	ldrb	r2, [r3, r2]
 800204a:	4b52      	ldr	r3, [pc, #328]	; (8002194 <main+0x1f74>)
 800204c:	70da      	strb	r2, [r3, #3]
				uart_tx_on = 1;
 800204e:	4b50      	ldr	r3, [pc, #320]	; (8002190 <main+0x1f70>)
 8002050:	2201      	movs	r2, #1
 8002052:	701a      	strb	r2, [r3, #0]
			}


		}

		if(spi_state == 2 && spi_port == 9 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 8002054:	4b43      	ldr	r3, [pc, #268]	; (8002164 <main+0x1f44>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d147      	bne.n	80020ec <main+0x1ecc>
 800205c:	4b42      	ldr	r3, [pc, #264]	; (8002168 <main+0x1f48>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b09      	cmp	r3, #9
 8002062:	d143      	bne.n	80020ec <main+0x1ecc>
 8002064:	4b41      	ldr	r3, [pc, #260]	; (800216c <main+0x1f4c>)
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4013      	ands	r3, r2
 800206e:	d03d      	beq.n	80020ec <main+0x1ecc>
 8002070:	4b3e      	ldr	r3, [pc, #248]	; (800216c <main+0x1f4c>)
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4013      	ands	r3, r2
 800207a:	d037      	beq.n	80020ec <main+0x1ecc>
 800207c:	4b3b      	ldr	r3, [pc, #236]	; (800216c <main+0x1f4c>)
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	2280      	movs	r2, #128	; 0x80
 8002082:	4013      	ands	r3, r2
 8002084:	d032      	beq.n	80020ec <main+0x1ecc>
 8002086:	4b39      	ldr	r3, [pc, #228]	; (800216c <main+0x1f4c>)
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	2240      	movs	r2, #64	; 0x40
 800208c:	4013      	ands	r3, r2
 800208e:	d02d      	beq.n	80020ec <main+0x1ecc>
 8002090:	4b37      	ldr	r3, [pc, #220]	; (8002170 <main+0x1f50>)
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	4013      	ands	r3, r2
 800209a:	d027      	beq.n	80020ec <main+0x1ecc>
 800209c:	4b34      	ldr	r3, [pc, #208]	; (8002170 <main+0x1f50>)
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	01db      	lsls	r3, r3, #7
 80020a4:	4013      	ands	r3, r2
 80020a6:	d021      	beq.n	80020ec <main+0x1ecc>
 80020a8:	4b31      	ldr	r3, [pc, #196]	; (8002170 <main+0x1f50>)
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	019b      	lsls	r3, r3, #6
 80020b0:	4013      	ands	r3, r2
 80020b2:	d01b      	beq.n	80020ec <main+0x1ecc>
 80020b4:	4b2e      	ldr	r3, [pc, #184]	; (8002170 <main+0x1f50>)
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	015b      	lsls	r3, r3, #5
 80020bc:	4013      	ands	r3, r2
 80020be:	d015      	beq.n	80020ec <main+0x1ecc>
 80020c0:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <main+0x1f50>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	2204      	movs	r2, #4
 80020c6:	4013      	ands	r3, r2
 80020c8:	d010      	beq.n	80020ec <main+0x1ecc>
 80020ca:	4b29      	ldr	r3, [pc, #164]	; (8002170 <main+0x1f50>)
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	2202      	movs	r2, #2
 80020d0:	4013      	ands	r3, r2
 80020d2:	d00b      	beq.n	80020ec <main+0x1ecc>
 80020d4:	4b26      	ldr	r3, [pc, #152]	; (8002170 <main+0x1f50>)
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	2201      	movs	r2, #1
 80020da:	4013      	ands	r3, r2
 80020dc:	d006      	beq.n	80020ec <main+0x1ecc>
 80020de:	4b23      	ldr	r3, [pc, #140]	; (800216c <main+0x1f4c>)
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2220      	movs	r2, #32
 80020e4:	4013      	ands	r3, r2
 80020e6:	d001      	beq.n	80020ec <main+0x1ecc>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <main+0x1ece>
 80020ec:	2300      	movs	r3, #0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d059      	beq.n	80021a6 <main+0x1f86>
		{
			spi_rx_ctrl_summ = spi_rx[0] + spi_rx[1] + spi_rx[2] + spi_rx[3] + spi_rx[4];
 80020f2:	4b22      	ldr	r3, [pc, #136]	; (800217c <main+0x1f5c>)
 80020f4:	781a      	ldrb	r2, [r3, #0]
 80020f6:	4b21      	ldr	r3, [pc, #132]	; (800217c <main+0x1f5c>)
 80020f8:	785b      	ldrb	r3, [r3, #1]
 80020fa:	18d3      	adds	r3, r2, r3
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4b1f      	ldr	r3, [pc, #124]	; (800217c <main+0x1f5c>)
 8002100:	789b      	ldrb	r3, [r3, #2]
 8002102:	18d3      	adds	r3, r2, r3
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4b1d      	ldr	r3, [pc, #116]	; (800217c <main+0x1f5c>)
 8002108:	78db      	ldrb	r3, [r3, #3]
 800210a:	18d3      	adds	r3, r2, r3
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4b1b      	ldr	r3, [pc, #108]	; (800217c <main+0x1f5c>)
 8002110:	791b      	ldrb	r3, [r3, #4]
 8002112:	18d3      	adds	r3, r2, r3
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <main+0x1f78>)
 8002118:	701a      	strb	r2, [r3, #0]

			if(spi_rx_ctrl_summ == spi_rx[5])
 800211a:	4b18      	ldr	r3, [pc, #96]	; (800217c <main+0x1f5c>)
 800211c:	795a      	ldrb	r2, [r3, #5]
 800211e:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <main+0x1f78>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d13c      	bne.n	80021a0 <main+0x1f80>
			{
				spi_state = 0;
 8002126:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <main+0x1f44>)
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
				spi_port = 10;
 800212c:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <main+0x1f48>)
 800212e:	220a      	movs	r2, #10
 8002130:	701a      	strb	r2, [r3, #0]

				board_9_type = spi_rx[4];
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <main+0x1f5c>)
 8002134:	791a      	ldrb	r2, [r3, #4]
 8002136:	4b19      	ldr	r3, [pc, #100]	; (800219c <main+0x1f7c>)
 8002138:	701a      	strb	r2, [r3, #0]
				uart_tx [37]  = spi_rx[0];
 800213a:	4b10      	ldr	r3, [pc, #64]	; (800217c <main+0x1f5c>)
 800213c:	7819      	ldrb	r1, [r3, #0]
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <main+0x1f6c>)
 8002140:	2225      	movs	r2, #37	; 0x25
 8002142:	5499      	strb	r1, [r3, r2]
				uart_tx [38]  = spi_rx[1];
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <main+0x1f5c>)
 8002146:	7859      	ldrb	r1, [r3, #1]
 8002148:	4b10      	ldr	r3, [pc, #64]	; (800218c <main+0x1f6c>)
 800214a:	2226      	movs	r2, #38	; 0x26
 800214c:	5499      	strb	r1, [r3, r2]
				uart_tx [39]  = spi_rx[2];
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <main+0x1f5c>)
 8002150:	7899      	ldrb	r1, [r3, #2]
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <main+0x1f6c>)
 8002154:	2227      	movs	r2, #39	; 0x27
 8002156:	5499      	strb	r1, [r3, r2]
				uart_tx [40]  = spi_rx[3];
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <main+0x1f5c>)
 800215a:	78d9      	ldrb	r1, [r3, #3]
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <main+0x1f6c>)
 800215e:	2228      	movs	r2, #40	; 0x28
 8002160:	5499      	strb	r1, [r3, r2]
 8002162:	e020      	b.n	80021a6 <main+0x1f86>
 8002164:	20000208 	.word	0x20000208
 8002168:	20000000 	.word	0x20000000
 800216c:	48000800 	.word	0x48000800
 8002170:	48000400 	.word	0x48000400
 8002174:	200002e0 	.word	0x200002e0
 8002178:	20000200 	.word	0x20000200
 800217c:	200001f8 	.word	0x200001f8
 8002180:	2000005c 	.word	0x2000005c
 8002184:	20000210 	.word	0x20000210
 8002188:	20000350 	.word	0x20000350
 800218c:	20000004 	.word	0x20000004
 8002190:	2000003b 	.word	0x2000003b
 8002194:	20000370 	.word	0x20000370
 8002198:	20000206 	.word	0x20000206
 800219c:	20000211 	.word	0x20000211
			}
			else
			{
				spi_state = 0;
 80021a0:	4bc1      	ldr	r3, [pc, #772]	; (80024a8 <main+0x2288>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
		/* ------------------------------------------------------------------------------------------------------------------------------*/


		/* *****PORT_10*****-------------------------------------------------------------------------------------------------------------*/
		/* Esli sostoyanie SPI ravno 0, to proveryaem, chto proishodit opros nyznogo porta, i vse nogi spi podnyaty----------------------*/
		if(spi_state == 0 && spi_port == 10 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 80021a6:	4bc0      	ldr	r3, [pc, #768]	; (80024a8 <main+0x2288>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d147      	bne.n	800223e <main+0x201e>
 80021ae:	4bbf      	ldr	r3, [pc, #764]	; (80024ac <main+0x228c>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b0a      	cmp	r3, #10
 80021b4:	d143      	bne.n	800223e <main+0x201e>
 80021b6:	4bbe      	ldr	r3, [pc, #760]	; (80024b0 <main+0x2290>)
 80021b8:	691a      	ldr	r2, [r3, #16]
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4013      	ands	r3, r2
 80021c0:	d03d      	beq.n	800223e <main+0x201e>
 80021c2:	4bbb      	ldr	r3, [pc, #748]	; (80024b0 <main+0x2290>)
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4013      	ands	r3, r2
 80021cc:	d037      	beq.n	800223e <main+0x201e>
 80021ce:	4bb8      	ldr	r3, [pc, #736]	; (80024b0 <main+0x2290>)
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2280      	movs	r2, #128	; 0x80
 80021d4:	4013      	ands	r3, r2
 80021d6:	d032      	beq.n	800223e <main+0x201e>
 80021d8:	4bb5      	ldr	r3, [pc, #724]	; (80024b0 <main+0x2290>)
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	2240      	movs	r2, #64	; 0x40
 80021de:	4013      	ands	r3, r2
 80021e0:	d02d      	beq.n	800223e <main+0x201e>
 80021e2:	4bb4      	ldr	r3, [pc, #720]	; (80024b4 <main+0x2294>)
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	4013      	ands	r3, r2
 80021ec:	d027      	beq.n	800223e <main+0x201e>
 80021ee:	4bb1      	ldr	r3, [pc, #708]	; (80024b4 <main+0x2294>)
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	01db      	lsls	r3, r3, #7
 80021f6:	4013      	ands	r3, r2
 80021f8:	d021      	beq.n	800223e <main+0x201e>
 80021fa:	4bae      	ldr	r3, [pc, #696]	; (80024b4 <main+0x2294>)
 80021fc:	691a      	ldr	r2, [r3, #16]
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	019b      	lsls	r3, r3, #6
 8002202:	4013      	ands	r3, r2
 8002204:	d01b      	beq.n	800223e <main+0x201e>
 8002206:	4bab      	ldr	r3, [pc, #684]	; (80024b4 <main+0x2294>)
 8002208:	691a      	ldr	r2, [r3, #16]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	015b      	lsls	r3, r3, #5
 800220e:	4013      	ands	r3, r2
 8002210:	d015      	beq.n	800223e <main+0x201e>
 8002212:	4ba8      	ldr	r3, [pc, #672]	; (80024b4 <main+0x2294>)
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2204      	movs	r2, #4
 8002218:	4013      	ands	r3, r2
 800221a:	d010      	beq.n	800223e <main+0x201e>
 800221c:	4ba5      	ldr	r3, [pc, #660]	; (80024b4 <main+0x2294>)
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	2202      	movs	r2, #2
 8002222:	4013      	ands	r3, r2
 8002224:	d00b      	beq.n	800223e <main+0x201e>
 8002226:	4ba3      	ldr	r3, [pc, #652]	; (80024b4 <main+0x2294>)
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2201      	movs	r2, #1
 800222c:	4013      	ands	r3, r2
 800222e:	d006      	beq.n	800223e <main+0x201e>
 8002230:	4b9f      	ldr	r3, [pc, #636]	; (80024b0 <main+0x2290>)
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	2220      	movs	r2, #32
 8002236:	4013      	ands	r3, r2
 8002238:	d001      	beq.n	800223e <main+0x201e>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <main+0x2020>
 800223e:	2300      	movs	r3, #0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d100      	bne.n	8002246 <main+0x2026>
 8002244:	e0a8      	b.n	8002398 <main+0x2178>
		{
			spi_state = 1;
 8002246:	4b98      	ldr	r3, [pc, #608]	; (80024a8 <main+0x2288>)
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]

			/* Prisvaivaem massivy otpravlyaemomy po SPI znacheniya signalov, prinyatyh po UART--------------------------------------------*/
			spi_tx[0] = uart_rx_slice[39];
 800224c:	4b9a      	ldr	r3, [pc, #616]	; (80024b8 <main+0x2298>)
 800224e:	2227      	movs	r2, #39	; 0x27
 8002250:	5c9a      	ldrb	r2, [r3, r2]
 8002252:	4b9a      	ldr	r3, [pc, #616]	; (80024bc <main+0x229c>)
 8002254:	701a      	strb	r2, [r3, #0]
			spi_tx[1] = uart_rx_slice[40];
 8002256:	4b98      	ldr	r3, [pc, #608]	; (80024b8 <main+0x2298>)
 8002258:	2228      	movs	r2, #40	; 0x28
 800225a:	5c9a      	ldrb	r2, [r3, r2]
 800225c:	4b97      	ldr	r3, [pc, #604]	; (80024bc <main+0x229c>)
 800225e:	705a      	strb	r2, [r3, #1]
			spi_tx[2] = uart_rx_slice[41];
 8002260:	4b95      	ldr	r3, [pc, #596]	; (80024b8 <main+0x2298>)
 8002262:	2229      	movs	r2, #41	; 0x29
 8002264:	5c9a      	ldrb	r2, [r3, r2]
 8002266:	4b95      	ldr	r3, [pc, #596]	; (80024bc <main+0x229c>)
 8002268:	709a      	strb	r2, [r3, #2]
			spi_tx[3] = uart_rx_slice[42];
 800226a:	4b93      	ldr	r3, [pc, #588]	; (80024b8 <main+0x2298>)
 800226c:	222a      	movs	r2, #42	; 0x2a
 800226e:	5c9a      	ldrb	r2, [r3, r2]
 8002270:	4b92      	ldr	r3, [pc, #584]	; (80024bc <main+0x229c>)
 8002272:	70da      	strb	r2, [r3, #3]

			/* Schitayem kontrolnyu summy, i zapisyvaem v poslednii element massiva, otpravlyaemogo po SPI---------------------------------*/
			spi_tx[5] = spi_tx[0] + spi_tx[1] + spi_tx[2] + spi_tx[3] + spi_tx[4];
 8002274:	4b91      	ldr	r3, [pc, #580]	; (80024bc <main+0x229c>)
 8002276:	781a      	ldrb	r2, [r3, #0]
 8002278:	4b90      	ldr	r3, [pc, #576]	; (80024bc <main+0x229c>)
 800227a:	785b      	ldrb	r3, [r3, #1]
 800227c:	18d3      	adds	r3, r2, r3
 800227e:	b2da      	uxtb	r2, r3
 8002280:	4b8e      	ldr	r3, [pc, #568]	; (80024bc <main+0x229c>)
 8002282:	789b      	ldrb	r3, [r3, #2]
 8002284:	18d3      	adds	r3, r2, r3
 8002286:	b2da      	uxtb	r2, r3
 8002288:	4b8c      	ldr	r3, [pc, #560]	; (80024bc <main+0x229c>)
 800228a:	78db      	ldrb	r3, [r3, #3]
 800228c:	18d3      	adds	r3, r2, r3
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b8a      	ldr	r3, [pc, #552]	; (80024bc <main+0x229c>)
 8002292:	791b      	ldrb	r3, [r3, #4]
 8002294:	18d3      	adds	r3, r2, r3
 8002296:	b2da      	uxtb	r2, r3
 8002298:	4b88      	ldr	r3, [pc, #544]	; (80024bc <main+0x229c>)
 800229a:	715a      	strb	r2, [r3, #5]

			/* Opyskaem nogy CS, i proizvodim priemo-peredachu po SPI----------------------------------------------------------------------*/
			GPIOB->BRR = (1<<1);
 800229c:	4b85      	ldr	r3, [pc, #532]	; (80024b4 <main+0x2294>)
 800229e:	2202      	movs	r2, #2
 80022a0:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*)spi_tx, (uint8_t*)spi_rx, 0x06);
 80022a2:	4a87      	ldr	r2, [pc, #540]	; (80024c0 <main+0x22a0>)
 80022a4:	4985      	ldr	r1, [pc, #532]	; (80024bc <main+0x229c>)
 80022a6:	4887      	ldr	r0, [pc, #540]	; (80024c4 <main+0x22a4>)
 80022a8:	2306      	movs	r3, #6
 80022aa:	f002 fc57 	bl	8004b5c <HAL_SPI_TransmitReceive_IT>

			/* Platy vstavili v port ------------------------------------------------------------------------------------------------------*/
			if(board_9_type != 0x00 && (last_port_state & (1<<8)) == 0x00)
 80022ae:	4b86      	ldr	r3, [pc, #536]	; (80024c8 <main+0x22a8>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d018      	beq.n	80022e8 <main+0x20c8>
 80022b6:	4b85      	ldr	r3, [pc, #532]	; (80024cc <main+0x22ac>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	001a      	movs	r2, r3
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4013      	ands	r3, r2
 80022c2:	d111      	bne.n	80022e8 <main+0x20c8>
			{
				uart_tx   [0x04] &= ~ (1 << 0); // Zapis 0 v bity sostoyaniya porta
 80022c4:	4b82      	ldr	r3, [pc, #520]	; (80024d0 <main+0x22b0>)
 80022c6:	791b      	ldrb	r3, [r3, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	4393      	bics	r3, r2
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4b80      	ldr	r3, [pc, #512]	; (80024d0 <main+0x22b0>)
 80022d0:	711a      	strb	r2, [r3, #4]
				last_port_state |= (1 << 8);  	      // Poslednee sostoyanie ravno 1
 80022d2:	4b7e      	ldr	r3, [pc, #504]	; (80024cc <main+0x22ac>)
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	2280      	movs	r2, #128	; 0x80
 80022d8:	0052      	lsls	r2, r2, #1
 80022da:	4313      	orrs	r3, r2
 80022dc:	b29a      	uxth	r2, r3
 80022de:	4b7b      	ldr	r3, [pc, #492]	; (80024cc <main+0x22ac>)
 80022e0:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;		      // Razreshaem peredachy
 80022e2:	4b7c      	ldr	r3, [pc, #496]	; (80024d4 <main+0x22b4>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	701a      	strb	r2, [r3, #0]
			}
			/* ----------------------------------------------------------------------------------------------------------------------------*/


			/* Platy dostali iz porta -----------------------------------------------------------------------------------------------------*/
			if(board_9_type == 0x00 && (last_port_state & (1<<8)) != 0x00)
 80022e8:	4b77      	ldr	r3, [pc, #476]	; (80024c8 <main+0x22a8>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d117      	bne.n	8002320 <main+0x2100>
 80022f0:	4b76      	ldr	r3, [pc, #472]	; (80024cc <main+0x22ac>)
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	001a      	movs	r2, r3
 80022f6:	2380      	movs	r3, #128	; 0x80
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	4013      	ands	r3, r2
 80022fc:	d010      	beq.n	8002320 <main+0x2100>
			{
				uart_tx   [0x04] |= (1 << 0); // Zapis 1 v bity sostoyaniya porta
 80022fe:	4b74      	ldr	r3, [pc, #464]	; (80024d0 <main+0x22b0>)
 8002300:	791b      	ldrb	r3, [r3, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	4313      	orrs	r3, r2
 8002306:	b2da      	uxtb	r2, r3
 8002308:	4b71      	ldr	r3, [pc, #452]	; (80024d0 <main+0x22b0>)
 800230a:	711a      	strb	r2, [r3, #4]
				last_port_state &= ~ (1 << 8);       // Poslednee sostoyanie ravno 0
 800230c:	4b6f      	ldr	r3, [pc, #444]	; (80024cc <main+0x22ac>)
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	4a71      	ldr	r2, [pc, #452]	; (80024d8 <main+0x22b8>)
 8002312:	4013      	ands	r3, r2
 8002314:	b29a      	uxth	r2, r3
 8002316:	4b6d      	ldr	r3, [pc, #436]	; (80024cc <main+0x22ac>)
 8002318:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;	      // Razreshaem peredachy
 800231a:	4b6e      	ldr	r3, [pc, #440]	; (80024d4 <main+0x22b4>)
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
			}
			/* ------------------------------------------------------------------------------------------------------------------------------*/

			/* Otpravka massiva pri izmenenii v signale -------------------------------------------------------------------------------------*/
			if (last_sig_p_9[0] != uart_tx[37])
 8002320:	4b6e      	ldr	r3, [pc, #440]	; (80024dc <main+0x22bc>)
 8002322:	781a      	ldrb	r2, [r3, #0]
 8002324:	4b6a      	ldr	r3, [pc, #424]	; (80024d0 <main+0x22b0>)
 8002326:	2125      	movs	r1, #37	; 0x25
 8002328:	5c5b      	ldrb	r3, [r3, r1]
 800232a:	429a      	cmp	r2, r3
 800232c:	d007      	beq.n	800233e <main+0x211e>
			{
				last_sig_p_9[0] = uart_tx[37];
 800232e:	4b68      	ldr	r3, [pc, #416]	; (80024d0 <main+0x22b0>)
 8002330:	2225      	movs	r2, #37	; 0x25
 8002332:	5c9a      	ldrb	r2, [r3, r2]
 8002334:	4b69      	ldr	r3, [pc, #420]	; (80024dc <main+0x22bc>)
 8002336:	701a      	strb	r2, [r3, #0]
				uart_tx_on = 1;
 8002338:	4b66      	ldr	r3, [pc, #408]	; (80024d4 <main+0x22b4>)
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_9[1] != uart_tx[38])
 800233e:	4b67      	ldr	r3, [pc, #412]	; (80024dc <main+0x22bc>)
 8002340:	785a      	ldrb	r2, [r3, #1]
 8002342:	4b63      	ldr	r3, [pc, #396]	; (80024d0 <main+0x22b0>)
 8002344:	2126      	movs	r1, #38	; 0x26
 8002346:	5c5b      	ldrb	r3, [r3, r1]
 8002348:	429a      	cmp	r2, r3
 800234a:	d007      	beq.n	800235c <main+0x213c>
			{
				last_sig_p_9[1] = uart_tx[38];
 800234c:	4b60      	ldr	r3, [pc, #384]	; (80024d0 <main+0x22b0>)
 800234e:	2226      	movs	r2, #38	; 0x26
 8002350:	5c9a      	ldrb	r2, [r3, r2]
 8002352:	4b62      	ldr	r3, [pc, #392]	; (80024dc <main+0x22bc>)
 8002354:	705a      	strb	r2, [r3, #1]
				uart_tx_on = 1;
 8002356:	4b5f      	ldr	r3, [pc, #380]	; (80024d4 <main+0x22b4>)
 8002358:	2201      	movs	r2, #1
 800235a:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_9[2] != uart_tx[39])
 800235c:	4b5f      	ldr	r3, [pc, #380]	; (80024dc <main+0x22bc>)
 800235e:	789a      	ldrb	r2, [r3, #2]
 8002360:	4b5b      	ldr	r3, [pc, #364]	; (80024d0 <main+0x22b0>)
 8002362:	2127      	movs	r1, #39	; 0x27
 8002364:	5c5b      	ldrb	r3, [r3, r1]
 8002366:	429a      	cmp	r2, r3
 8002368:	d007      	beq.n	800237a <main+0x215a>
			{
				last_sig_p_9[2] = uart_tx[39];
 800236a:	4b59      	ldr	r3, [pc, #356]	; (80024d0 <main+0x22b0>)
 800236c:	2227      	movs	r2, #39	; 0x27
 800236e:	5c9a      	ldrb	r2, [r3, r2]
 8002370:	4b5a      	ldr	r3, [pc, #360]	; (80024dc <main+0x22bc>)
 8002372:	709a      	strb	r2, [r3, #2]
				uart_tx_on = 1;
 8002374:	4b57      	ldr	r3, [pc, #348]	; (80024d4 <main+0x22b4>)
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_9[3] != uart_tx[40])
 800237a:	4b58      	ldr	r3, [pc, #352]	; (80024dc <main+0x22bc>)
 800237c:	78da      	ldrb	r2, [r3, #3]
 800237e:	4b54      	ldr	r3, [pc, #336]	; (80024d0 <main+0x22b0>)
 8002380:	2128      	movs	r1, #40	; 0x28
 8002382:	5c5b      	ldrb	r3, [r3, r1]
 8002384:	429a      	cmp	r2, r3
 8002386:	d007      	beq.n	8002398 <main+0x2178>
			{
				last_sig_p_9[3] = uart_tx[40];
 8002388:	4b51      	ldr	r3, [pc, #324]	; (80024d0 <main+0x22b0>)
 800238a:	2228      	movs	r2, #40	; 0x28
 800238c:	5c9a      	ldrb	r2, [r3, r2]
 800238e:	4b53      	ldr	r3, [pc, #332]	; (80024dc <main+0x22bc>)
 8002390:	70da      	strb	r2, [r3, #3]
				uart_tx_on = 1;
 8002392:	4b50      	ldr	r3, [pc, #320]	; (80024d4 <main+0x22b4>)
 8002394:	2201      	movs	r2, #1
 8002396:	701a      	strb	r2, [r3, #0]
			}


		}

		if(spi_state == 2 && spi_port == 10 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 8002398:	4b43      	ldr	r3, [pc, #268]	; (80024a8 <main+0x2288>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d147      	bne.n	8002430 <main+0x2210>
 80023a0:	4b42      	ldr	r3, [pc, #264]	; (80024ac <main+0x228c>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b0a      	cmp	r3, #10
 80023a6:	d143      	bne.n	8002430 <main+0x2210>
 80023a8:	4b41      	ldr	r3, [pc, #260]	; (80024b0 <main+0x2290>)
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4013      	ands	r3, r2
 80023b2:	d03d      	beq.n	8002430 <main+0x2210>
 80023b4:	4b3e      	ldr	r3, [pc, #248]	; (80024b0 <main+0x2290>)
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4013      	ands	r3, r2
 80023be:	d037      	beq.n	8002430 <main+0x2210>
 80023c0:	4b3b      	ldr	r3, [pc, #236]	; (80024b0 <main+0x2290>)
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	4013      	ands	r3, r2
 80023c8:	d032      	beq.n	8002430 <main+0x2210>
 80023ca:	4b39      	ldr	r3, [pc, #228]	; (80024b0 <main+0x2290>)
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2240      	movs	r2, #64	; 0x40
 80023d0:	4013      	ands	r3, r2
 80023d2:	d02d      	beq.n	8002430 <main+0x2210>
 80023d4:	4b37      	ldr	r3, [pc, #220]	; (80024b4 <main+0x2294>)
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	4013      	ands	r3, r2
 80023de:	d027      	beq.n	8002430 <main+0x2210>
 80023e0:	4b34      	ldr	r3, [pc, #208]	; (80024b4 <main+0x2294>)
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	01db      	lsls	r3, r3, #7
 80023e8:	4013      	ands	r3, r2
 80023ea:	d021      	beq.n	8002430 <main+0x2210>
 80023ec:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <main+0x2294>)
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	019b      	lsls	r3, r3, #6
 80023f4:	4013      	ands	r3, r2
 80023f6:	d01b      	beq.n	8002430 <main+0x2210>
 80023f8:	4b2e      	ldr	r3, [pc, #184]	; (80024b4 <main+0x2294>)
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	015b      	lsls	r3, r3, #5
 8002400:	4013      	ands	r3, r2
 8002402:	d015      	beq.n	8002430 <main+0x2210>
 8002404:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <main+0x2294>)
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	2204      	movs	r2, #4
 800240a:	4013      	ands	r3, r2
 800240c:	d010      	beq.n	8002430 <main+0x2210>
 800240e:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <main+0x2294>)
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2202      	movs	r2, #2
 8002414:	4013      	ands	r3, r2
 8002416:	d00b      	beq.n	8002430 <main+0x2210>
 8002418:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <main+0x2294>)
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	2201      	movs	r2, #1
 800241e:	4013      	ands	r3, r2
 8002420:	d006      	beq.n	8002430 <main+0x2210>
 8002422:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <main+0x2290>)
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	2220      	movs	r2, #32
 8002428:	4013      	ands	r3, r2
 800242a:	d001      	beq.n	8002430 <main+0x2210>
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <main+0x2212>
 8002430:	2300      	movs	r3, #0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d05b      	beq.n	80024ee <main+0x22ce>
		{
			spi_rx_ctrl_summ = spi_rx[0] + spi_rx[1] + spi_rx[2] + spi_rx[3] + spi_rx[4];
 8002436:	4b22      	ldr	r3, [pc, #136]	; (80024c0 <main+0x22a0>)
 8002438:	781a      	ldrb	r2, [r3, #0]
 800243a:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <main+0x22a0>)
 800243c:	785b      	ldrb	r3, [r3, #1]
 800243e:	18d3      	adds	r3, r2, r3
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4b1f      	ldr	r3, [pc, #124]	; (80024c0 <main+0x22a0>)
 8002444:	789b      	ldrb	r3, [r3, #2]
 8002446:	18d3      	adds	r3, r2, r3
 8002448:	b2da      	uxtb	r2, r3
 800244a:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <main+0x22a0>)
 800244c:	78db      	ldrb	r3, [r3, #3]
 800244e:	18d3      	adds	r3, r2, r3
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <main+0x22a0>)
 8002454:	791b      	ldrb	r3, [r3, #4]
 8002456:	18d3      	adds	r3, r2, r3
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <main+0x22c0>)
 800245c:	701a      	strb	r2, [r3, #0]

			if(spi_rx_ctrl_summ == spi_rx[5])
 800245e:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <main+0x22a0>)
 8002460:	795a      	ldrb	r2, [r3, #5]
 8002462:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <main+0x22c0>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d13e      	bne.n	80024e8 <main+0x22c8>
			{
				spi_state = 0;
 800246a:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <main+0x2288>)
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
				spi_port = 11;
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <main+0x228c>)
 8002472:	220b      	movs	r2, #11
 8002474:	701a      	strb	r2, [r3, #0]

				board_10_type = spi_rx[4];
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <main+0x22a0>)
 8002478:	791a      	ldrb	r2, [r3, #4]
 800247a:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <main+0x22c4>)
 800247c:	701a      	strb	r2, [r3, #0]
				uart_tx [41]  = spi_rx[0];
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <main+0x22a0>)
 8002480:	7819      	ldrb	r1, [r3, #0]
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <main+0x22b0>)
 8002484:	2229      	movs	r2, #41	; 0x29
 8002486:	5499      	strb	r1, [r3, r2]
				uart_tx [42]  = spi_rx[1];
 8002488:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <main+0x22a0>)
 800248a:	7859      	ldrb	r1, [r3, #1]
 800248c:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <main+0x22b0>)
 800248e:	222a      	movs	r2, #42	; 0x2a
 8002490:	5499      	strb	r1, [r3, r2]
				uart_tx [43]  = spi_rx[2];
 8002492:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <main+0x22a0>)
 8002494:	7899      	ldrb	r1, [r3, #2]
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <main+0x22b0>)
 8002498:	222b      	movs	r2, #43	; 0x2b
 800249a:	5499      	strb	r1, [r3, r2]
				uart_tx [44]  = spi_rx[3];
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <main+0x22a0>)
 800249e:	78d9      	ldrb	r1, [r3, #3]
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <main+0x22b0>)
 80024a2:	222c      	movs	r2, #44	; 0x2c
 80024a4:	5499      	strb	r1, [r3, r2]
 80024a6:	e022      	b.n	80024ee <main+0x22ce>
 80024a8:	20000208 	.word	0x20000208
 80024ac:	20000000 	.word	0x20000000
 80024b0:	48000800 	.word	0x48000800
 80024b4:	48000400 	.word	0x48000400
 80024b8:	200002e0 	.word	0x200002e0
 80024bc:	20000200 	.word	0x20000200
 80024c0:	200001f8 	.word	0x200001f8
 80024c4:	2000005c 	.word	0x2000005c
 80024c8:	20000211 	.word	0x20000211
 80024cc:	20000350 	.word	0x20000350
 80024d0:	20000004 	.word	0x20000004
 80024d4:	2000003b 	.word	0x2000003b
 80024d8:	fffffeff 	.word	0xfffffeff
 80024dc:	20000374 	.word	0x20000374
 80024e0:	20000206 	.word	0x20000206
 80024e4:	20000212 	.word	0x20000212
			}
			else
			{
				spi_state = 0;
 80024e8:	4bc1      	ldr	r3, [pc, #772]	; (80027f0 <main+0x25d0>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
		/* ------------------------------------------------------------------------------------------------------------------------------*/


		/* *****PORT_11*****-------------------------------------------------------------------------------------------------------------*/
		/* Esli sostoyanie SPI ravno 0, to proveryaem, chto proishodit opros nyznogo porta, i vse nogi spi podnyaty----------------------*/
		if(spi_state == 0 && spi_port == 11 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 80024ee:	4bc0      	ldr	r3, [pc, #768]	; (80027f0 <main+0x25d0>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d147      	bne.n	8002586 <main+0x2366>
 80024f6:	4bbf      	ldr	r3, [pc, #764]	; (80027f4 <main+0x25d4>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b0b      	cmp	r3, #11
 80024fc:	d143      	bne.n	8002586 <main+0x2366>
 80024fe:	4bbe      	ldr	r3, [pc, #760]	; (80027f8 <main+0x25d8>)
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4013      	ands	r3, r2
 8002508:	d03d      	beq.n	8002586 <main+0x2366>
 800250a:	4bbb      	ldr	r3, [pc, #748]	; (80027f8 <main+0x25d8>)
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4013      	ands	r3, r2
 8002514:	d037      	beq.n	8002586 <main+0x2366>
 8002516:	4bb8      	ldr	r3, [pc, #736]	; (80027f8 <main+0x25d8>)
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2280      	movs	r2, #128	; 0x80
 800251c:	4013      	ands	r3, r2
 800251e:	d032      	beq.n	8002586 <main+0x2366>
 8002520:	4bb5      	ldr	r3, [pc, #724]	; (80027f8 <main+0x25d8>)
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	2240      	movs	r2, #64	; 0x40
 8002526:	4013      	ands	r3, r2
 8002528:	d02d      	beq.n	8002586 <main+0x2366>
 800252a:	4bb4      	ldr	r3, [pc, #720]	; (80027fc <main+0x25dc>)
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	021b      	lsls	r3, r3, #8
 8002532:	4013      	ands	r3, r2
 8002534:	d027      	beq.n	8002586 <main+0x2366>
 8002536:	4bb1      	ldr	r3, [pc, #708]	; (80027fc <main+0x25dc>)
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	01db      	lsls	r3, r3, #7
 800253e:	4013      	ands	r3, r2
 8002540:	d021      	beq.n	8002586 <main+0x2366>
 8002542:	4bae      	ldr	r3, [pc, #696]	; (80027fc <main+0x25dc>)
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	019b      	lsls	r3, r3, #6
 800254a:	4013      	ands	r3, r2
 800254c:	d01b      	beq.n	8002586 <main+0x2366>
 800254e:	4bab      	ldr	r3, [pc, #684]	; (80027fc <main+0x25dc>)
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	015b      	lsls	r3, r3, #5
 8002556:	4013      	ands	r3, r2
 8002558:	d015      	beq.n	8002586 <main+0x2366>
 800255a:	4ba8      	ldr	r3, [pc, #672]	; (80027fc <main+0x25dc>)
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	2204      	movs	r2, #4
 8002560:	4013      	ands	r3, r2
 8002562:	d010      	beq.n	8002586 <main+0x2366>
 8002564:	4ba5      	ldr	r3, [pc, #660]	; (80027fc <main+0x25dc>)
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	2202      	movs	r2, #2
 800256a:	4013      	ands	r3, r2
 800256c:	d00b      	beq.n	8002586 <main+0x2366>
 800256e:	4ba3      	ldr	r3, [pc, #652]	; (80027fc <main+0x25dc>)
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	2201      	movs	r2, #1
 8002574:	4013      	ands	r3, r2
 8002576:	d006      	beq.n	8002586 <main+0x2366>
 8002578:	4b9f      	ldr	r3, [pc, #636]	; (80027f8 <main+0x25d8>)
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2220      	movs	r2, #32
 800257e:	4013      	ands	r3, r2
 8002580:	d001      	beq.n	8002586 <main+0x2366>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <main+0x2368>
 8002586:	2300      	movs	r3, #0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d100      	bne.n	800258e <main+0x236e>
 800258c:	e0a8      	b.n	80026e0 <main+0x24c0>
		{
			spi_state = 1;
 800258e:	4b98      	ldr	r3, [pc, #608]	; (80027f0 <main+0x25d0>)
 8002590:	2201      	movs	r2, #1
 8002592:	701a      	strb	r2, [r3, #0]

			/* Prisvaivaem massivy otpravlyaemomy po SPI znacheniya signalov, prinyatyh po UART--------------------------------------------*/
			spi_tx[0] = uart_rx_slice[43];
 8002594:	4b9a      	ldr	r3, [pc, #616]	; (8002800 <main+0x25e0>)
 8002596:	222b      	movs	r2, #43	; 0x2b
 8002598:	5c9a      	ldrb	r2, [r3, r2]
 800259a:	4b9a      	ldr	r3, [pc, #616]	; (8002804 <main+0x25e4>)
 800259c:	701a      	strb	r2, [r3, #0]
			spi_tx[1] = uart_rx_slice[44];
 800259e:	4b98      	ldr	r3, [pc, #608]	; (8002800 <main+0x25e0>)
 80025a0:	222c      	movs	r2, #44	; 0x2c
 80025a2:	5c9a      	ldrb	r2, [r3, r2]
 80025a4:	4b97      	ldr	r3, [pc, #604]	; (8002804 <main+0x25e4>)
 80025a6:	705a      	strb	r2, [r3, #1]
			spi_tx[2] = uart_rx_slice[45];
 80025a8:	4b95      	ldr	r3, [pc, #596]	; (8002800 <main+0x25e0>)
 80025aa:	222d      	movs	r2, #45	; 0x2d
 80025ac:	5c9a      	ldrb	r2, [r3, r2]
 80025ae:	4b95      	ldr	r3, [pc, #596]	; (8002804 <main+0x25e4>)
 80025b0:	709a      	strb	r2, [r3, #2]
			spi_tx[3] = uart_rx_slice[46];
 80025b2:	4b93      	ldr	r3, [pc, #588]	; (8002800 <main+0x25e0>)
 80025b4:	222e      	movs	r2, #46	; 0x2e
 80025b6:	5c9a      	ldrb	r2, [r3, r2]
 80025b8:	4b92      	ldr	r3, [pc, #584]	; (8002804 <main+0x25e4>)
 80025ba:	70da      	strb	r2, [r3, #3]

			/* Schitayem kontrolnyu summy, i zapisyvaem v poslednii element massiva, otpravlyaemogo po SPI---------------------------------*/
			spi_tx[5] = spi_tx[0] + spi_tx[1] + spi_tx[2] + spi_tx[3] + spi_tx[4];
 80025bc:	4b91      	ldr	r3, [pc, #580]	; (8002804 <main+0x25e4>)
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	4b90      	ldr	r3, [pc, #576]	; (8002804 <main+0x25e4>)
 80025c2:	785b      	ldrb	r3, [r3, #1]
 80025c4:	18d3      	adds	r3, r2, r3
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	4b8e      	ldr	r3, [pc, #568]	; (8002804 <main+0x25e4>)
 80025ca:	789b      	ldrb	r3, [r3, #2]
 80025cc:	18d3      	adds	r3, r2, r3
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	4b8c      	ldr	r3, [pc, #560]	; (8002804 <main+0x25e4>)
 80025d2:	78db      	ldrb	r3, [r3, #3]
 80025d4:	18d3      	adds	r3, r2, r3
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	4b8a      	ldr	r3, [pc, #552]	; (8002804 <main+0x25e4>)
 80025da:	791b      	ldrb	r3, [r3, #4]
 80025dc:	18d3      	adds	r3, r2, r3
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	4b88      	ldr	r3, [pc, #544]	; (8002804 <main+0x25e4>)
 80025e2:	715a      	strb	r2, [r3, #5]

			/* Opyskaem nogy CS, i proizvodim priemo-peredachu po SPI----------------------------------------------------------------------*/
			GPIOB->BRR = (1<<0);
 80025e4:	4b85      	ldr	r3, [pc, #532]	; (80027fc <main+0x25dc>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*)spi_tx, (uint8_t*)spi_rx, 0x06);
 80025ea:	4a87      	ldr	r2, [pc, #540]	; (8002808 <main+0x25e8>)
 80025ec:	4985      	ldr	r1, [pc, #532]	; (8002804 <main+0x25e4>)
 80025ee:	4887      	ldr	r0, [pc, #540]	; (800280c <main+0x25ec>)
 80025f0:	2306      	movs	r3, #6
 80025f2:	f002 fab3 	bl	8004b5c <HAL_SPI_TransmitReceive_IT>

			/* Platy vstavili v port ------------------------------------------------------------------------------------------------------*/
			if(board_10_type != 0x00 && (last_port_state & (1<<9)) == 0x00)
 80025f6:	4b86      	ldr	r3, [pc, #536]	; (8002810 <main+0x25f0>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d018      	beq.n	8002630 <main+0x2410>
 80025fe:	4b85      	ldr	r3, [pc, #532]	; (8002814 <main+0x25f4>)
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	001a      	movs	r2, r3
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4013      	ands	r3, r2
 800260a:	d111      	bne.n	8002630 <main+0x2410>
			{
				uart_tx   [0x04] &= ~ (1 << 1); // Zapis 0 v bity sostoyaniya porta
 800260c:	4b82      	ldr	r3, [pc, #520]	; (8002818 <main+0x25f8>)
 800260e:	791b      	ldrb	r3, [r3, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	4393      	bics	r3, r2
 8002614:	b2da      	uxtb	r2, r3
 8002616:	4b80      	ldr	r3, [pc, #512]	; (8002818 <main+0x25f8>)
 8002618:	711a      	strb	r2, [r3, #4]
				last_port_state |= (1 << 9);	      // Poslednee sostoyanie ravno 1
 800261a:	4b7e      	ldr	r3, [pc, #504]	; (8002814 <main+0x25f4>)
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	0092      	lsls	r2, r2, #2
 8002622:	4313      	orrs	r3, r2
 8002624:	b29a      	uxth	r2, r3
 8002626:	4b7b      	ldr	r3, [pc, #492]	; (8002814 <main+0x25f4>)
 8002628:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;		      // Razreshaem peredachy
 800262a:	4b7c      	ldr	r3, [pc, #496]	; (800281c <main+0x25fc>)
 800262c:	2201      	movs	r2, #1
 800262e:	701a      	strb	r2, [r3, #0]
			}
			/* ----------------------------------------------------------------------------------------------------------------------------*/


			/* Platy dostali iz porta -----------------------------------------------------------------------------------------------------*/
			if(board_10_type == 0x00 && (last_port_state & (1<<9)) != 0x00)
 8002630:	4b77      	ldr	r3, [pc, #476]	; (8002810 <main+0x25f0>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d117      	bne.n	8002668 <main+0x2448>
 8002638:	4b76      	ldr	r3, [pc, #472]	; (8002814 <main+0x25f4>)
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	001a      	movs	r2, r3
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4013      	ands	r3, r2
 8002644:	d010      	beq.n	8002668 <main+0x2448>
			{
				uart_tx   [0x04] |= (1 << 1); // Zapis 1 v bity sostoyaniya porta
 8002646:	4b74      	ldr	r3, [pc, #464]	; (8002818 <main+0x25f8>)
 8002648:	791b      	ldrb	r3, [r3, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	4313      	orrs	r3, r2
 800264e:	b2da      	uxtb	r2, r3
 8002650:	4b71      	ldr	r3, [pc, #452]	; (8002818 <main+0x25f8>)
 8002652:	711a      	strb	r2, [r3, #4]
				last_port_state &= ~ (1 << 9);       // Poslednee sostoyanie ravno 0
 8002654:	4b6f      	ldr	r3, [pc, #444]	; (8002814 <main+0x25f4>)
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	4a71      	ldr	r2, [pc, #452]	; (8002820 <main+0x2600>)
 800265a:	4013      	ands	r3, r2
 800265c:	b29a      	uxth	r2, r3
 800265e:	4b6d      	ldr	r3, [pc, #436]	; (8002814 <main+0x25f4>)
 8002660:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;	      // Razreshaem peredachy
 8002662:	4b6e      	ldr	r3, [pc, #440]	; (800281c <main+0x25fc>)
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
			}
			/* ----------------------------------------------------------------------------------------------------------------------------*/

			/* Otpravka massiva pri izmenenii v signale -----------------------------------------------------------------------------------*/
			if (last_sig_p_10[0] != uart_tx[41])
 8002668:	4b6e      	ldr	r3, [pc, #440]	; (8002824 <main+0x2604>)
 800266a:	781a      	ldrb	r2, [r3, #0]
 800266c:	4b6a      	ldr	r3, [pc, #424]	; (8002818 <main+0x25f8>)
 800266e:	2129      	movs	r1, #41	; 0x29
 8002670:	5c5b      	ldrb	r3, [r3, r1]
 8002672:	429a      	cmp	r2, r3
 8002674:	d007      	beq.n	8002686 <main+0x2466>
			{
				last_sig_p_10[0] = uart_tx[41];
 8002676:	4b68      	ldr	r3, [pc, #416]	; (8002818 <main+0x25f8>)
 8002678:	2229      	movs	r2, #41	; 0x29
 800267a:	5c9a      	ldrb	r2, [r3, r2]
 800267c:	4b69      	ldr	r3, [pc, #420]	; (8002824 <main+0x2604>)
 800267e:	701a      	strb	r2, [r3, #0]
				uart_tx_on = 1;
 8002680:	4b66      	ldr	r3, [pc, #408]	; (800281c <main+0x25fc>)
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_10[1] != uart_tx[42])
 8002686:	4b67      	ldr	r3, [pc, #412]	; (8002824 <main+0x2604>)
 8002688:	785a      	ldrb	r2, [r3, #1]
 800268a:	4b63      	ldr	r3, [pc, #396]	; (8002818 <main+0x25f8>)
 800268c:	212a      	movs	r1, #42	; 0x2a
 800268e:	5c5b      	ldrb	r3, [r3, r1]
 8002690:	429a      	cmp	r2, r3
 8002692:	d007      	beq.n	80026a4 <main+0x2484>
			{
				last_sig_p_10[1] = uart_tx[42];
 8002694:	4b60      	ldr	r3, [pc, #384]	; (8002818 <main+0x25f8>)
 8002696:	222a      	movs	r2, #42	; 0x2a
 8002698:	5c9a      	ldrb	r2, [r3, r2]
 800269a:	4b62      	ldr	r3, [pc, #392]	; (8002824 <main+0x2604>)
 800269c:	705a      	strb	r2, [r3, #1]
				uart_tx_on = 1;
 800269e:	4b5f      	ldr	r3, [pc, #380]	; (800281c <main+0x25fc>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_10[2] != uart_tx[43])
 80026a4:	4b5f      	ldr	r3, [pc, #380]	; (8002824 <main+0x2604>)
 80026a6:	789a      	ldrb	r2, [r3, #2]
 80026a8:	4b5b      	ldr	r3, [pc, #364]	; (8002818 <main+0x25f8>)
 80026aa:	212b      	movs	r1, #43	; 0x2b
 80026ac:	5c5b      	ldrb	r3, [r3, r1]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d007      	beq.n	80026c2 <main+0x24a2>
			{
				last_sig_p_10[2] = uart_tx[43];
 80026b2:	4b59      	ldr	r3, [pc, #356]	; (8002818 <main+0x25f8>)
 80026b4:	222b      	movs	r2, #43	; 0x2b
 80026b6:	5c9a      	ldrb	r2, [r3, r2]
 80026b8:	4b5a      	ldr	r3, [pc, #360]	; (8002824 <main+0x2604>)
 80026ba:	709a      	strb	r2, [r3, #2]
				uart_tx_on = 1;
 80026bc:	4b57      	ldr	r3, [pc, #348]	; (800281c <main+0x25fc>)
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_10[3] != uart_tx[44])
 80026c2:	4b58      	ldr	r3, [pc, #352]	; (8002824 <main+0x2604>)
 80026c4:	78da      	ldrb	r2, [r3, #3]
 80026c6:	4b54      	ldr	r3, [pc, #336]	; (8002818 <main+0x25f8>)
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	5c5b      	ldrb	r3, [r3, r1]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d007      	beq.n	80026e0 <main+0x24c0>
			{
				last_sig_p_10[3] = uart_tx[44];
 80026d0:	4b51      	ldr	r3, [pc, #324]	; (8002818 <main+0x25f8>)
 80026d2:	222c      	movs	r2, #44	; 0x2c
 80026d4:	5c9a      	ldrb	r2, [r3, r2]
 80026d6:	4b53      	ldr	r3, [pc, #332]	; (8002824 <main+0x2604>)
 80026d8:	70da      	strb	r2, [r3, #3]
				uart_tx_on = 1;
 80026da:	4b50      	ldr	r3, [pc, #320]	; (800281c <main+0x25fc>)
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
			}


		}

		if(spi_state == 2 && spi_port == 11 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 80026e0:	4b43      	ldr	r3, [pc, #268]	; (80027f0 <main+0x25d0>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d147      	bne.n	8002778 <main+0x2558>
 80026e8:	4b42      	ldr	r3, [pc, #264]	; (80027f4 <main+0x25d4>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b0b      	cmp	r3, #11
 80026ee:	d143      	bne.n	8002778 <main+0x2558>
 80026f0:	4b41      	ldr	r3, [pc, #260]	; (80027f8 <main+0x25d8>)
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4013      	ands	r3, r2
 80026fa:	d03d      	beq.n	8002778 <main+0x2558>
 80026fc:	4b3e      	ldr	r3, [pc, #248]	; (80027f8 <main+0x25d8>)
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4013      	ands	r3, r2
 8002706:	d037      	beq.n	8002778 <main+0x2558>
 8002708:	4b3b      	ldr	r3, [pc, #236]	; (80027f8 <main+0x25d8>)
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	2280      	movs	r2, #128	; 0x80
 800270e:	4013      	ands	r3, r2
 8002710:	d032      	beq.n	8002778 <main+0x2558>
 8002712:	4b39      	ldr	r3, [pc, #228]	; (80027f8 <main+0x25d8>)
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2240      	movs	r2, #64	; 0x40
 8002718:	4013      	ands	r3, r2
 800271a:	d02d      	beq.n	8002778 <main+0x2558>
 800271c:	4b37      	ldr	r3, [pc, #220]	; (80027fc <main+0x25dc>)
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	4013      	ands	r3, r2
 8002726:	d027      	beq.n	8002778 <main+0x2558>
 8002728:	4b34      	ldr	r3, [pc, #208]	; (80027fc <main+0x25dc>)
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	01db      	lsls	r3, r3, #7
 8002730:	4013      	ands	r3, r2
 8002732:	d021      	beq.n	8002778 <main+0x2558>
 8002734:	4b31      	ldr	r3, [pc, #196]	; (80027fc <main+0x25dc>)
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	019b      	lsls	r3, r3, #6
 800273c:	4013      	ands	r3, r2
 800273e:	d01b      	beq.n	8002778 <main+0x2558>
 8002740:	4b2e      	ldr	r3, [pc, #184]	; (80027fc <main+0x25dc>)
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	015b      	lsls	r3, r3, #5
 8002748:	4013      	ands	r3, r2
 800274a:	d015      	beq.n	8002778 <main+0x2558>
 800274c:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <main+0x25dc>)
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2204      	movs	r2, #4
 8002752:	4013      	ands	r3, r2
 8002754:	d010      	beq.n	8002778 <main+0x2558>
 8002756:	4b29      	ldr	r3, [pc, #164]	; (80027fc <main+0x25dc>)
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2202      	movs	r2, #2
 800275c:	4013      	ands	r3, r2
 800275e:	d00b      	beq.n	8002778 <main+0x2558>
 8002760:	4b26      	ldr	r3, [pc, #152]	; (80027fc <main+0x25dc>)
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	2201      	movs	r2, #1
 8002766:	4013      	ands	r3, r2
 8002768:	d006      	beq.n	8002778 <main+0x2558>
 800276a:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <main+0x25d8>)
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2220      	movs	r2, #32
 8002770:	4013      	ands	r3, r2
 8002772:	d001      	beq.n	8002778 <main+0x2558>
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <main+0x255a>
 8002778:	2300      	movs	r3, #0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d05b      	beq.n	8002836 <main+0x2616>
		{
			spi_rx_ctrl_summ = spi_rx[0] + spi_rx[1] + spi_rx[2] + spi_rx[3] + spi_rx[4];
 800277e:	4b22      	ldr	r3, [pc, #136]	; (8002808 <main+0x25e8>)
 8002780:	781a      	ldrb	r2, [r3, #0]
 8002782:	4b21      	ldr	r3, [pc, #132]	; (8002808 <main+0x25e8>)
 8002784:	785b      	ldrb	r3, [r3, #1]
 8002786:	18d3      	adds	r3, r2, r3
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <main+0x25e8>)
 800278c:	789b      	ldrb	r3, [r3, #2]
 800278e:	18d3      	adds	r3, r2, r3
 8002790:	b2da      	uxtb	r2, r3
 8002792:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <main+0x25e8>)
 8002794:	78db      	ldrb	r3, [r3, #3]
 8002796:	18d3      	adds	r3, r2, r3
 8002798:	b2da      	uxtb	r2, r3
 800279a:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <main+0x25e8>)
 800279c:	791b      	ldrb	r3, [r3, #4]
 800279e:	18d3      	adds	r3, r2, r3
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	4b21      	ldr	r3, [pc, #132]	; (8002828 <main+0x2608>)
 80027a4:	701a      	strb	r2, [r3, #0]

			if(spi_rx_ctrl_summ == spi_rx[5])
 80027a6:	4b18      	ldr	r3, [pc, #96]	; (8002808 <main+0x25e8>)
 80027a8:	795a      	ldrb	r2, [r3, #5]
 80027aa:	4b1f      	ldr	r3, [pc, #124]	; (8002828 <main+0x2608>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d13e      	bne.n	8002830 <main+0x2610>
			{
				spi_state = 0;
 80027b2:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <main+0x25d0>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
				spi_port = 12;
 80027b8:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <main+0x25d4>)
 80027ba:	220c      	movs	r2, #12
 80027bc:	701a      	strb	r2, [r3, #0]

				board_11_type = spi_rx[4];
 80027be:	4b12      	ldr	r3, [pc, #72]	; (8002808 <main+0x25e8>)
 80027c0:	791a      	ldrb	r2, [r3, #4]
 80027c2:	4b1a      	ldr	r3, [pc, #104]	; (800282c <main+0x260c>)
 80027c4:	701a      	strb	r2, [r3, #0]
				uart_tx [45]  = spi_rx[0];
 80027c6:	4b10      	ldr	r3, [pc, #64]	; (8002808 <main+0x25e8>)
 80027c8:	7819      	ldrb	r1, [r3, #0]
 80027ca:	4b13      	ldr	r3, [pc, #76]	; (8002818 <main+0x25f8>)
 80027cc:	222d      	movs	r2, #45	; 0x2d
 80027ce:	5499      	strb	r1, [r3, r2]
				uart_tx [46]  = spi_rx[1];
 80027d0:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <main+0x25e8>)
 80027d2:	7859      	ldrb	r1, [r3, #1]
 80027d4:	4b10      	ldr	r3, [pc, #64]	; (8002818 <main+0x25f8>)
 80027d6:	222e      	movs	r2, #46	; 0x2e
 80027d8:	5499      	strb	r1, [r3, r2]
				uart_tx [47]  = spi_rx[2];
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <main+0x25e8>)
 80027dc:	7899      	ldrb	r1, [r3, #2]
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <main+0x25f8>)
 80027e0:	222f      	movs	r2, #47	; 0x2f
 80027e2:	5499      	strb	r1, [r3, r2]
				uart_tx [48]  = spi_rx[3];
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <main+0x25e8>)
 80027e6:	78d9      	ldrb	r1, [r3, #3]
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <main+0x25f8>)
 80027ea:	2230      	movs	r2, #48	; 0x30
 80027ec:	5499      	strb	r1, [r3, r2]
 80027ee:	e022      	b.n	8002836 <main+0x2616>
 80027f0:	20000208 	.word	0x20000208
 80027f4:	20000000 	.word	0x20000000
 80027f8:	48000800 	.word	0x48000800
 80027fc:	48000400 	.word	0x48000400
 8002800:	200002e0 	.word	0x200002e0
 8002804:	20000200 	.word	0x20000200
 8002808:	200001f8 	.word	0x200001f8
 800280c:	2000005c 	.word	0x2000005c
 8002810:	20000212 	.word	0x20000212
 8002814:	20000350 	.word	0x20000350
 8002818:	20000004 	.word	0x20000004
 800281c:	2000003b 	.word	0x2000003b
 8002820:	fffffdff 	.word	0xfffffdff
 8002824:	20000378 	.word	0x20000378
 8002828:	20000206 	.word	0x20000206
 800282c:	20000213 	.word	0x20000213
			}
			else
			{
				spi_state = 0;
 8002830:	4bc3      	ldr	r3, [pc, #780]	; (8002b40 <main+0x2920>)
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
		/* ------------------------------------------------------------------------------------------------------------------------------*/


		/* *****PORT_12*****-------------------------------------------------------------------------------------------------------------*/
		/* Esli sostoyanie SPI ravno 0, to proveryaem, chto proishodit opros nyznogo porta, i vse nogi spi podnyaty----------------------*/
		if(spi_state == 0 && spi_port == 12 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 8002836:	4bc2      	ldr	r3, [pc, #776]	; (8002b40 <main+0x2920>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d147      	bne.n	80028ce <main+0x26ae>
 800283e:	4bc1      	ldr	r3, [pc, #772]	; (8002b44 <main+0x2924>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b0c      	cmp	r3, #12
 8002844:	d143      	bne.n	80028ce <main+0x26ae>
 8002846:	4bc0      	ldr	r3, [pc, #768]	; (8002b48 <main+0x2928>)
 8002848:	691a      	ldr	r2, [r3, #16]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4013      	ands	r3, r2
 8002850:	d03d      	beq.n	80028ce <main+0x26ae>
 8002852:	4bbd      	ldr	r3, [pc, #756]	; (8002b48 <main+0x2928>)
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4013      	ands	r3, r2
 800285c:	d037      	beq.n	80028ce <main+0x26ae>
 800285e:	4bba      	ldr	r3, [pc, #744]	; (8002b48 <main+0x2928>)
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	2280      	movs	r2, #128	; 0x80
 8002864:	4013      	ands	r3, r2
 8002866:	d032      	beq.n	80028ce <main+0x26ae>
 8002868:	4bb7      	ldr	r3, [pc, #732]	; (8002b48 <main+0x2928>)
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2240      	movs	r2, #64	; 0x40
 800286e:	4013      	ands	r3, r2
 8002870:	d02d      	beq.n	80028ce <main+0x26ae>
 8002872:	4bb6      	ldr	r3, [pc, #728]	; (8002b4c <main+0x292c>)
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	4013      	ands	r3, r2
 800287c:	d027      	beq.n	80028ce <main+0x26ae>
 800287e:	4bb3      	ldr	r3, [pc, #716]	; (8002b4c <main+0x292c>)
 8002880:	691a      	ldr	r2, [r3, #16]
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	01db      	lsls	r3, r3, #7
 8002886:	4013      	ands	r3, r2
 8002888:	d021      	beq.n	80028ce <main+0x26ae>
 800288a:	4bb0      	ldr	r3, [pc, #704]	; (8002b4c <main+0x292c>)
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	019b      	lsls	r3, r3, #6
 8002892:	4013      	ands	r3, r2
 8002894:	d01b      	beq.n	80028ce <main+0x26ae>
 8002896:	4bad      	ldr	r3, [pc, #692]	; (8002b4c <main+0x292c>)
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	015b      	lsls	r3, r3, #5
 800289e:	4013      	ands	r3, r2
 80028a0:	d015      	beq.n	80028ce <main+0x26ae>
 80028a2:	4baa      	ldr	r3, [pc, #680]	; (8002b4c <main+0x292c>)
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2204      	movs	r2, #4
 80028a8:	4013      	ands	r3, r2
 80028aa:	d010      	beq.n	80028ce <main+0x26ae>
 80028ac:	4ba7      	ldr	r3, [pc, #668]	; (8002b4c <main+0x292c>)
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	2202      	movs	r2, #2
 80028b2:	4013      	ands	r3, r2
 80028b4:	d00b      	beq.n	80028ce <main+0x26ae>
 80028b6:	4ba5      	ldr	r3, [pc, #660]	; (8002b4c <main+0x292c>)
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	2201      	movs	r2, #1
 80028bc:	4013      	ands	r3, r2
 80028be:	d006      	beq.n	80028ce <main+0x26ae>
 80028c0:	4ba1      	ldr	r3, [pc, #644]	; (8002b48 <main+0x2928>)
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	2220      	movs	r2, #32
 80028c6:	4013      	ands	r3, r2
 80028c8:	d001      	beq.n	80028ce <main+0x26ae>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <main+0x26b0>
 80028ce:	2300      	movs	r3, #0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d100      	bne.n	80028d6 <main+0x26b6>
 80028d4:	e0ab      	b.n	8002a2e <main+0x280e>
		{
			spi_state = 1;
 80028d6:	4b9a      	ldr	r3, [pc, #616]	; (8002b40 <main+0x2920>)
 80028d8:	2201      	movs	r2, #1
 80028da:	701a      	strb	r2, [r3, #0]

			/* Prisvaivaem massivy otpravlyaemomy po SPI znacheniya signalov, prinyatyh po UART--------------------------------------------*/
			spi_tx[0] = uart_rx_slice[47];
 80028dc:	4b9c      	ldr	r3, [pc, #624]	; (8002b50 <main+0x2930>)
 80028de:	222f      	movs	r2, #47	; 0x2f
 80028e0:	5c9a      	ldrb	r2, [r3, r2]
 80028e2:	4b9c      	ldr	r3, [pc, #624]	; (8002b54 <main+0x2934>)
 80028e4:	701a      	strb	r2, [r3, #0]
			spi_tx[1] = uart_rx_slice[48];
 80028e6:	4b9a      	ldr	r3, [pc, #616]	; (8002b50 <main+0x2930>)
 80028e8:	2230      	movs	r2, #48	; 0x30
 80028ea:	5c9a      	ldrb	r2, [r3, r2]
 80028ec:	4b99      	ldr	r3, [pc, #612]	; (8002b54 <main+0x2934>)
 80028ee:	705a      	strb	r2, [r3, #1]
			spi_tx[2] = uart_rx_slice[49];
 80028f0:	4b97      	ldr	r3, [pc, #604]	; (8002b50 <main+0x2930>)
 80028f2:	2231      	movs	r2, #49	; 0x31
 80028f4:	5c9a      	ldrb	r2, [r3, r2]
 80028f6:	4b97      	ldr	r3, [pc, #604]	; (8002b54 <main+0x2934>)
 80028f8:	709a      	strb	r2, [r3, #2]
			spi_tx[3] = uart_rx_slice[50];
 80028fa:	4b95      	ldr	r3, [pc, #596]	; (8002b50 <main+0x2930>)
 80028fc:	2232      	movs	r2, #50	; 0x32
 80028fe:	5c9a      	ldrb	r2, [r3, r2]
 8002900:	4b94      	ldr	r3, [pc, #592]	; (8002b54 <main+0x2934>)
 8002902:	70da      	strb	r2, [r3, #3]

			/* Schitayem kontrolnyu summy, i zapisyvaem v poslednii element massiva, otpravlyaemogo po SPI---------------------------------*/
			spi_tx[5] = spi_tx[0] + spi_tx[1] + spi_tx[2] + spi_tx[3] + spi_tx[4];
 8002904:	4b93      	ldr	r3, [pc, #588]	; (8002b54 <main+0x2934>)
 8002906:	781a      	ldrb	r2, [r3, #0]
 8002908:	4b92      	ldr	r3, [pc, #584]	; (8002b54 <main+0x2934>)
 800290a:	785b      	ldrb	r3, [r3, #1]
 800290c:	18d3      	adds	r3, r2, r3
 800290e:	b2da      	uxtb	r2, r3
 8002910:	4b90      	ldr	r3, [pc, #576]	; (8002b54 <main+0x2934>)
 8002912:	789b      	ldrb	r3, [r3, #2]
 8002914:	18d3      	adds	r3, r2, r3
 8002916:	b2da      	uxtb	r2, r3
 8002918:	4b8e      	ldr	r3, [pc, #568]	; (8002b54 <main+0x2934>)
 800291a:	78db      	ldrb	r3, [r3, #3]
 800291c:	18d3      	adds	r3, r2, r3
 800291e:	b2da      	uxtb	r2, r3
 8002920:	4b8c      	ldr	r3, [pc, #560]	; (8002b54 <main+0x2934>)
 8002922:	791b      	ldrb	r3, [r3, #4]
 8002924:	18d3      	adds	r3, r2, r3
 8002926:	b2da      	uxtb	r2, r3
 8002928:	4b8a      	ldr	r3, [pc, #552]	; (8002b54 <main+0x2934>)
 800292a:	715a      	strb	r2, [r3, #5]
			uart_rx_ready = 0;
 800292c:	4b8a      	ldr	r3, [pc, #552]	; (8002b58 <main+0x2938>)
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]

			/* Opyskaem nogy CS, i proizvodim priemo-peredachu po SPI----------------------------------------------------------------------*/
			GPIOC->BRR = (1<<5);
 8002932:	4b85      	ldr	r3, [pc, #532]	; (8002b48 <main+0x2928>)
 8002934:	2220      	movs	r2, #32
 8002936:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*)spi_tx, (uint8_t*)spi_rx, 0x06);
 8002938:	4a88      	ldr	r2, [pc, #544]	; (8002b5c <main+0x293c>)
 800293a:	4986      	ldr	r1, [pc, #536]	; (8002b54 <main+0x2934>)
 800293c:	4888      	ldr	r0, [pc, #544]	; (8002b60 <main+0x2940>)
 800293e:	2306      	movs	r3, #6
 8002940:	f002 f90c 	bl	8004b5c <HAL_SPI_TransmitReceive_IT>

			/* Platy vstavili v port ------------------------------------------------------------------------------------------------------*/
			if(board_11_type != 0x00 && (last_port_state & (1<<10)) == 0x00)
 8002944:	4b87      	ldr	r3, [pc, #540]	; (8002b64 <main+0x2944>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d018      	beq.n	800297e <main+0x275e>
 800294c:	4b86      	ldr	r3, [pc, #536]	; (8002b68 <main+0x2948>)
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	001a      	movs	r2, r3
 8002952:	2380      	movs	r3, #128	; 0x80
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4013      	ands	r3, r2
 8002958:	d111      	bne.n	800297e <main+0x275e>
			{
				uart_tx   [0x04] &= ~ (1 << 2); // Zapis 0 v bity sostoyaniya porta
 800295a:	4b84      	ldr	r3, [pc, #528]	; (8002b6c <main+0x294c>)
 800295c:	791b      	ldrb	r3, [r3, #4]
 800295e:	2204      	movs	r2, #4
 8002960:	4393      	bics	r3, r2
 8002962:	b2da      	uxtb	r2, r3
 8002964:	4b81      	ldr	r3, [pc, #516]	; (8002b6c <main+0x294c>)
 8002966:	711a      	strb	r2, [r3, #4]
				last_port_state |= (1 << 10); 	      // Poslednee sostoyanie ravno 1
 8002968:	4b7f      	ldr	r3, [pc, #508]	; (8002b68 <main+0x2948>)
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	2280      	movs	r2, #128	; 0x80
 800296e:	00d2      	lsls	r2, r2, #3
 8002970:	4313      	orrs	r3, r2
 8002972:	b29a      	uxth	r2, r3
 8002974:	4b7c      	ldr	r3, [pc, #496]	; (8002b68 <main+0x2948>)
 8002976:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;		      // Razreshaem peredachy
 8002978:	4b7d      	ldr	r3, [pc, #500]	; (8002b70 <main+0x2950>)
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
			}
			/* ----------------------------------------------------------------------------------------------------------------------------*/


			/* Platy dostali iz porta -----------------------------------------------------------------------------------------------------*/
			if(board_11_type == 0x00 && (last_port_state & (1<<10)) != 0x00)
 800297e:	4b79      	ldr	r3, [pc, #484]	; (8002b64 <main+0x2944>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d117      	bne.n	80029b6 <main+0x2796>
 8002986:	4b78      	ldr	r3, [pc, #480]	; (8002b68 <main+0x2948>)
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	001a      	movs	r2, r3
 800298c:	2380      	movs	r3, #128	; 0x80
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4013      	ands	r3, r2
 8002992:	d010      	beq.n	80029b6 <main+0x2796>
			{
				uart_tx   [0x04] |= (1 << 2); // Zapis 1 v bity sostoyaniya porta
 8002994:	4b75      	ldr	r3, [pc, #468]	; (8002b6c <main+0x294c>)
 8002996:	791b      	ldrb	r3, [r3, #4]
 8002998:	2204      	movs	r2, #4
 800299a:	4313      	orrs	r3, r2
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4b73      	ldr	r3, [pc, #460]	; (8002b6c <main+0x294c>)
 80029a0:	711a      	strb	r2, [r3, #4]
				last_port_state &= ~ (1 << 10);       // Poslednee sostoyanie ravno 0
 80029a2:	4b71      	ldr	r3, [pc, #452]	; (8002b68 <main+0x2948>)
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	4a73      	ldr	r2, [pc, #460]	; (8002b74 <main+0x2954>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	4b6e      	ldr	r3, [pc, #440]	; (8002b68 <main+0x2948>)
 80029ae:	801a      	strh	r2, [r3, #0]
				uart_tx_on = 1;	      // Razreshaem peredachy
 80029b0:	4b6f      	ldr	r3, [pc, #444]	; (8002b70 <main+0x2950>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]
			}
			/* ----------------------------------------------------------------------------------------------------------------------------*/

			/* Otpravka massiva pri izmenenii v signale -----------------------------------------------------------------------------------*/
			if (last_sig_p_11[0] != uart_tx[45])
 80029b6:	4b70      	ldr	r3, [pc, #448]	; (8002b78 <main+0x2958>)
 80029b8:	781a      	ldrb	r2, [r3, #0]
 80029ba:	4b6c      	ldr	r3, [pc, #432]	; (8002b6c <main+0x294c>)
 80029bc:	212d      	movs	r1, #45	; 0x2d
 80029be:	5c5b      	ldrb	r3, [r3, r1]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d007      	beq.n	80029d4 <main+0x27b4>
			{
				last_sig_p_11[0] = uart_tx[45];
 80029c4:	4b69      	ldr	r3, [pc, #420]	; (8002b6c <main+0x294c>)
 80029c6:	222d      	movs	r2, #45	; 0x2d
 80029c8:	5c9a      	ldrb	r2, [r3, r2]
 80029ca:	4b6b      	ldr	r3, [pc, #428]	; (8002b78 <main+0x2958>)
 80029cc:	701a      	strb	r2, [r3, #0]
				uart_tx_on = 1;
 80029ce:	4b68      	ldr	r3, [pc, #416]	; (8002b70 <main+0x2950>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_11[1] != uart_tx[46])
 80029d4:	4b68      	ldr	r3, [pc, #416]	; (8002b78 <main+0x2958>)
 80029d6:	785a      	ldrb	r2, [r3, #1]
 80029d8:	4b64      	ldr	r3, [pc, #400]	; (8002b6c <main+0x294c>)
 80029da:	212e      	movs	r1, #46	; 0x2e
 80029dc:	5c5b      	ldrb	r3, [r3, r1]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d007      	beq.n	80029f2 <main+0x27d2>
			{
				last_sig_p_11[1] = uart_tx[46];
 80029e2:	4b62      	ldr	r3, [pc, #392]	; (8002b6c <main+0x294c>)
 80029e4:	222e      	movs	r2, #46	; 0x2e
 80029e6:	5c9a      	ldrb	r2, [r3, r2]
 80029e8:	4b63      	ldr	r3, [pc, #396]	; (8002b78 <main+0x2958>)
 80029ea:	705a      	strb	r2, [r3, #1]
				uart_tx_on = 1;
 80029ec:	4b60      	ldr	r3, [pc, #384]	; (8002b70 <main+0x2950>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_11[2] != uart_tx[47])
 80029f2:	4b61      	ldr	r3, [pc, #388]	; (8002b78 <main+0x2958>)
 80029f4:	789a      	ldrb	r2, [r3, #2]
 80029f6:	4b5d      	ldr	r3, [pc, #372]	; (8002b6c <main+0x294c>)
 80029f8:	212f      	movs	r1, #47	; 0x2f
 80029fa:	5c5b      	ldrb	r3, [r3, r1]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d007      	beq.n	8002a10 <main+0x27f0>
			{
				last_sig_p_11[2] = uart_tx[47];
 8002a00:	4b5a      	ldr	r3, [pc, #360]	; (8002b6c <main+0x294c>)
 8002a02:	222f      	movs	r2, #47	; 0x2f
 8002a04:	5c9a      	ldrb	r2, [r3, r2]
 8002a06:	4b5c      	ldr	r3, [pc, #368]	; (8002b78 <main+0x2958>)
 8002a08:	709a      	strb	r2, [r3, #2]
				uart_tx_on = 1;
 8002a0a:	4b59      	ldr	r3, [pc, #356]	; (8002b70 <main+0x2950>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]
			}
			if (last_sig_p_11[3] != uart_tx[48])
 8002a10:	4b59      	ldr	r3, [pc, #356]	; (8002b78 <main+0x2958>)
 8002a12:	78da      	ldrb	r2, [r3, #3]
 8002a14:	4b55      	ldr	r3, [pc, #340]	; (8002b6c <main+0x294c>)
 8002a16:	2130      	movs	r1, #48	; 0x30
 8002a18:	5c5b      	ldrb	r3, [r3, r1]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d007      	beq.n	8002a2e <main+0x280e>
			{
				last_sig_p_11[3] = uart_tx[48];
 8002a1e:	4b53      	ldr	r3, [pc, #332]	; (8002b6c <main+0x294c>)
 8002a20:	2230      	movs	r2, #48	; 0x30
 8002a22:	5c9a      	ldrb	r2, [r3, r2]
 8002a24:	4b54      	ldr	r3, [pc, #336]	; (8002b78 <main+0x2958>)
 8002a26:	70da      	strb	r2, [r3, #3]
				uart_tx_on = 1;
 8002a28:	4b51      	ldr	r3, [pc, #324]	; (8002b70 <main+0x2950>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	701a      	strb	r2, [r3, #0]
			}


		}

		if(spi_state == 2 && spi_port == 12 && (GPIOC->IDR & (1<<9)) != 0x00 && (GPIOC->IDR & (1<<8)) != 0x00 && (GPIOC->IDR & (1<<7)) != 0x00 && (GPIOC->IDR & (1<<6)) != 0x00 && (GPIOB->IDR & (1<<15)) != 0x00 && (GPIOB->IDR & (1<<14)) != 0x00 && (GPIOB->IDR & (1<<13)) != 0x00 && (GPIOB->IDR & (1<<12)) != 0x00 && (GPIOB->IDR & (1<<2)) != 0x00 && (GPIOB->IDR & (1<<1)) != 0x00 && (GPIOB->IDR & (1<<0)) != 0x00 && (GPIOC->IDR & (1<<5)) != 0x00)
 8002a2e:	4b44      	ldr	r3, [pc, #272]	; (8002b40 <main+0x2920>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d147      	bne.n	8002ac6 <main+0x28a6>
 8002a36:	4b43      	ldr	r3, [pc, #268]	; (8002b44 <main+0x2924>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b0c      	cmp	r3, #12
 8002a3c:	d143      	bne.n	8002ac6 <main+0x28a6>
 8002a3e:	4b42      	ldr	r3, [pc, #264]	; (8002b48 <main+0x2928>)
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	2380      	movs	r3, #128	; 0x80
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4013      	ands	r3, r2
 8002a48:	d03d      	beq.n	8002ac6 <main+0x28a6>
 8002a4a:	4b3f      	ldr	r3, [pc, #252]	; (8002b48 <main+0x2928>)
 8002a4c:	691a      	ldr	r2, [r3, #16]
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	4013      	ands	r3, r2
 8002a54:	d037      	beq.n	8002ac6 <main+0x28a6>
 8002a56:	4b3c      	ldr	r3, [pc, #240]	; (8002b48 <main+0x2928>)
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2280      	movs	r2, #128	; 0x80
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d032      	beq.n	8002ac6 <main+0x28a6>
 8002a60:	4b39      	ldr	r3, [pc, #228]	; (8002b48 <main+0x2928>)
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	2240      	movs	r2, #64	; 0x40
 8002a66:	4013      	ands	r3, r2
 8002a68:	d02d      	beq.n	8002ac6 <main+0x28a6>
 8002a6a:	4b38      	ldr	r3, [pc, #224]	; (8002b4c <main+0x292c>)
 8002a6c:	691a      	ldr	r2, [r3, #16]
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	021b      	lsls	r3, r3, #8
 8002a72:	4013      	ands	r3, r2
 8002a74:	d027      	beq.n	8002ac6 <main+0x28a6>
 8002a76:	4b35      	ldr	r3, [pc, #212]	; (8002b4c <main+0x292c>)
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	2380      	movs	r3, #128	; 0x80
 8002a7c:	01db      	lsls	r3, r3, #7
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d021      	beq.n	8002ac6 <main+0x28a6>
 8002a82:	4b32      	ldr	r3, [pc, #200]	; (8002b4c <main+0x292c>)
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	2380      	movs	r3, #128	; 0x80
 8002a88:	019b      	lsls	r3, r3, #6
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d01b      	beq.n	8002ac6 <main+0x28a6>
 8002a8e:	4b2f      	ldr	r3, [pc, #188]	; (8002b4c <main+0x292c>)
 8002a90:	691a      	ldr	r2, [r3, #16]
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	015b      	lsls	r3, r3, #5
 8002a96:	4013      	ands	r3, r2
 8002a98:	d015      	beq.n	8002ac6 <main+0x28a6>
 8002a9a:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <main+0x292c>)
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d010      	beq.n	8002ac6 <main+0x28a6>
 8002aa4:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <main+0x292c>)
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d00b      	beq.n	8002ac6 <main+0x28a6>
 8002aae:	4b27      	ldr	r3, [pc, #156]	; (8002b4c <main+0x292c>)
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d006      	beq.n	8002ac6 <main+0x28a6>
 8002ab8:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <main+0x2928>)
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2220      	movs	r2, #32
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d001      	beq.n	8002ac6 <main+0x28a6>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <main+0x28a8>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d05e      	beq.n	8002b8a <main+0x296a>
		{
			spi_rx_ctrl_summ = spi_rx[0] + spi_rx[1] + spi_rx[2] + spi_rx[3] + spi_rx[4];
 8002acc:	4b23      	ldr	r3, [pc, #140]	; (8002b5c <main+0x293c>)
 8002ace:	781a      	ldrb	r2, [r3, #0]
 8002ad0:	4b22      	ldr	r3, [pc, #136]	; (8002b5c <main+0x293c>)
 8002ad2:	785b      	ldrb	r3, [r3, #1]
 8002ad4:	18d3      	adds	r3, r2, r3
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <main+0x293c>)
 8002ada:	789b      	ldrb	r3, [r3, #2]
 8002adc:	18d3      	adds	r3, r2, r3
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <main+0x293c>)
 8002ae2:	78db      	ldrb	r3, [r3, #3]
 8002ae4:	18d3      	adds	r3, r2, r3
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <main+0x293c>)
 8002aea:	791b      	ldrb	r3, [r3, #4]
 8002aec:	18d3      	adds	r3, r2, r3
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <main+0x295c>)
 8002af2:	701a      	strb	r2, [r3, #0]

			if(spi_rx_ctrl_summ == spi_rx[5])
 8002af4:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <main+0x293c>)
 8002af6:	795a      	ldrb	r2, [r3, #5]
 8002af8:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <main+0x295c>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d141      	bne.n	8002b84 <main+0x2964>
			{
				spi_state = 0;
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <main+0x2920>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]
				spi_port = 1;
 8002b06:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <main+0x2924>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]

				board_12_type = spi_rx[4];
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <main+0x293c>)
 8002b0e:	791a      	ldrb	r2, [r3, #4]
 8002b10:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <main+0x2960>)
 8002b12:	701a      	strb	r2, [r3, #0]
				uart_tx [49]  = spi_rx[0];
 8002b14:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <main+0x293c>)
 8002b16:	7819      	ldrb	r1, [r3, #0]
 8002b18:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <main+0x294c>)
 8002b1a:	2231      	movs	r2, #49	; 0x31
 8002b1c:	5499      	strb	r1, [r3, r2]
				uart_tx [50]  = spi_rx[1];
 8002b1e:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <main+0x293c>)
 8002b20:	7859      	ldrb	r1, [r3, #1]
 8002b22:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <main+0x294c>)
 8002b24:	2232      	movs	r2, #50	; 0x32
 8002b26:	5499      	strb	r1, [r3, r2]
				uart_tx [51]  = spi_rx[2];
 8002b28:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <main+0x293c>)
 8002b2a:	7899      	ldrb	r1, [r3, #2]
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <main+0x294c>)
 8002b2e:	2233      	movs	r2, #51	; 0x33
 8002b30:	5499      	strb	r1, [r3, r2]
				uart_tx [52]  = spi_rx[3];
 8002b32:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <main+0x293c>)
 8002b34:	78d9      	ldrb	r1, [r3, #3]
 8002b36:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <main+0x294c>)
 8002b38:	2234      	movs	r2, #52	; 0x34
 8002b3a:	5499      	strb	r1, [r3, r2]
 8002b3c:	e025      	b.n	8002b8a <main+0x296a>
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	20000208 	.word	0x20000208
 8002b44:	20000000 	.word	0x20000000
 8002b48:	48000800 	.word	0x48000800
 8002b4c:	48000400 	.word	0x48000400
 8002b50:	200002e0 	.word	0x200002e0
 8002b54:	20000200 	.word	0x20000200
 8002b58:	20000384 	.word	0x20000384
 8002b5c:	200001f8 	.word	0x200001f8
 8002b60:	2000005c 	.word	0x2000005c
 8002b64:	20000213 	.word	0x20000213
 8002b68:	20000350 	.word	0x20000350
 8002b6c:	20000004 	.word	0x20000004
 8002b70:	2000003b 	.word	0x2000003b
 8002b74:	fffffbff 	.word	0xfffffbff
 8002b78:	2000037c 	.word	0x2000037c
 8002b7c:	20000206 	.word	0x20000206
 8002b80:	20000214 	.word	0x20000214
			}
			else
			{
				spi_state = 0;
 8002b84:	4bfa      	ldr	r3, [pc, #1000]	; (8002f70 <main+0x2d50>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]





		if(tim_6_flag == 1 && uart_tx_on == 0)
 8002b8a:	4bfa      	ldr	r3, [pc, #1000]	; (8002f74 <main+0x2d54>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d109      	bne.n	8002ba6 <main+0x2986>
 8002b92:	4bf9      	ldr	r3, [pc, #996]	; (8002f78 <main+0x2d58>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d105      	bne.n	8002ba6 <main+0x2986>
		{
			tim_6_flag = 0;
 8002b9a:	4bf6      	ldr	r3, [pc, #984]	; (8002f74 <main+0x2d54>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
			uart_tx_on = 2;
 8002ba0:	4bf5      	ldr	r3, [pc, #980]	; (8002f78 <main+0x2d58>)
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	701a      	strb	r2, [r3, #0]
		}

	  /* Peredacha massiva "uart_tx" po UART ------------------------------------------------------------------------------------------*/
		if(uart_tx_on != 0 && uart_tx_state == 0) //&& HAL_UART_GetState(&huart1) == HAL_UART_STATE_READY)
 8002ba6:	4bf4      	ldr	r3, [pc, #976]	; (8002f78 <main+0x2d58>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <main+0x2992>
 8002bae:	f7fd fb59 	bl	8000264 <main+0x44>
 8002bb2:	4bf2      	ldr	r3, [pc, #968]	; (8002f7c <main+0x2d5c>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <main+0x299e>
 8002bba:	f7fd fb53 	bl	8000264 <main+0x44>
		{
			if(uart_tx_on == 1 || uart_tx_on == 2)
 8002bbe:	4bee      	ldr	r3, [pc, #952]	; (8002f78 <main+0x2d58>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d004      	beq.n	8002bd0 <main+0x29b0>
 8002bc6:	4bec      	ldr	r3, [pc, #944]	; (8002f78 <main+0x2d58>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d000      	beq.n	8002bd0 <main+0x29b0>
 8002bce:	e240      	b.n	8003052 <main+0x2e32>
			{

				uart_tx_slice[0]  = 0x55 ;
 8002bd0:	4beb      	ldr	r3, [pc, #940]	; (8002f80 <main+0x2d60>)
 8002bd2:	2255      	movs	r2, #85	; 0x55
 8002bd4:	701a      	strb	r2, [r3, #0]
				uart_tx_slice[1]  = 0xAA ;
 8002bd6:	4bea      	ldr	r3, [pc, #936]	; (8002f80 <main+0x2d60>)
 8002bd8:	22aa      	movs	r2, #170	; 0xaa
 8002bda:	705a      	strb	r2, [r3, #1]
				uart_tx_slice[2]  = uart_tx[2] ;
 8002bdc:	4be9      	ldr	r3, [pc, #932]	; (8002f84 <main+0x2d64>)
 8002bde:	789a      	ldrb	r2, [r3, #2]
 8002be0:	4be7      	ldr	r3, [pc, #924]	; (8002f80 <main+0x2d60>)
 8002be2:	709a      	strb	r2, [r3, #2]
				uart_tx_slice[3]  = uart_tx[3] ;
 8002be4:	4be7      	ldr	r3, [pc, #924]	; (8002f84 <main+0x2d64>)
 8002be6:	78da      	ldrb	r2, [r3, #3]
 8002be8:	4be5      	ldr	r3, [pc, #916]	; (8002f80 <main+0x2d60>)
 8002bea:	70da      	strb	r2, [r3, #3]
				uart_tx_slice[4]  = uart_tx[4] ;
 8002bec:	4be5      	ldr	r3, [pc, #916]	; (8002f84 <main+0x2d64>)
 8002bee:	791a      	ldrb	r2, [r3, #4]
 8002bf0:	4be3      	ldr	r3, [pc, #908]	; (8002f80 <main+0x2d60>)
 8002bf2:	711a      	strb	r2, [r3, #4]
				uart_tx_slice[5]  = uart_tx[5] ;
 8002bf4:	4be3      	ldr	r3, [pc, #908]	; (8002f84 <main+0x2d64>)
 8002bf6:	795a      	ldrb	r2, [r3, #5]
 8002bf8:	4be1      	ldr	r3, [pc, #900]	; (8002f80 <main+0x2d60>)
 8002bfa:	715a      	strb	r2, [r3, #5]
				uart_tx_slice[6]  = uart_tx[6] ;
 8002bfc:	4be1      	ldr	r3, [pc, #900]	; (8002f84 <main+0x2d64>)
 8002bfe:	799a      	ldrb	r2, [r3, #6]
 8002c00:	4bdf      	ldr	r3, [pc, #892]	; (8002f80 <main+0x2d60>)
 8002c02:	719a      	strb	r2, [r3, #6]
				uart_tx_slice[7]  = uart_tx[7] ;
 8002c04:	4bdf      	ldr	r3, [pc, #892]	; (8002f84 <main+0x2d64>)
 8002c06:	79da      	ldrb	r2, [r3, #7]
 8002c08:	4bdd      	ldr	r3, [pc, #884]	; (8002f80 <main+0x2d60>)
 8002c0a:	71da      	strb	r2, [r3, #7]
				uart_tx_slice[8]  = uart_tx[8] ;
 8002c0c:	4bdd      	ldr	r3, [pc, #884]	; (8002f84 <main+0x2d64>)
 8002c0e:	7a1a      	ldrb	r2, [r3, #8]
 8002c10:	4bdb      	ldr	r3, [pc, #876]	; (8002f80 <main+0x2d60>)
 8002c12:	721a      	strb	r2, [r3, #8]
				uart_tx_slice[9]  = uart_tx[9] ;
 8002c14:	4bdb      	ldr	r3, [pc, #876]	; (8002f84 <main+0x2d64>)
 8002c16:	7a5a      	ldrb	r2, [r3, #9]
 8002c18:	4bd9      	ldr	r3, [pc, #868]	; (8002f80 <main+0x2d60>)
 8002c1a:	725a      	strb	r2, [r3, #9]
				uart_tx_slice[10] = uart_tx[10];
 8002c1c:	4bd9      	ldr	r3, [pc, #868]	; (8002f84 <main+0x2d64>)
 8002c1e:	7a9a      	ldrb	r2, [r3, #10]
 8002c20:	4bd7      	ldr	r3, [pc, #860]	; (8002f80 <main+0x2d60>)
 8002c22:	729a      	strb	r2, [r3, #10]
				uart_tx_slice[11] = uart_tx[11];
 8002c24:	4bd7      	ldr	r3, [pc, #860]	; (8002f84 <main+0x2d64>)
 8002c26:	7ada      	ldrb	r2, [r3, #11]
 8002c28:	4bd5      	ldr	r3, [pc, #852]	; (8002f80 <main+0x2d60>)
 8002c2a:	72da      	strb	r2, [r3, #11]
				uart_tx_slice[12] = uart_tx[12];
 8002c2c:	4bd5      	ldr	r3, [pc, #852]	; (8002f84 <main+0x2d64>)
 8002c2e:	7b1a      	ldrb	r2, [r3, #12]
 8002c30:	4bd3      	ldr	r3, [pc, #844]	; (8002f80 <main+0x2d60>)
 8002c32:	731a      	strb	r2, [r3, #12]
				uart_tx_slice[13] = uart_tx[13];
 8002c34:	4bd3      	ldr	r3, [pc, #844]	; (8002f84 <main+0x2d64>)
 8002c36:	7b5a      	ldrb	r2, [r3, #13]
 8002c38:	4bd1      	ldr	r3, [pc, #836]	; (8002f80 <main+0x2d60>)
 8002c3a:	735a      	strb	r2, [r3, #13]
				uart_tx_slice[14] = uart_tx[14];
 8002c3c:	4bd1      	ldr	r3, [pc, #836]	; (8002f84 <main+0x2d64>)
 8002c3e:	7b9a      	ldrb	r2, [r3, #14]
 8002c40:	4bcf      	ldr	r3, [pc, #828]	; (8002f80 <main+0x2d60>)
 8002c42:	739a      	strb	r2, [r3, #14]
				uart_tx_slice[15] = uart_tx[15];
 8002c44:	4bcf      	ldr	r3, [pc, #828]	; (8002f84 <main+0x2d64>)
 8002c46:	7bda      	ldrb	r2, [r3, #15]
 8002c48:	4bcd      	ldr	r3, [pc, #820]	; (8002f80 <main+0x2d60>)
 8002c4a:	73da      	strb	r2, [r3, #15]
				uart_tx_slice[16] = uart_tx[16];
 8002c4c:	4bcd      	ldr	r3, [pc, #820]	; (8002f84 <main+0x2d64>)
 8002c4e:	7c1a      	ldrb	r2, [r3, #16]
 8002c50:	4bcb      	ldr	r3, [pc, #812]	; (8002f80 <main+0x2d60>)
 8002c52:	741a      	strb	r2, [r3, #16]
				uart_tx_slice[17] = uart_tx[17];
 8002c54:	4bcb      	ldr	r3, [pc, #812]	; (8002f84 <main+0x2d64>)
 8002c56:	7c5a      	ldrb	r2, [r3, #17]
 8002c58:	4bc9      	ldr	r3, [pc, #804]	; (8002f80 <main+0x2d60>)
 8002c5a:	745a      	strb	r2, [r3, #17]
				uart_tx_slice[18] = uart_tx[18];
 8002c5c:	4bc9      	ldr	r3, [pc, #804]	; (8002f84 <main+0x2d64>)
 8002c5e:	7c9a      	ldrb	r2, [r3, #18]
 8002c60:	4bc7      	ldr	r3, [pc, #796]	; (8002f80 <main+0x2d60>)
 8002c62:	749a      	strb	r2, [r3, #18]
				uart_tx_slice[19] = uart_tx[19];
 8002c64:	4bc7      	ldr	r3, [pc, #796]	; (8002f84 <main+0x2d64>)
 8002c66:	7cda      	ldrb	r2, [r3, #19]
 8002c68:	4bc5      	ldr	r3, [pc, #788]	; (8002f80 <main+0x2d60>)
 8002c6a:	74da      	strb	r2, [r3, #19]
				uart_tx_slice[20] = uart_tx[20];
 8002c6c:	4bc5      	ldr	r3, [pc, #788]	; (8002f84 <main+0x2d64>)
 8002c6e:	7d1a      	ldrb	r2, [r3, #20]
 8002c70:	4bc3      	ldr	r3, [pc, #780]	; (8002f80 <main+0x2d60>)
 8002c72:	751a      	strb	r2, [r3, #20]
				uart_tx_slice[21] = uart_tx[21];
 8002c74:	4bc3      	ldr	r3, [pc, #780]	; (8002f84 <main+0x2d64>)
 8002c76:	7d5a      	ldrb	r2, [r3, #21]
 8002c78:	4bc1      	ldr	r3, [pc, #772]	; (8002f80 <main+0x2d60>)
 8002c7a:	755a      	strb	r2, [r3, #21]
				uart_tx_slice[22] = uart_tx[22];
 8002c7c:	4bc1      	ldr	r3, [pc, #772]	; (8002f84 <main+0x2d64>)
 8002c7e:	7d9a      	ldrb	r2, [r3, #22]
 8002c80:	4bbf      	ldr	r3, [pc, #764]	; (8002f80 <main+0x2d60>)
 8002c82:	759a      	strb	r2, [r3, #22]
				uart_tx_slice[23] = uart_tx[23];
 8002c84:	4bbf      	ldr	r3, [pc, #764]	; (8002f84 <main+0x2d64>)
 8002c86:	7dda      	ldrb	r2, [r3, #23]
 8002c88:	4bbd      	ldr	r3, [pc, #756]	; (8002f80 <main+0x2d60>)
 8002c8a:	75da      	strb	r2, [r3, #23]
				uart_tx_slice[24] = uart_tx[24];
 8002c8c:	4bbd      	ldr	r3, [pc, #756]	; (8002f84 <main+0x2d64>)
 8002c8e:	7e1a      	ldrb	r2, [r3, #24]
 8002c90:	4bbb      	ldr	r3, [pc, #748]	; (8002f80 <main+0x2d60>)
 8002c92:	761a      	strb	r2, [r3, #24]
				uart_tx_slice[25] = uart_tx[25];
 8002c94:	4bbb      	ldr	r3, [pc, #748]	; (8002f84 <main+0x2d64>)
 8002c96:	7e5a      	ldrb	r2, [r3, #25]
 8002c98:	4bb9      	ldr	r3, [pc, #740]	; (8002f80 <main+0x2d60>)
 8002c9a:	765a      	strb	r2, [r3, #25]
				uart_tx_slice[26] = uart_tx[26];
 8002c9c:	4bb9      	ldr	r3, [pc, #740]	; (8002f84 <main+0x2d64>)
 8002c9e:	7e9a      	ldrb	r2, [r3, #26]
 8002ca0:	4bb7      	ldr	r3, [pc, #732]	; (8002f80 <main+0x2d60>)
 8002ca2:	769a      	strb	r2, [r3, #26]
				uart_tx_slice[27] = uart_tx[27];
 8002ca4:	4bb7      	ldr	r3, [pc, #732]	; (8002f84 <main+0x2d64>)
 8002ca6:	7eda      	ldrb	r2, [r3, #27]
 8002ca8:	4bb5      	ldr	r3, [pc, #724]	; (8002f80 <main+0x2d60>)
 8002caa:	76da      	strb	r2, [r3, #27]
				uart_tx_slice[28] = uart_tx[28];
 8002cac:	4bb5      	ldr	r3, [pc, #724]	; (8002f84 <main+0x2d64>)
 8002cae:	7f1a      	ldrb	r2, [r3, #28]
 8002cb0:	4bb3      	ldr	r3, [pc, #716]	; (8002f80 <main+0x2d60>)
 8002cb2:	771a      	strb	r2, [r3, #28]
				uart_tx_slice[29] = uart_tx[29];
 8002cb4:	4bb3      	ldr	r3, [pc, #716]	; (8002f84 <main+0x2d64>)
 8002cb6:	7f5a      	ldrb	r2, [r3, #29]
 8002cb8:	4bb1      	ldr	r3, [pc, #708]	; (8002f80 <main+0x2d60>)
 8002cba:	775a      	strb	r2, [r3, #29]
				uart_tx_slice[30] = uart_tx[30];
 8002cbc:	4bb1      	ldr	r3, [pc, #708]	; (8002f84 <main+0x2d64>)
 8002cbe:	7f9a      	ldrb	r2, [r3, #30]
 8002cc0:	4baf      	ldr	r3, [pc, #700]	; (8002f80 <main+0x2d60>)
 8002cc2:	779a      	strb	r2, [r3, #30]
				uart_tx_slice[31] = uart_tx[31];
 8002cc4:	4baf      	ldr	r3, [pc, #700]	; (8002f84 <main+0x2d64>)
 8002cc6:	7fda      	ldrb	r2, [r3, #31]
 8002cc8:	4bad      	ldr	r3, [pc, #692]	; (8002f80 <main+0x2d60>)
 8002cca:	77da      	strb	r2, [r3, #31]
				uart_tx_slice[32] = uart_tx[32];
 8002ccc:	4bad      	ldr	r3, [pc, #692]	; (8002f84 <main+0x2d64>)
 8002cce:	2220      	movs	r2, #32
 8002cd0:	5c99      	ldrb	r1, [r3, r2]
 8002cd2:	4bab      	ldr	r3, [pc, #684]	; (8002f80 <main+0x2d60>)
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[33] = uart_tx[33];
 8002cd8:	4baa      	ldr	r3, [pc, #680]	; (8002f84 <main+0x2d64>)
 8002cda:	2221      	movs	r2, #33	; 0x21
 8002cdc:	5c99      	ldrb	r1, [r3, r2]
 8002cde:	4ba8      	ldr	r3, [pc, #672]	; (8002f80 <main+0x2d60>)
 8002ce0:	2221      	movs	r2, #33	; 0x21
 8002ce2:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[34] = uart_tx[34];
 8002ce4:	4ba7      	ldr	r3, [pc, #668]	; (8002f84 <main+0x2d64>)
 8002ce6:	2222      	movs	r2, #34	; 0x22
 8002ce8:	5c99      	ldrb	r1, [r3, r2]
 8002cea:	4ba5      	ldr	r3, [pc, #660]	; (8002f80 <main+0x2d60>)
 8002cec:	2222      	movs	r2, #34	; 0x22
 8002cee:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[35] = uart_tx[35];
 8002cf0:	4ba4      	ldr	r3, [pc, #656]	; (8002f84 <main+0x2d64>)
 8002cf2:	2223      	movs	r2, #35	; 0x23
 8002cf4:	5c99      	ldrb	r1, [r3, r2]
 8002cf6:	4ba2      	ldr	r3, [pc, #648]	; (8002f80 <main+0x2d60>)
 8002cf8:	2223      	movs	r2, #35	; 0x23
 8002cfa:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[36] = uart_tx[36];
 8002cfc:	4ba1      	ldr	r3, [pc, #644]	; (8002f84 <main+0x2d64>)
 8002cfe:	2224      	movs	r2, #36	; 0x24
 8002d00:	5c99      	ldrb	r1, [r3, r2]
 8002d02:	4b9f      	ldr	r3, [pc, #636]	; (8002f80 <main+0x2d60>)
 8002d04:	2224      	movs	r2, #36	; 0x24
 8002d06:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[37] = uart_tx[37];
 8002d08:	4b9e      	ldr	r3, [pc, #632]	; (8002f84 <main+0x2d64>)
 8002d0a:	2225      	movs	r2, #37	; 0x25
 8002d0c:	5c99      	ldrb	r1, [r3, r2]
 8002d0e:	4b9c      	ldr	r3, [pc, #624]	; (8002f80 <main+0x2d60>)
 8002d10:	2225      	movs	r2, #37	; 0x25
 8002d12:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[38] = uart_tx[38];
 8002d14:	4b9b      	ldr	r3, [pc, #620]	; (8002f84 <main+0x2d64>)
 8002d16:	2226      	movs	r2, #38	; 0x26
 8002d18:	5c99      	ldrb	r1, [r3, r2]
 8002d1a:	4b99      	ldr	r3, [pc, #612]	; (8002f80 <main+0x2d60>)
 8002d1c:	2226      	movs	r2, #38	; 0x26
 8002d1e:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[39] = uart_tx[39];
 8002d20:	4b98      	ldr	r3, [pc, #608]	; (8002f84 <main+0x2d64>)
 8002d22:	2227      	movs	r2, #39	; 0x27
 8002d24:	5c99      	ldrb	r1, [r3, r2]
 8002d26:	4b96      	ldr	r3, [pc, #600]	; (8002f80 <main+0x2d60>)
 8002d28:	2227      	movs	r2, #39	; 0x27
 8002d2a:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[40] = uart_tx[40];
 8002d2c:	4b95      	ldr	r3, [pc, #596]	; (8002f84 <main+0x2d64>)
 8002d2e:	2228      	movs	r2, #40	; 0x28
 8002d30:	5c99      	ldrb	r1, [r3, r2]
 8002d32:	4b93      	ldr	r3, [pc, #588]	; (8002f80 <main+0x2d60>)
 8002d34:	2228      	movs	r2, #40	; 0x28
 8002d36:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[41] = uart_tx[41];
 8002d38:	4b92      	ldr	r3, [pc, #584]	; (8002f84 <main+0x2d64>)
 8002d3a:	2229      	movs	r2, #41	; 0x29
 8002d3c:	5c99      	ldrb	r1, [r3, r2]
 8002d3e:	4b90      	ldr	r3, [pc, #576]	; (8002f80 <main+0x2d60>)
 8002d40:	2229      	movs	r2, #41	; 0x29
 8002d42:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[42] = uart_tx[42];
 8002d44:	4b8f      	ldr	r3, [pc, #572]	; (8002f84 <main+0x2d64>)
 8002d46:	222a      	movs	r2, #42	; 0x2a
 8002d48:	5c99      	ldrb	r1, [r3, r2]
 8002d4a:	4b8d      	ldr	r3, [pc, #564]	; (8002f80 <main+0x2d60>)
 8002d4c:	222a      	movs	r2, #42	; 0x2a
 8002d4e:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[43] = uart_tx[43];
 8002d50:	4b8c      	ldr	r3, [pc, #560]	; (8002f84 <main+0x2d64>)
 8002d52:	222b      	movs	r2, #43	; 0x2b
 8002d54:	5c99      	ldrb	r1, [r3, r2]
 8002d56:	4b8a      	ldr	r3, [pc, #552]	; (8002f80 <main+0x2d60>)
 8002d58:	222b      	movs	r2, #43	; 0x2b
 8002d5a:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[44] = uart_tx[44];
 8002d5c:	4b89      	ldr	r3, [pc, #548]	; (8002f84 <main+0x2d64>)
 8002d5e:	222c      	movs	r2, #44	; 0x2c
 8002d60:	5c99      	ldrb	r1, [r3, r2]
 8002d62:	4b87      	ldr	r3, [pc, #540]	; (8002f80 <main+0x2d60>)
 8002d64:	222c      	movs	r2, #44	; 0x2c
 8002d66:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[45] = uart_tx[45];
 8002d68:	4b86      	ldr	r3, [pc, #536]	; (8002f84 <main+0x2d64>)
 8002d6a:	222d      	movs	r2, #45	; 0x2d
 8002d6c:	5c99      	ldrb	r1, [r3, r2]
 8002d6e:	4b84      	ldr	r3, [pc, #528]	; (8002f80 <main+0x2d60>)
 8002d70:	222d      	movs	r2, #45	; 0x2d
 8002d72:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[46] = uart_tx[46];
 8002d74:	4b83      	ldr	r3, [pc, #524]	; (8002f84 <main+0x2d64>)
 8002d76:	222e      	movs	r2, #46	; 0x2e
 8002d78:	5c99      	ldrb	r1, [r3, r2]
 8002d7a:	4b81      	ldr	r3, [pc, #516]	; (8002f80 <main+0x2d60>)
 8002d7c:	222e      	movs	r2, #46	; 0x2e
 8002d7e:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[47] = uart_tx[47];
 8002d80:	4b80      	ldr	r3, [pc, #512]	; (8002f84 <main+0x2d64>)
 8002d82:	222f      	movs	r2, #47	; 0x2f
 8002d84:	5c99      	ldrb	r1, [r3, r2]
 8002d86:	4b7e      	ldr	r3, [pc, #504]	; (8002f80 <main+0x2d60>)
 8002d88:	222f      	movs	r2, #47	; 0x2f
 8002d8a:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[48] = uart_tx[48];
 8002d8c:	4b7d      	ldr	r3, [pc, #500]	; (8002f84 <main+0x2d64>)
 8002d8e:	2230      	movs	r2, #48	; 0x30
 8002d90:	5c99      	ldrb	r1, [r3, r2]
 8002d92:	4b7b      	ldr	r3, [pc, #492]	; (8002f80 <main+0x2d60>)
 8002d94:	2230      	movs	r2, #48	; 0x30
 8002d96:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[49] = uart_tx[49];
 8002d98:	4b7a      	ldr	r3, [pc, #488]	; (8002f84 <main+0x2d64>)
 8002d9a:	2231      	movs	r2, #49	; 0x31
 8002d9c:	5c99      	ldrb	r1, [r3, r2]
 8002d9e:	4b78      	ldr	r3, [pc, #480]	; (8002f80 <main+0x2d60>)
 8002da0:	2231      	movs	r2, #49	; 0x31
 8002da2:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[50] = uart_tx[50];
 8002da4:	4b77      	ldr	r3, [pc, #476]	; (8002f84 <main+0x2d64>)
 8002da6:	2232      	movs	r2, #50	; 0x32
 8002da8:	5c99      	ldrb	r1, [r3, r2]
 8002daa:	4b75      	ldr	r3, [pc, #468]	; (8002f80 <main+0x2d60>)
 8002dac:	2232      	movs	r2, #50	; 0x32
 8002dae:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[51] = uart_tx[51];
 8002db0:	4b74      	ldr	r3, [pc, #464]	; (8002f84 <main+0x2d64>)
 8002db2:	2233      	movs	r2, #51	; 0x33
 8002db4:	5c99      	ldrb	r1, [r3, r2]
 8002db6:	4b72      	ldr	r3, [pc, #456]	; (8002f80 <main+0x2d60>)
 8002db8:	2233      	movs	r2, #51	; 0x33
 8002dba:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[52] = uart_tx[52];
 8002dbc:	4b71      	ldr	r3, [pc, #452]	; (8002f84 <main+0x2d64>)
 8002dbe:	2234      	movs	r2, #52	; 0x34
 8002dc0:	5c99      	ldrb	r1, [r3, r2]
 8002dc2:	4b6f      	ldr	r3, [pc, #444]	; (8002f80 <main+0x2d60>)
 8002dc4:	2234      	movs	r2, #52	; 0x34
 8002dc6:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[53] = uart_tx[53];
 8002dc8:	4b6e      	ldr	r3, [pc, #440]	; (8002f84 <main+0x2d64>)
 8002dca:	2235      	movs	r2, #53	; 0x35
 8002dcc:	5c99      	ldrb	r1, [r3, r2]
 8002dce:	4b6c      	ldr	r3, [pc, #432]	; (8002f80 <main+0x2d60>)
 8002dd0:	2235      	movs	r2, #53	; 0x35
 8002dd2:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[54] = uart_tx[54];
 8002dd4:	4b6b      	ldr	r3, [pc, #428]	; (8002f84 <main+0x2d64>)
 8002dd6:	2236      	movs	r2, #54	; 0x36
 8002dd8:	5c99      	ldrb	r1, [r3, r2]
 8002dda:	4b69      	ldr	r3, [pc, #420]	; (8002f80 <main+0x2d60>)
 8002ddc:	2236      	movs	r2, #54	; 0x36
 8002dde:	5499      	strb	r1, [r3, r2]

				uart_tx_ctrl_summ = 					uart_tx_slice[0]
 8002de0:	4b67      	ldr	r3, [pc, #412]	; (8002f80 <main+0x2d60>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	b29a      	uxth	r2, r3
								+	uart_tx_slice[1] 	+ uart_tx_slice[2]
 8002de6:	4b66      	ldr	r3, [pc, #408]	; (8002f80 <main+0x2d60>)
 8002de8:	785b      	ldrb	r3, [r3, #1]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	18d3      	adds	r3, r2, r3
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	4b63      	ldr	r3, [pc, #396]	; (8002f80 <main+0x2d60>)
 8002df2:	789b      	ldrb	r3, [r3, #2]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	18d3      	adds	r3, r2, r3
 8002df8:	b29a      	uxth	r2, r3
								+ uart_tx_slice[3] 	+ uart_tx_slice[4]
 8002dfa:	4b61      	ldr	r3, [pc, #388]	; (8002f80 <main+0x2d60>)
 8002dfc:	78db      	ldrb	r3, [r3, #3]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	18d3      	adds	r3, r2, r3
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	4b5e      	ldr	r3, [pc, #376]	; (8002f80 <main+0x2d60>)
 8002e06:	791b      	ldrb	r3, [r3, #4]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	18d3      	adds	r3, r2, r3
 8002e0c:	b29a      	uxth	r2, r3
								+	uart_tx_slice[5] 	+ uart_tx_slice[6]
 8002e0e:	4b5c      	ldr	r3, [pc, #368]	; (8002f80 <main+0x2d60>)
 8002e10:	795b      	ldrb	r3, [r3, #5]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	18d3      	adds	r3, r2, r3
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	4b59      	ldr	r3, [pc, #356]	; (8002f80 <main+0x2d60>)
 8002e1a:	799b      	ldrb	r3, [r3, #6]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	18d3      	adds	r3, r2, r3
 8002e20:	b29a      	uxth	r2, r3
								+ uart_tx_slice[7] 	+ uart_tx_slice[8]
 8002e22:	4b57      	ldr	r3, [pc, #348]	; (8002f80 <main+0x2d60>)
 8002e24:	79db      	ldrb	r3, [r3, #7]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	18d3      	adds	r3, r2, r3
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	4b54      	ldr	r3, [pc, #336]	; (8002f80 <main+0x2d60>)
 8002e2e:	7a1b      	ldrb	r3, [r3, #8]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	18d3      	adds	r3, r2, r3
 8002e34:	b29a      	uxth	r2, r3
								+ uart_tx_slice[9] 	+ uart_tx_slice[10]
 8002e36:	4b52      	ldr	r3, [pc, #328]	; (8002f80 <main+0x2d60>)
 8002e38:	7a5b      	ldrb	r3, [r3, #9]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	18d3      	adds	r3, r2, r3
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	4b4f      	ldr	r3, [pc, #316]	; (8002f80 <main+0x2d60>)
 8002e42:	7a9b      	ldrb	r3, [r3, #10]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	18d3      	adds	r3, r2, r3
 8002e48:	b29a      	uxth	r2, r3
								+ uart_tx_slice[11] + uart_tx_slice[12]
 8002e4a:	4b4d      	ldr	r3, [pc, #308]	; (8002f80 <main+0x2d60>)
 8002e4c:	7adb      	ldrb	r3, [r3, #11]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	18d3      	adds	r3, r2, r3
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	4b4a      	ldr	r3, [pc, #296]	; (8002f80 <main+0x2d60>)
 8002e56:	7b1b      	ldrb	r3, [r3, #12]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	18d3      	adds	r3, r2, r3
 8002e5c:	b29a      	uxth	r2, r3
								+ uart_tx_slice[13] + uart_tx_slice[14]
 8002e5e:	4b48      	ldr	r3, [pc, #288]	; (8002f80 <main+0x2d60>)
 8002e60:	7b5b      	ldrb	r3, [r3, #13]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	18d3      	adds	r3, r2, r3
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	4b45      	ldr	r3, [pc, #276]	; (8002f80 <main+0x2d60>)
 8002e6a:	7b9b      	ldrb	r3, [r3, #14]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	18d3      	adds	r3, r2, r3
 8002e70:	b29a      	uxth	r2, r3
								+ uart_tx_slice[15] + uart_tx_slice[16]
 8002e72:	4b43      	ldr	r3, [pc, #268]	; (8002f80 <main+0x2d60>)
 8002e74:	7bdb      	ldrb	r3, [r3, #15]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	18d3      	adds	r3, r2, r3
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	4b40      	ldr	r3, [pc, #256]	; (8002f80 <main+0x2d60>)
 8002e7e:	7c1b      	ldrb	r3, [r3, #16]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	18d3      	adds	r3, r2, r3
 8002e84:	b29a      	uxth	r2, r3
								+ uart_tx_slice[17] + uart_tx_slice[18]
 8002e86:	4b3e      	ldr	r3, [pc, #248]	; (8002f80 <main+0x2d60>)
 8002e88:	7c5b      	ldrb	r3, [r3, #17]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	18d3      	adds	r3, r2, r3
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	4b3b      	ldr	r3, [pc, #236]	; (8002f80 <main+0x2d60>)
 8002e92:	7c9b      	ldrb	r3, [r3, #18]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	18d3      	adds	r3, r2, r3
 8002e98:	b29a      	uxth	r2, r3
								+ uart_tx_slice[19] + uart_tx_slice[20]
 8002e9a:	4b39      	ldr	r3, [pc, #228]	; (8002f80 <main+0x2d60>)
 8002e9c:	7cdb      	ldrb	r3, [r3, #19]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	18d3      	adds	r3, r2, r3
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	4b36      	ldr	r3, [pc, #216]	; (8002f80 <main+0x2d60>)
 8002ea6:	7d1b      	ldrb	r3, [r3, #20]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	18d3      	adds	r3, r2, r3
 8002eac:	b29a      	uxth	r2, r3
								+ uart_tx_slice[21] + uart_tx_slice[22]
 8002eae:	4b34      	ldr	r3, [pc, #208]	; (8002f80 <main+0x2d60>)
 8002eb0:	7d5b      	ldrb	r3, [r3, #21]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	18d3      	adds	r3, r2, r3
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	4b31      	ldr	r3, [pc, #196]	; (8002f80 <main+0x2d60>)
 8002eba:	7d9b      	ldrb	r3, [r3, #22]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	18d3      	adds	r3, r2, r3
 8002ec0:	b29a      	uxth	r2, r3
								+ uart_tx_slice[23] + uart_tx_slice[24]
 8002ec2:	4b2f      	ldr	r3, [pc, #188]	; (8002f80 <main+0x2d60>)
 8002ec4:	7ddb      	ldrb	r3, [r3, #23]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	18d3      	adds	r3, r2, r3
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	4b2c      	ldr	r3, [pc, #176]	; (8002f80 <main+0x2d60>)
 8002ece:	7e1b      	ldrb	r3, [r3, #24]
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	18d3      	adds	r3, r2, r3
 8002ed4:	b29a      	uxth	r2, r3
								+ uart_tx_slice[25] + uart_tx_slice[26]
 8002ed6:	4b2a      	ldr	r3, [pc, #168]	; (8002f80 <main+0x2d60>)
 8002ed8:	7e5b      	ldrb	r3, [r3, #25]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	18d3      	adds	r3, r2, r3
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	4b27      	ldr	r3, [pc, #156]	; (8002f80 <main+0x2d60>)
 8002ee2:	7e9b      	ldrb	r3, [r3, #26]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	18d3      	adds	r3, r2, r3
 8002ee8:	b29a      	uxth	r2, r3
								+ uart_tx_slice[27] + uart_tx_slice[28]
 8002eea:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <main+0x2d60>)
 8002eec:	7edb      	ldrb	r3, [r3, #27]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	18d3      	adds	r3, r2, r3
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <main+0x2d60>)
 8002ef6:	7f1b      	ldrb	r3, [r3, #28]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	18d3      	adds	r3, r2, r3
 8002efc:	b29a      	uxth	r2, r3
								+ uart_tx_slice[29] + uart_tx_slice[30]
 8002efe:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <main+0x2d60>)
 8002f00:	7f5b      	ldrb	r3, [r3, #29]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	18d3      	adds	r3, r2, r3
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <main+0x2d60>)
 8002f0a:	7f9b      	ldrb	r3, [r3, #30]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	18d3      	adds	r3, r2, r3
 8002f10:	b29a      	uxth	r2, r3
								+ uart_tx_slice[31] + uart_tx_slice[32]
 8002f12:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <main+0x2d60>)
 8002f14:	7fdb      	ldrb	r3, [r3, #31]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	18d3      	adds	r3, r2, r3
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <main+0x2d60>)
 8002f1e:	2120      	movs	r1, #32
 8002f20:	5c5b      	ldrb	r3, [r3, r1]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	18d3      	adds	r3, r2, r3
 8002f26:	b29a      	uxth	r2, r3
								+ uart_tx_slice[33] + uart_tx_slice[34]
 8002f28:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <main+0x2d60>)
 8002f2a:	2121      	movs	r1, #33	; 0x21
 8002f2c:	5c5b      	ldrb	r3, [r3, r1]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	18d3      	adds	r3, r2, r3
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <main+0x2d60>)
 8002f36:	2122      	movs	r1, #34	; 0x22
 8002f38:	5c5b      	ldrb	r3, [r3, r1]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	18d3      	adds	r3, r2, r3
 8002f3e:	b29a      	uxth	r2, r3
								+ uart_tx_slice[35] + uart_tx_slice[36]
 8002f40:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <main+0x2d60>)
 8002f42:	2123      	movs	r1, #35	; 0x23
 8002f44:	5c5b      	ldrb	r3, [r3, r1]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	18d3      	adds	r3, r2, r3
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <main+0x2d60>)
 8002f4e:	2124      	movs	r1, #36	; 0x24
 8002f50:	5c5b      	ldrb	r3, [r3, r1]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	18d3      	adds	r3, r2, r3
 8002f56:	b29a      	uxth	r2, r3
								+ uart_tx_slice[37] + uart_tx_slice[38]
 8002f58:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <main+0x2d60>)
 8002f5a:	2125      	movs	r1, #37	; 0x25
 8002f5c:	5c5b      	ldrb	r3, [r3, r1]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	18d3      	adds	r3, r2, r3
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <main+0x2d60>)
 8002f66:	2126      	movs	r1, #38	; 0x26
 8002f68:	5c5b      	ldrb	r3, [r3, r1]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	18d3      	adds	r3, r2, r3
 8002f6e:	e00b      	b.n	8002f88 <main+0x2d68>
 8002f70:	20000208 	.word	0x20000208
 8002f74:	20000353 	.word	0x20000353
 8002f78:	2000003b 	.word	0x2000003b
 8002f7c:	20000352 	.word	0x20000352
 8002f80:	20000318 	.word	0x20000318
 8002f84:	20000004 	.word	0x20000004
 8002f88:	b29a      	uxth	r2, r3
								+ uart_tx_slice[39] + uart_tx_slice[40]
 8002f8a:	4b3e      	ldr	r3, [pc, #248]	; (8003084 <main+0x2e64>)
 8002f8c:	2127      	movs	r1, #39	; 0x27
 8002f8e:	5c5b      	ldrb	r3, [r3, r1]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	18d3      	adds	r3, r2, r3
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	4b3b      	ldr	r3, [pc, #236]	; (8003084 <main+0x2e64>)
 8002f98:	2128      	movs	r1, #40	; 0x28
 8002f9a:	5c5b      	ldrb	r3, [r3, r1]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	18d3      	adds	r3, r2, r3
 8002fa0:	b29a      	uxth	r2, r3
								+ uart_tx_slice[41] + uart_tx_slice[42]
 8002fa2:	4b38      	ldr	r3, [pc, #224]	; (8003084 <main+0x2e64>)
 8002fa4:	2129      	movs	r1, #41	; 0x29
 8002fa6:	5c5b      	ldrb	r3, [r3, r1]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	18d3      	adds	r3, r2, r3
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	4b35      	ldr	r3, [pc, #212]	; (8003084 <main+0x2e64>)
 8002fb0:	212a      	movs	r1, #42	; 0x2a
 8002fb2:	5c5b      	ldrb	r3, [r3, r1]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	18d3      	adds	r3, r2, r3
 8002fb8:	b29a      	uxth	r2, r3
								+ uart_tx_slice[43] + uart_tx_slice[44]
 8002fba:	4b32      	ldr	r3, [pc, #200]	; (8003084 <main+0x2e64>)
 8002fbc:	212b      	movs	r1, #43	; 0x2b
 8002fbe:	5c5b      	ldrb	r3, [r3, r1]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	18d3      	adds	r3, r2, r3
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	4b2f      	ldr	r3, [pc, #188]	; (8003084 <main+0x2e64>)
 8002fc8:	212c      	movs	r1, #44	; 0x2c
 8002fca:	5c5b      	ldrb	r3, [r3, r1]
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	18d3      	adds	r3, r2, r3
 8002fd0:	b29a      	uxth	r2, r3
								+ uart_tx_slice[45] + uart_tx_slice[46]
 8002fd2:	4b2c      	ldr	r3, [pc, #176]	; (8003084 <main+0x2e64>)
 8002fd4:	212d      	movs	r1, #45	; 0x2d
 8002fd6:	5c5b      	ldrb	r3, [r3, r1]
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	18d3      	adds	r3, r2, r3
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	4b29      	ldr	r3, [pc, #164]	; (8003084 <main+0x2e64>)
 8002fe0:	212e      	movs	r1, #46	; 0x2e
 8002fe2:	5c5b      	ldrb	r3, [r3, r1]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	18d3      	adds	r3, r2, r3
 8002fe8:	b29a      	uxth	r2, r3
								+ uart_tx_slice[47] + uart_tx_slice[48]
 8002fea:	4b26      	ldr	r3, [pc, #152]	; (8003084 <main+0x2e64>)
 8002fec:	212f      	movs	r1, #47	; 0x2f
 8002fee:	5c5b      	ldrb	r3, [r3, r1]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	18d3      	adds	r3, r2, r3
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	4b23      	ldr	r3, [pc, #140]	; (8003084 <main+0x2e64>)
 8002ff8:	2130      	movs	r1, #48	; 0x30
 8002ffa:	5c5b      	ldrb	r3, [r3, r1]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	18d3      	adds	r3, r2, r3
 8003000:	b29a      	uxth	r2, r3
								+ uart_tx_slice[49] + uart_tx_slice[50]
 8003002:	4b20      	ldr	r3, [pc, #128]	; (8003084 <main+0x2e64>)
 8003004:	2131      	movs	r1, #49	; 0x31
 8003006:	5c5b      	ldrb	r3, [r3, r1]
 8003008:	b29b      	uxth	r3, r3
 800300a:	18d3      	adds	r3, r2, r3
 800300c:	b29a      	uxth	r2, r3
 800300e:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <main+0x2e64>)
 8003010:	2132      	movs	r1, #50	; 0x32
 8003012:	5c5b      	ldrb	r3, [r3, r1]
 8003014:	b29b      	uxth	r3, r3
 8003016:	18d3      	adds	r3, r2, r3
 8003018:	b29a      	uxth	r2, r3
								+ uart_tx_slice[51] + uart_tx_slice[52];
 800301a:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <main+0x2e64>)
 800301c:	2133      	movs	r1, #51	; 0x33
 800301e:	5c5b      	ldrb	r3, [r3, r1]
 8003020:	b29b      	uxth	r3, r3
 8003022:	18d3      	adds	r3, r2, r3
 8003024:	b29a      	uxth	r2, r3
 8003026:	4b17      	ldr	r3, [pc, #92]	; (8003084 <main+0x2e64>)
 8003028:	2134      	movs	r1, #52	; 0x34
 800302a:	5c5b      	ldrb	r3, [r3, r1]
 800302c:	b29b      	uxth	r3, r3
 800302e:	18d3      	adds	r3, r2, r3
 8003030:	b29a      	uxth	r2, r3
				uart_tx_ctrl_summ = 					uart_tx_slice[0]
 8003032:	4b15      	ldr	r3, [pc, #84]	; (8003088 <main+0x2e68>)
 8003034:	801a      	strh	r2, [r3, #0]

				uart_tx_slice[53] = (uint8_t)uart_tx_ctrl_summ;
 8003036:	4b14      	ldr	r3, [pc, #80]	; (8003088 <main+0x2e68>)
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	b2d9      	uxtb	r1, r3
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <main+0x2e64>)
 800303e:	2235      	movs	r2, #53	; 0x35
 8003040:	5499      	strb	r1, [r3, r2]
				uart_tx_slice[54] = (uint8_t)(uart_tx_ctrl_summ >> 8);
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <main+0x2e68>)
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	0a1b      	lsrs	r3, r3, #8
 8003048:	b29b      	uxth	r3, r3
 800304a:	b2d9      	uxtb	r1, r3
 800304c:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <main+0x2e64>)
 800304e:	2236      	movs	r2, #54	; 0x36
 8003050:	5499      	strb	r1, [r3, r2]
			}

			uart_tx_on = uart_tx_on + 1;
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <main+0x2e6c>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	3301      	adds	r3, #1
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4b0c      	ldr	r3, [pc, #48]	; (800308c <main+0x2e6c>)
 800305c:	701a      	strb	r2, [r3, #0]

			if(uart_tx_on == 3)
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <main+0x2e6c>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b03      	cmp	r3, #3
 8003064:	d102      	bne.n	800306c <main+0x2e4c>
			{
				uart_tx_on = 0;
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <main+0x2e6c>)
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
			}
			uart_tx_state = 1;
 800306c:	4b08      	ldr	r3, [pc, #32]	; (8003090 <main+0x2e70>)
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)uart_tx_slice, 55);
 8003072:	4904      	ldr	r1, [pc, #16]	; (8003084 <main+0x2e64>)
 8003074:	4b07      	ldr	r3, [pc, #28]	; (8003094 <main+0x2e74>)
 8003076:	2237      	movs	r2, #55	; 0x37
 8003078:	0018      	movs	r0, r3
 800307a:	f002 fc27 	bl	80058cc <HAL_UART_Transmit_IT>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800307e:	f7fd f8f1 	bl	8000264 <main+0x44>
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	20000318 	.word	0x20000318
 8003088:	20000386 	.word	0x20000386
 800308c:	2000003b 	.word	0x2000003b
 8003090:	20000352 	.word	0x20000352
 8003094:	20000188 	.word	0x20000188

08003098 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b091      	sub	sp, #68	; 0x44
 800309c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800309e:	2410      	movs	r4, #16
 80030a0:	193b      	adds	r3, r7, r4
 80030a2:	0018      	movs	r0, r3
 80030a4:	2330      	movs	r3, #48	; 0x30
 80030a6:	001a      	movs	r2, r3
 80030a8:	2100      	movs	r1, #0
 80030aa:	f003 f9f7 	bl	800649c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030ae:	003b      	movs	r3, r7
 80030b0:	0018      	movs	r0, r3
 80030b2:	2310      	movs	r3, #16
 80030b4:	001a      	movs	r2, r3
 80030b6:	2100      	movs	r1, #0
 80030b8:	f003 f9f0 	bl	800649c <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030bc:	0021      	movs	r1, r4
 80030be:	187b      	adds	r3, r7, r1
 80030c0:	2202      	movs	r2, #2
 80030c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030c4:	187b      	adds	r3, r7, r1
 80030c6:	2201      	movs	r2, #1
 80030c8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030ca:	187b      	adds	r3, r7, r1
 80030cc:	2210      	movs	r2, #16
 80030ce:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030d0:	187b      	adds	r3, r7, r1
 80030d2:	2202      	movs	r2, #2
 80030d4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030d6:	187b      	adds	r3, r7, r1
 80030d8:	2200      	movs	r2, #0
 80030da:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80030dc:	187b      	adds	r3, r7, r1
 80030de:	22a0      	movs	r2, #160	; 0xa0
 80030e0:	0392      	lsls	r2, r2, #14
 80030e2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80030e4:	187b      	adds	r3, r7, r1
 80030e6:	2200      	movs	r2, #0
 80030e8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030ea:	187b      	adds	r3, r7, r1
 80030ec:	0018      	movs	r0, r3
 80030ee:	f001 f83b 	bl	8004168 <HAL_RCC_OscConfig>
 80030f2:	0003      	movs	r3, r0
 80030f4:	1e5a      	subs	r2, r3, #1
 80030f6:	4193      	sbcs	r3, r2
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <_Z18SystemClock_Configv+0x6a>
  {
    Error_Handler();
 80030fe:	f000 fa1d 	bl	800353c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003102:	003b      	movs	r3, r7
 8003104:	2207      	movs	r2, #7
 8003106:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003108:	003b      	movs	r3, r7
 800310a:	2202      	movs	r2, #2
 800310c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800310e:	003b      	movs	r3, r7
 8003110:	2200      	movs	r2, #0
 8003112:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003114:	003b      	movs	r3, r7
 8003116:	2200      	movs	r2, #0
 8003118:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800311a:	003b      	movs	r3, r7
 800311c:	2101      	movs	r1, #1
 800311e:	0018      	movs	r0, r3
 8003120:	f001 fb16 	bl	8004750 <HAL_RCC_ClockConfig>
 8003124:	0003      	movs	r3, r0
 8003126:	1e5a      	subs	r2, r3, #1
 8003128:	4193      	sbcs	r3, r2
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 8003130:	f000 fa04 	bl	800353c <Error_Handler>
  }
}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b011      	add	sp, #68	; 0x44
 800313a:	bd90      	pop	{r4, r7, pc}

0800313c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003140:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <_ZL12MX_SPI1_Initv+0x7c>)
 8003142:	4a1e      	ldr	r2, [pc, #120]	; (80031bc <_ZL12MX_SPI1_Initv+0x80>)
 8003144:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003146:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <_ZL12MX_SPI1_Initv+0x7c>)
 8003148:	2282      	movs	r2, #130	; 0x82
 800314a:	0052      	lsls	r2, r2, #1
 800314c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800314e:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <_ZL12MX_SPI1_Initv+0x7c>)
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003154:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <_ZL12MX_SPI1_Initv+0x7c>)
 8003156:	22e0      	movs	r2, #224	; 0xe0
 8003158:	00d2      	lsls	r2, r2, #3
 800315a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800315c:	4b16      	ldr	r3, [pc, #88]	; (80031b8 <_ZL12MX_SPI1_Initv+0x7c>)
 800315e:	2200      	movs	r2, #0
 8003160:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <_ZL12MX_SPI1_Initv+0x7c>)
 8003164:	2200      	movs	r2, #0
 8003166:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003168:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <_ZL12MX_SPI1_Initv+0x7c>)
 800316a:	2280      	movs	r2, #128	; 0x80
 800316c:	0092      	lsls	r2, r2, #2
 800316e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003170:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <_ZL12MX_SPI1_Initv+0x7c>)
 8003172:	2208      	movs	r2, #8
 8003174:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003176:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <_ZL12MX_SPI1_Initv+0x7c>)
 8003178:	2200      	movs	r2, #0
 800317a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800317c:	4b0e      	ldr	r3, [pc, #56]	; (80031b8 <_ZL12MX_SPI1_Initv+0x7c>)
 800317e:	2200      	movs	r2, #0
 8003180:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003182:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <_ZL12MX_SPI1_Initv+0x7c>)
 8003184:	2200      	movs	r2, #0
 8003186:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <_ZL12MX_SPI1_Initv+0x7c>)
 800318a:	2207      	movs	r2, #7
 800318c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800318e:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <_ZL12MX_SPI1_Initv+0x7c>)
 8003190:	2200      	movs	r2, #0
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <_ZL12MX_SPI1_Initv+0x7c>)
 8003196:	2208      	movs	r2, #8
 8003198:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800319a:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <_ZL12MX_SPI1_Initv+0x7c>)
 800319c:	0018      	movs	r0, r3
 800319e:	f001 fc43 	bl	8004a28 <HAL_SPI_Init>
 80031a2:	0003      	movs	r3, r0
 80031a4:	1e5a      	subs	r2, r3, #1
 80031a6:	4193      	sbcs	r3, r2
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <_ZL12MX_SPI1_Initv+0x76>
  {
    Error_Handler();
 80031ae:	f000 f9c5 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	2000005c 	.word	0x2000005c
 80031bc:	40013000 	.word	0x40013000

080031c0 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80031c4:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <_ZL12MX_TIM6_Initv+0x40>)
 80031c6:	4a0f      	ldr	r2, [pc, #60]	; (8003204 <_ZL12MX_TIM6_Initv+0x44>)
 80031c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47999;
 80031ca:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <_ZL12MX_TIM6_Initv+0x40>)
 80031cc:	4a0e      	ldr	r2, [pc, #56]	; (8003208 <_ZL12MX_TIM6_Initv+0x48>)
 80031ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <_ZL12MX_TIM6_Initv+0x40>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4;
 80031d6:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <_ZL12MX_TIM6_Initv+0x40>)
 80031d8:	2204      	movs	r2, #4
 80031da:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031dc:	4b08      	ldr	r3, [pc, #32]	; (8003200 <_ZL12MX_TIM6_Initv+0x40>)
 80031de:	2200      	movs	r2, #0
 80031e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80031e2:	4b07      	ldr	r3, [pc, #28]	; (8003200 <_ZL12MX_TIM6_Initv+0x40>)
 80031e4:	0018      	movs	r0, r3
 80031e6:	f002 f8fd 	bl	80053e4 <HAL_TIM_Base_Init>
 80031ea:	0003      	movs	r3, r0
 80031ec:	1e5a      	subs	r2, r3, #1
 80031ee:	4193      	sbcs	r3, r2
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <_ZL12MX_TIM6_Initv+0x3a>
  {
    Error_Handler();
 80031f6:	f000 f9a1 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	20000148 	.word	0x20000148
 8003204:	40001000 	.word	0x40001000
 8003208:	0000bb7f 	.word	0x0000bb7f

0800320c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003210:	4b16      	ldr	r3, [pc, #88]	; (800326c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003212:	4a17      	ldr	r2, [pc, #92]	; (8003270 <_ZL19MX_USART2_UART_Initv+0x64>)
 8003214:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003218:	22e1      	movs	r2, #225	; 0xe1
 800321a:	0252      	lsls	r2, r2, #9
 800321c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800321e:	4b13      	ldr	r3, [pc, #76]	; (800326c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003220:	2200      	movs	r2, #0
 8003222:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003224:	4b11      	ldr	r3, [pc, #68]	; (800326c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003226:	2200      	movs	r2, #0
 8003228:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800322a:	4b10      	ldr	r3, [pc, #64]	; (800326c <_ZL19MX_USART2_UART_Initv+0x60>)
 800322c:	2200      	movs	r2, #0
 800322e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003230:	4b0e      	ldr	r3, [pc, #56]	; (800326c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003232:	220c      	movs	r2, #12
 8003234:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003236:	4b0d      	ldr	r3, [pc, #52]	; (800326c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003238:	2200      	movs	r2, #0
 800323a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <_ZL19MX_USART2_UART_Initv+0x60>)
 800323e:	2200      	movs	r2, #0
 8003240:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003242:	4b0a      	ldr	r3, [pc, #40]	; (800326c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003244:	2200      	movs	r2, #0
 8003246:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003248:	4b08      	ldr	r3, [pc, #32]	; (800326c <_ZL19MX_USART2_UART_Initv+0x60>)
 800324a:	2200      	movs	r2, #0
 800324c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800324e:	4b07      	ldr	r3, [pc, #28]	; (800326c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003250:	0018      	movs	r0, r3
 8003252:	f002 fae3 	bl	800581c <HAL_UART_Init>
 8003256:	0003      	movs	r3, r0
 8003258:	1e5a      	subs	r2, r3, #1
 800325a:	4193      	sbcs	r3, r2
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 8003262:	f000 f96b 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20000188 	.word	0x20000188
 8003270:	40004400 	.word	0x40004400

08003274 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800327a:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <_ZL11MX_DMA_Initv+0x38>)
 800327c:	695a      	ldr	r2, [r3, #20]
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <_ZL11MX_DMA_Initv+0x38>)
 8003280:	2101      	movs	r1, #1
 8003282:	430a      	orrs	r2, r1
 8003284:	615a      	str	r2, [r3, #20]
 8003286:	4b09      	ldr	r3, [pc, #36]	; (80032ac <_ZL11MX_DMA_Initv+0x38>)
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	2201      	movs	r2, #1
 800328c:	4013      	ands	r3, r2
 800328e:	607b      	str	r3, [r7, #4]
 8003290:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003292:	2200      	movs	r2, #0
 8003294:	2100      	movs	r1, #0
 8003296:	200a      	movs	r0, #10
 8003298:	f000 fc4a 	bl	8003b30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800329c:	200a      	movs	r0, #10
 800329e:	f000 fc5c 	bl	8003b5a <HAL_NVIC_EnableIRQ>

}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b002      	add	sp, #8
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	40021000 	.word	0x40021000

080032b0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032b0:	b590      	push	{r4, r7, lr}
 80032b2:	b089      	sub	sp, #36	; 0x24
 80032b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b6:	240c      	movs	r4, #12
 80032b8:	193b      	adds	r3, r7, r4
 80032ba:	0018      	movs	r0, r3
 80032bc:	2314      	movs	r3, #20
 80032be:	001a      	movs	r2, r3
 80032c0:	2100      	movs	r1, #0
 80032c2:	f003 f8eb 	bl	800649c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c6:	4b30      	ldr	r3, [pc, #192]	; (8003388 <_ZL12MX_GPIO_Initv+0xd8>)
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	4b2f      	ldr	r3, [pc, #188]	; (8003388 <_ZL12MX_GPIO_Initv+0xd8>)
 80032cc:	2180      	movs	r1, #128	; 0x80
 80032ce:	0289      	lsls	r1, r1, #10
 80032d0:	430a      	orrs	r2, r1
 80032d2:	615a      	str	r2, [r3, #20]
 80032d4:	4b2c      	ldr	r3, [pc, #176]	; (8003388 <_ZL12MX_GPIO_Initv+0xd8>)
 80032d6:	695a      	ldr	r2, [r3, #20]
 80032d8:	2380      	movs	r3, #128	; 0x80
 80032da:	029b      	lsls	r3, r3, #10
 80032dc:	4013      	ands	r3, r2
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032e2:	4b29      	ldr	r3, [pc, #164]	; (8003388 <_ZL12MX_GPIO_Initv+0xd8>)
 80032e4:	695a      	ldr	r2, [r3, #20]
 80032e6:	4b28      	ldr	r3, [pc, #160]	; (8003388 <_ZL12MX_GPIO_Initv+0xd8>)
 80032e8:	2180      	movs	r1, #128	; 0x80
 80032ea:	0309      	lsls	r1, r1, #12
 80032ec:	430a      	orrs	r2, r1
 80032ee:	615a      	str	r2, [r3, #20]
 80032f0:	4b25      	ldr	r3, [pc, #148]	; (8003388 <_ZL12MX_GPIO_Initv+0xd8>)
 80032f2:	695a      	ldr	r2, [r3, #20]
 80032f4:	2380      	movs	r3, #128	; 0x80
 80032f6:	031b      	lsls	r3, r3, #12
 80032f8:	4013      	ands	r3, r2
 80032fa:	607b      	str	r3, [r7, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fe:	4b22      	ldr	r3, [pc, #136]	; (8003388 <_ZL12MX_GPIO_Initv+0xd8>)
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	4b21      	ldr	r3, [pc, #132]	; (8003388 <_ZL12MX_GPIO_Initv+0xd8>)
 8003304:	2180      	movs	r1, #128	; 0x80
 8003306:	02c9      	lsls	r1, r1, #11
 8003308:	430a      	orrs	r2, r1
 800330a:	615a      	str	r2, [r3, #20]
 800330c:	4b1e      	ldr	r3, [pc, #120]	; (8003388 <_ZL12MX_GPIO_Initv+0xd8>)
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	2380      	movs	r3, #128	; 0x80
 8003312:	02db      	lsls	r3, r3, #11
 8003314:	4013      	ands	r3, r2
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800331a:	23f8      	movs	r3, #248	; 0xf8
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	481b      	ldr	r0, [pc, #108]	; (800338c <_ZL12MX_GPIO_Initv+0xdc>)
 8003320:	2201      	movs	r2, #1
 8003322:	0019      	movs	r1, r3
 8003324:	f000 ff02 	bl	800412c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8003328:	4919      	ldr	r1, [pc, #100]	; (8003390 <_ZL12MX_GPIO_Initv+0xe0>)
 800332a:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <_ZL12MX_GPIO_Initv+0xe4>)
 800332c:	2201      	movs	r2, #1
 800332e:	0018      	movs	r0, r3
 8003330:	f000 fefc 	bl	800412c <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);

  /*Configure GPIO pins : PC5 PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8003334:	193b      	adds	r3, r7, r4
 8003336:	22f8      	movs	r2, #248	; 0xf8
 8003338:	0092      	lsls	r2, r2, #2
 800333a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800333c:	193b      	adds	r3, r7, r4
 800333e:	2201      	movs	r2, #1
 8003340:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003342:	193b      	adds	r3, r7, r4
 8003344:	2200      	movs	r2, #0
 8003346:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003348:	193b      	adds	r3, r7, r4
 800334a:	2203      	movs	r2, #3
 800334c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800334e:	193b      	adds	r3, r7, r4
 8003350:	4a0e      	ldr	r2, [pc, #56]	; (800338c <_ZL12MX_GPIO_Initv+0xdc>)
 8003352:	0019      	movs	r1, r3
 8003354:	0010      	movs	r0, r2
 8003356:	f000 fd75 	bl	8003e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800335a:	0021      	movs	r1, r4
 800335c:	187b      	adds	r3, r7, r1
 800335e:	4a0c      	ldr	r2, [pc, #48]	; (8003390 <_ZL12MX_GPIO_Initv+0xe0>)
 8003360:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003362:	187b      	adds	r3, r7, r1
 8003364:	2201      	movs	r2, #1
 8003366:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	187b      	adds	r3, r7, r1
 800336a:	2200      	movs	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800336e:	187b      	adds	r3, r7, r1
 8003370:	2203      	movs	r2, #3
 8003372:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003374:	187b      	adds	r3, r7, r1
 8003376:	4a07      	ldr	r2, [pc, #28]	; (8003394 <_ZL12MX_GPIO_Initv+0xe4>)
 8003378:	0019      	movs	r1, r3
 800337a:	0010      	movs	r0, r2
 800337c:	f000 fd62 	bl	8003e44 <HAL_GPIO_Init>

}
 8003380:	46c0      	nop			; (mov r8, r8)
 8003382:	46bd      	mov	sp, r7
 8003384:	b009      	add	sp, #36	; 0x24
 8003386:	bd90      	pop	{r4, r7, pc}
 8003388:	40021000 	.word	0x40021000
 800338c:	48000800 	.word	0x48000800
 8003390:	0000f007 	.word	0x0000f007
 8003394:	48000400 	.word	0x48000400

08003398 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	 if (rxNum == 0) {
 80033a0:	4b12      	ldr	r3, [pc, #72]	; (80033ec <HAL_UART_RxCpltCallback+0x54>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10c      	bne.n	80033c2 <HAL_UART_RxCpltCallback+0x2a>
		 uart_rx_state0 = 2;
 80033a8:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <HAL_UART_RxCpltCallback+0x58>)
 80033aa:	2202      	movs	r2, #2
 80033ac:	701a      	strb	r2, [r3, #0]
		 uart_rx_state1 = 1;
 80033ae:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <HAL_UART_RxCpltCallback+0x5c>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	701a      	strb	r2, [r3, #0]
		 HAL_UART_Receive_IT(&huart2, (uint8_t*) uart_rx1, 0x35); // Priem po UART
 80033b4:	4910      	ldr	r1, [pc, #64]	; (80033f8 <HAL_UART_RxCpltCallback+0x60>)
 80033b6:	4b11      	ldr	r3, [pc, #68]	; (80033fc <HAL_UART_RxCpltCallback+0x64>)
 80033b8:	2235      	movs	r2, #53	; 0x35
 80033ba:	0018      	movs	r0, r3
 80033bc:	f002 fade 	bl	800597c <HAL_UART_Receive_IT>
	 } else if (rxNum == 1) {
		 uart_rx_state1 = 2;
		 uart_rx_state0 = 1;
		 HAL_UART_Receive_IT(&huart2, (uint8_t*)uart_rx0, 0x35); // Priem po UART
	 }
}
 80033c0:	e00f      	b.n	80033e2 <HAL_UART_RxCpltCallback+0x4a>
	 } else if (rxNum == 1) {
 80033c2:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <HAL_UART_RxCpltCallback+0x54>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d10b      	bne.n	80033e2 <HAL_UART_RxCpltCallback+0x4a>
		 uart_rx_state1 = 2;
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_UART_RxCpltCallback+0x5c>)
 80033cc:	2202      	movs	r2, #2
 80033ce:	701a      	strb	r2, [r3, #0]
		 uart_rx_state0 = 1;
 80033d0:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <HAL_UART_RxCpltCallback+0x58>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	701a      	strb	r2, [r3, #0]
		 HAL_UART_Receive_IT(&huart2, (uint8_t*)uart_rx0, 0x35); // Priem po UART
 80033d6:	490a      	ldr	r1, [pc, #40]	; (8003400 <HAL_UART_RxCpltCallback+0x68>)
 80033d8:	4b08      	ldr	r3, [pc, #32]	; (80033fc <HAL_UART_RxCpltCallback+0x64>)
 80033da:	2235      	movs	r2, #53	; 0x35
 80033dc:	0018      	movs	r0, r3
 80033de:	f002 facd 	bl	800597c <HAL_UART_Receive_IT>
}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b002      	add	sp, #8
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	20000317 	.word	0x20000317
 80033f0:	20000315 	.word	0x20000315
 80033f4:	20000316 	.word	0x20000316
 80033f8:	2000027c 	.word	0x2000027c
 80033fc:	20000188 	.word	0x20000188
 8003400:	20000218 	.word	0x20000218

08003404 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
	uart_tx_state = 0;
 800340c:	4b03      	ldr	r3, [pc, #12]	; (800341c <HAL_UART_TxCpltCallback+0x18>)
 800340e:	2200      	movs	r2, #0
 8003410:	701a      	strb	r2, [r3, #0]
}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	46bd      	mov	sp, r7
 8003416:	b002      	add	sp, #8
 8003418:	bd80      	pop	{r7, pc}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	20000352 	.word	0x20000352

08003420 <HAL_UART_ErrorCallback>:

uint32_t aaa = 0;
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]

	HAL_UART_AbortReceive_IT(&huart2);
 8003428:	4b08      	ldr	r3, [pc, #32]	; (800344c <HAL_UART_ErrorCallback+0x2c>)
 800342a:	0018      	movs	r0, r3
 800342c:	f002 fb30 	bl	8005a90 <HAL_UART_AbortReceive_IT>
	aaa = USART2->RDR;
 8003430:	4b07      	ldr	r3, [pc, #28]	; (8003450 <HAL_UART_ErrorCallback+0x30>)
 8003432:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003434:	b29b      	uxth	r3, r3
 8003436:	001a      	movs	r2, r3
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_UART_ErrorCallback+0x34>)
 800343a:	601a      	str	r2, [r3, #0]
	USART2->ICR = 8;
 800343c:	4b04      	ldr	r3, [pc, #16]	; (8003450 <HAL_UART_ErrorCallback+0x30>)
 800343e:	2208      	movs	r2, #8
 8003440:	621a      	str	r2, [r3, #32]
	if (rxNum == 1) {
		uart_rx_state1 = 1;
		HAL_UART_Receive_IT(&huart2, (uint8_t*) uart_rx1, 0x35);
	}
*/
}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	46bd      	mov	sp, r7
 8003446:	b002      	add	sp, #8
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	20000188 	.word	0x20000188
 8003450:	40004400 	.word	0x40004400
 8003454:	20000390 	.word	0x20000390

08003458 <HAL_SPI_TxRxCpltCallback>:



void HAL_SPI_TxRxCpltCallback (SPI_HandleTypeDef * hspi)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	GPIOC->BSRR = (1<<9);
 8003460:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <HAL_SPI_TxRxCpltCallback+0x78>)
 8003462:	2280      	movs	r2, #128	; 0x80
 8003464:	0092      	lsls	r2, r2, #2
 8003466:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR = (1<<8);
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <HAL_SPI_TxRxCpltCallback+0x78>)
 800346a:	2280      	movs	r2, #128	; 0x80
 800346c:	0052      	lsls	r2, r2, #1
 800346e:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR = (1<<7);
 8003470:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <HAL_SPI_TxRxCpltCallback+0x78>)
 8003472:	2280      	movs	r2, #128	; 0x80
 8003474:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR = (1<<6);
 8003476:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <HAL_SPI_TxRxCpltCallback+0x78>)
 8003478:	2240      	movs	r2, #64	; 0x40
 800347a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = (1<<15);
 800347c:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <HAL_SPI_TxRxCpltCallback+0x7c>)
 800347e:	2280      	movs	r2, #128	; 0x80
 8003480:	0212      	lsls	r2, r2, #8
 8003482:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = (1<<14);
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <HAL_SPI_TxRxCpltCallback+0x7c>)
 8003486:	2280      	movs	r2, #128	; 0x80
 8003488:	01d2      	lsls	r2, r2, #7
 800348a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = (1<<13);
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <HAL_SPI_TxRxCpltCallback+0x7c>)
 800348e:	2280      	movs	r2, #128	; 0x80
 8003490:	0192      	lsls	r2, r2, #6
 8003492:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = (1<<12);
 8003494:	4b0f      	ldr	r3, [pc, #60]	; (80034d4 <HAL_SPI_TxRxCpltCallback+0x7c>)
 8003496:	2280      	movs	r2, #128	; 0x80
 8003498:	0152      	lsls	r2, r2, #5
 800349a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = (1<<2);
 800349c:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <HAL_SPI_TxRxCpltCallback+0x7c>)
 800349e:	2204      	movs	r2, #4
 80034a0:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = (1<<1);
 80034a2:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <HAL_SPI_TxRxCpltCallback+0x7c>)
 80034a4:	2202      	movs	r2, #2
 80034a6:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = (1<<0);
 80034a8:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <HAL_SPI_TxRxCpltCallback+0x7c>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR = (1<<5);
 80034ae:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <HAL_SPI_TxRxCpltCallback+0x78>)
 80034b0:	2220      	movs	r2, #32
 80034b2:	619a      	str	r2, [r3, #24]

	spi_state = 2;
 80034b4:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <HAL_SPI_TxRxCpltCallback+0x80>)
 80034b6:	2202      	movs	r2, #2
 80034b8:	701a      	strb	r2, [r3, #0]
	spi_rx_check = spi_rx_check + 1;
 80034ba:	4b08      	ldr	r3, [pc, #32]	; (80034dc <HAL_SPI_TxRxCpltCallback+0x84>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	3301      	adds	r3, #1
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	4b06      	ldr	r3, [pc, #24]	; (80034dc <HAL_SPI_TxRxCpltCallback+0x84>)
 80034c4:	701a      	strb	r2, [r3, #0]
}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b002      	add	sp, #8
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	48000800 	.word	0x48000800
 80034d4:	48000400 	.word	0x48000400
 80034d8:	20000208 	.word	0x20000208
 80034dc:	20000207 	.word	0x20000207

080034e0 <HAL_TIM_PeriodElapsedCallback>:
/* Otpravka po taimery kazdye 10s -----------------------------------------------------------------------------------------------*/
uint16_t txMs = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) //check if the interrupt comes from TIM6
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a0f      	ldr	r2, [pc, #60]	; (800352c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d117      	bne.n	8003522 <HAL_TIM_PeriodElapsedCallback+0x42>
	{
		++uartRxMs;
 80034f2:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	3301      	adds	r3, #1
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	4b0d      	ldr	r3, [pc, #52]	; (8003530 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80034fc:	701a      	strb	r2, [r3, #0]
		++txMs;
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	3301      	adds	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003508:	801a      	strh	r2, [r3, #0]
		if (txMs > 300) {
 800350a:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800350c:	881a      	ldrh	r2, [r3, #0]
 800350e:	2396      	movs	r3, #150	; 0x96
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	429a      	cmp	r2, r3
 8003514:	d905      	bls.n	8003522 <HAL_TIM_PeriodElapsedCallback+0x42>
			tim_6_flag = 1;
 8003516:	4b08      	ldr	r3, [pc, #32]	; (8003538 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003518:	2201      	movs	r2, #1
 800351a:	701a      	strb	r2, [r3, #0]
			txMs = 0;
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800351e:	2200      	movs	r2, #0
 8003520:	801a      	strh	r2, [r3, #0]
		}

	}
}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	b002      	add	sp, #8
 8003528:	bd80      	pop	{r7, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	40001000 	.word	0x40001000
 8003530:	2000038e 	.word	0x2000038e
 8003534:	20000394 	.word	0x20000394
 8003538:	20000353 	.word	0x20000353

0800353c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003540:	46c0      	nop			; (mov r8, r8)
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800354e:	4b0f      	ldr	r3, [pc, #60]	; (800358c <HAL_MspInit+0x44>)
 8003550:	699a      	ldr	r2, [r3, #24]
 8003552:	4b0e      	ldr	r3, [pc, #56]	; (800358c <HAL_MspInit+0x44>)
 8003554:	2101      	movs	r1, #1
 8003556:	430a      	orrs	r2, r1
 8003558:	619a      	str	r2, [r3, #24]
 800355a:	4b0c      	ldr	r3, [pc, #48]	; (800358c <HAL_MspInit+0x44>)
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2201      	movs	r2, #1
 8003560:	4013      	ands	r3, r2
 8003562:	607b      	str	r3, [r7, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003566:	4b09      	ldr	r3, [pc, #36]	; (800358c <HAL_MspInit+0x44>)
 8003568:	69da      	ldr	r2, [r3, #28]
 800356a:	4b08      	ldr	r3, [pc, #32]	; (800358c <HAL_MspInit+0x44>)
 800356c:	2180      	movs	r1, #128	; 0x80
 800356e:	0549      	lsls	r1, r1, #21
 8003570:	430a      	orrs	r2, r1
 8003572:	61da      	str	r2, [r3, #28]
 8003574:	4b05      	ldr	r3, [pc, #20]	; (800358c <HAL_MspInit+0x44>)
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	055b      	lsls	r3, r3, #21
 800357c:	4013      	ands	r3, r2
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	46bd      	mov	sp, r7
 8003586:	b002      	add	sp, #8
 8003588:	bd80      	pop	{r7, pc}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	40021000 	.word	0x40021000

08003590 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003590:	b590      	push	{r4, r7, lr}
 8003592:	b08b      	sub	sp, #44	; 0x2c
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003598:	2414      	movs	r4, #20
 800359a:	193b      	adds	r3, r7, r4
 800359c:	0018      	movs	r0, r3
 800359e:	2314      	movs	r3, #20
 80035a0:	001a      	movs	r2, r3
 80035a2:	2100      	movs	r1, #0
 80035a4:	f002 ff7a 	bl	800649c <memset>
  if(hspi->Instance==SPI1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a47      	ldr	r2, [pc, #284]	; (80036cc <HAL_SPI_MspInit+0x13c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d000      	beq.n	80035b4 <HAL_SPI_MspInit+0x24>
 80035b2:	e086      	b.n	80036c2 <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035b4:	4b46      	ldr	r3, [pc, #280]	; (80036d0 <HAL_SPI_MspInit+0x140>)
 80035b6:	699a      	ldr	r2, [r3, #24]
 80035b8:	4b45      	ldr	r3, [pc, #276]	; (80036d0 <HAL_SPI_MspInit+0x140>)
 80035ba:	2180      	movs	r1, #128	; 0x80
 80035bc:	0149      	lsls	r1, r1, #5
 80035be:	430a      	orrs	r2, r1
 80035c0:	619a      	str	r2, [r3, #24]
 80035c2:	4b43      	ldr	r3, [pc, #268]	; (80036d0 <HAL_SPI_MspInit+0x140>)
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	2380      	movs	r3, #128	; 0x80
 80035c8:	015b      	lsls	r3, r3, #5
 80035ca:	4013      	ands	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d0:	4b3f      	ldr	r3, [pc, #252]	; (80036d0 <HAL_SPI_MspInit+0x140>)
 80035d2:	695a      	ldr	r2, [r3, #20]
 80035d4:	4b3e      	ldr	r3, [pc, #248]	; (80036d0 <HAL_SPI_MspInit+0x140>)
 80035d6:	2180      	movs	r1, #128	; 0x80
 80035d8:	0289      	lsls	r1, r1, #10
 80035da:	430a      	orrs	r2, r1
 80035dc:	615a      	str	r2, [r3, #20]
 80035de:	4b3c      	ldr	r3, [pc, #240]	; (80036d0 <HAL_SPI_MspInit+0x140>)
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	029b      	lsls	r3, r3, #10
 80035e6:	4013      	ands	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80035ec:	0021      	movs	r1, r4
 80035ee:	187b      	adds	r3, r7, r1
 80035f0:	22e0      	movs	r2, #224	; 0xe0
 80035f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f4:	187b      	adds	r3, r7, r1
 80035f6:	2202      	movs	r2, #2
 80035f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	2200      	movs	r2, #0
 80035fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003600:	187b      	adds	r3, r7, r1
 8003602:	2203      	movs	r2, #3
 8003604:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003606:	187b      	adds	r3, r7, r1
 8003608:	2200      	movs	r2, #0
 800360a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800360c:	187a      	adds	r2, r7, r1
 800360e:	2390      	movs	r3, #144	; 0x90
 8003610:	05db      	lsls	r3, r3, #23
 8003612:	0011      	movs	r1, r2
 8003614:	0018      	movs	r0, r3
 8003616:	f000 fc15 	bl	8003e44 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800361a:	4b2e      	ldr	r3, [pc, #184]	; (80036d4 <HAL_SPI_MspInit+0x144>)
 800361c:	4a2e      	ldr	r2, [pc, #184]	; (80036d8 <HAL_SPI_MspInit+0x148>)
 800361e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003620:	4b2c      	ldr	r3, [pc, #176]	; (80036d4 <HAL_SPI_MspInit+0x144>)
 8003622:	2200      	movs	r2, #0
 8003624:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003626:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <HAL_SPI_MspInit+0x144>)
 8003628:	2200      	movs	r2, #0
 800362a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800362c:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <HAL_SPI_MspInit+0x144>)
 800362e:	2280      	movs	r2, #128	; 0x80
 8003630:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003632:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <HAL_SPI_MspInit+0x144>)
 8003634:	2200      	movs	r2, #0
 8003636:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003638:	4b26      	ldr	r3, [pc, #152]	; (80036d4 <HAL_SPI_MspInit+0x144>)
 800363a:	2200      	movs	r2, #0
 800363c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800363e:	4b25      	ldr	r3, [pc, #148]	; (80036d4 <HAL_SPI_MspInit+0x144>)
 8003640:	2200      	movs	r2, #0
 8003642:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003644:	4b23      	ldr	r3, [pc, #140]	; (80036d4 <HAL_SPI_MspInit+0x144>)
 8003646:	2200      	movs	r2, #0
 8003648:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800364a:	4b22      	ldr	r3, [pc, #136]	; (80036d4 <HAL_SPI_MspInit+0x144>)
 800364c:	0018      	movs	r0, r3
 800364e:	f000 faa1 	bl	8003b94 <HAL_DMA_Init>
 8003652:	1e03      	subs	r3, r0, #0
 8003654:	d001      	beq.n	800365a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8003656:	f7ff ff71 	bl	800353c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a1d      	ldr	r2, [pc, #116]	; (80036d4 <HAL_SPI_MspInit+0x144>)
 800365e:	659a      	str	r2, [r3, #88]	; 0x58
 8003660:	4b1c      	ldr	r3, [pc, #112]	; (80036d4 <HAL_SPI_MspInit+0x144>)
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	625a      	str	r2, [r3, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003666:	4b1d      	ldr	r3, [pc, #116]	; (80036dc <HAL_SPI_MspInit+0x14c>)
 8003668:	4a1d      	ldr	r2, [pc, #116]	; (80036e0 <HAL_SPI_MspInit+0x150>)
 800366a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800366c:	4b1b      	ldr	r3, [pc, #108]	; (80036dc <HAL_SPI_MspInit+0x14c>)
 800366e:	2210      	movs	r2, #16
 8003670:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003672:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <HAL_SPI_MspInit+0x14c>)
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003678:	4b18      	ldr	r3, [pc, #96]	; (80036dc <HAL_SPI_MspInit+0x14c>)
 800367a:	2280      	movs	r2, #128	; 0x80
 800367c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800367e:	4b17      	ldr	r3, [pc, #92]	; (80036dc <HAL_SPI_MspInit+0x14c>)
 8003680:	2200      	movs	r2, #0
 8003682:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003684:	4b15      	ldr	r3, [pc, #84]	; (80036dc <HAL_SPI_MspInit+0x14c>)
 8003686:	2200      	movs	r2, #0
 8003688:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800368a:	4b14      	ldr	r3, [pc, #80]	; (80036dc <HAL_SPI_MspInit+0x14c>)
 800368c:	2200      	movs	r2, #0
 800368e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003690:	4b12      	ldr	r3, [pc, #72]	; (80036dc <HAL_SPI_MspInit+0x14c>)
 8003692:	2200      	movs	r2, #0
 8003694:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003696:	4b11      	ldr	r3, [pc, #68]	; (80036dc <HAL_SPI_MspInit+0x14c>)
 8003698:	0018      	movs	r0, r3
 800369a:	f000 fa7b 	bl	8003b94 <HAL_DMA_Init>
 800369e:	1e03      	subs	r3, r0, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_SPI_MspInit+0x116>
    {
      Error_Handler();
 80036a2:	f7ff ff4b 	bl	800353c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a0c      	ldr	r2, [pc, #48]	; (80036dc <HAL_SPI_MspInit+0x14c>)
 80036aa:	655a      	str	r2, [r3, #84]	; 0x54
 80036ac:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <HAL_SPI_MspInit+0x14c>)
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80036b2:	2200      	movs	r2, #0
 80036b4:	2100      	movs	r1, #0
 80036b6:	2019      	movs	r0, #25
 80036b8:	f000 fa3a 	bl	8003b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80036bc:	2019      	movs	r0, #25
 80036be:	f000 fa4c 	bl	8003b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b00b      	add	sp, #44	; 0x2c
 80036c8:	bd90      	pop	{r4, r7, pc}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	40013000 	.word	0x40013000
 80036d0:	40021000 	.word	0x40021000
 80036d4:	200000c0 	.word	0x200000c0
 80036d8:	4002001c 	.word	0x4002001c
 80036dc:	20000104 	.word	0x20000104
 80036e0:	40020030 	.word	0x40020030

080036e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a0d      	ldr	r2, [pc, #52]	; (8003728 <HAL_TIM_Base_MspInit+0x44>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d113      	bne.n	800371e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80036f6:	4b0d      	ldr	r3, [pc, #52]	; (800372c <HAL_TIM_Base_MspInit+0x48>)
 80036f8:	69da      	ldr	r2, [r3, #28]
 80036fa:	4b0c      	ldr	r3, [pc, #48]	; (800372c <HAL_TIM_Base_MspInit+0x48>)
 80036fc:	2110      	movs	r1, #16
 80036fe:	430a      	orrs	r2, r1
 8003700:	61da      	str	r2, [r3, #28]
 8003702:	4b0a      	ldr	r3, [pc, #40]	; (800372c <HAL_TIM_Base_MspInit+0x48>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	2210      	movs	r2, #16
 8003708:	4013      	ands	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800370e:	2200      	movs	r2, #0
 8003710:	2100      	movs	r1, #0
 8003712:	2011      	movs	r0, #17
 8003714:	f000 fa0c 	bl	8003b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003718:	2011      	movs	r0, #17
 800371a:	f000 fa1e 	bl	8003b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	46bd      	mov	sp, r7
 8003722:	b004      	add	sp, #16
 8003724:	bd80      	pop	{r7, pc}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	40001000 	.word	0x40001000
 800372c:	40021000 	.word	0x40021000

08003730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003730:	b590      	push	{r4, r7, lr}
 8003732:	b08b      	sub	sp, #44	; 0x2c
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003738:	2414      	movs	r4, #20
 800373a:	193b      	adds	r3, r7, r4
 800373c:	0018      	movs	r0, r3
 800373e:	2314      	movs	r3, #20
 8003740:	001a      	movs	r2, r3
 8003742:	2100      	movs	r1, #0
 8003744:	f002 feaa 	bl	800649c <memset>
  if(huart->Instance==USART2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a20      	ldr	r2, [pc, #128]	; (80037d0 <HAL_UART_MspInit+0xa0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d13a      	bne.n	80037c8 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003752:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <HAL_UART_MspInit+0xa4>)
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <HAL_UART_MspInit+0xa4>)
 8003758:	2180      	movs	r1, #128	; 0x80
 800375a:	0289      	lsls	r1, r1, #10
 800375c:	430a      	orrs	r2, r1
 800375e:	61da      	str	r2, [r3, #28]
 8003760:	4b1c      	ldr	r3, [pc, #112]	; (80037d4 <HAL_UART_MspInit+0xa4>)
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	2380      	movs	r3, #128	; 0x80
 8003766:	029b      	lsls	r3, r3, #10
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800376e:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <HAL_UART_MspInit+0xa4>)
 8003770:	695a      	ldr	r2, [r3, #20]
 8003772:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <HAL_UART_MspInit+0xa4>)
 8003774:	2180      	movs	r1, #128	; 0x80
 8003776:	0289      	lsls	r1, r1, #10
 8003778:	430a      	orrs	r2, r1
 800377a:	615a      	str	r2, [r3, #20]
 800377c:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <HAL_UART_MspInit+0xa4>)
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	029b      	lsls	r3, r3, #10
 8003784:	4013      	ands	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800378a:	0021      	movs	r1, r4
 800378c:	187b      	adds	r3, r7, r1
 800378e:	220c      	movs	r2, #12
 8003790:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003792:	187b      	adds	r3, r7, r1
 8003794:	2202      	movs	r2, #2
 8003796:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003798:	187b      	adds	r3, r7, r1
 800379a:	2200      	movs	r2, #0
 800379c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800379e:	187b      	adds	r3, r7, r1
 80037a0:	2203      	movs	r2, #3
 80037a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	2201      	movs	r2, #1
 80037a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037aa:	187a      	adds	r2, r7, r1
 80037ac:	2390      	movs	r3, #144	; 0x90
 80037ae:	05db      	lsls	r3, r3, #23
 80037b0:	0011      	movs	r1, r2
 80037b2:	0018      	movs	r0, r3
 80037b4:	f000 fb46 	bl	8003e44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80037b8:	2200      	movs	r2, #0
 80037ba:	2100      	movs	r1, #0
 80037bc:	201c      	movs	r0, #28
 80037be:	f000 f9b7 	bl	8003b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037c2:	201c      	movs	r0, #28
 80037c4:	f000 f9c9 	bl	8003b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80037c8:	46c0      	nop			; (mov r8, r8)
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b00b      	add	sp, #44	; 0x2c
 80037ce:	bd90      	pop	{r4, r7, pc}
 80037d0:	40004400 	.word	0x40004400
 80037d4:	40021000 	.word	0x40021000

080037d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037e6:	e7fe      	b.n	80037e6 <HardFault_Handler+0x4>

080037e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003800:	f000 f8d8 	bl	80039b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8003812:	0018      	movs	r0, r3
 8003814:	f000 fa57 	bl	8003cc6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003818:	4b04      	ldr	r3, [pc, #16]	; (800382c <DMA1_Channel2_3_IRQHandler+0x20>)
 800381a:	0018      	movs	r0, r3
 800381c:	f000 fa53 	bl	8003cc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003820:	46c0      	nop			; (mov r8, r8)
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	200000c0 	.word	0x200000c0
 800382c:	20000104 	.word	0x20000104

08003830 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003834:	4b03      	ldr	r3, [pc, #12]	; (8003844 <TIM6_IRQHandler+0x14>)
 8003836:	0018      	movs	r0, r3
 8003838:	f001 fe32 	bl	80054a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800383c:	46c0      	nop			; (mov r8, r8)
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	20000148 	.word	0x20000148

08003848 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800384c:	4b03      	ldr	r3, [pc, #12]	; (800385c <SPI1_IRQHandler+0x14>)
 800384e:	0018      	movs	r0, r3
 8003850:	f001 fa50 	bl	8004cf4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003854:	46c0      	nop			; (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	2000005c 	.word	0x2000005c

08003860 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003864:	4b03      	ldr	r3, [pc, #12]	; (8003874 <USART2_IRQHandler+0x14>)
 8003866:	0018      	movs	r0, r3
 8003868:	f002 f976 	bl	8005b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800386c:	46c0      	nop			; (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	20000188 	.word	0x20000188

08003878 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800387c:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <SystemInit+0x70>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <SystemInit+0x70>)
 8003882:	2101      	movs	r1, #1
 8003884:	430a      	orrs	r2, r1
 8003886:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003888:	4b17      	ldr	r3, [pc, #92]	; (80038e8 <SystemInit+0x70>)
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	4b16      	ldr	r3, [pc, #88]	; (80038e8 <SystemInit+0x70>)
 800388e:	4917      	ldr	r1, [pc, #92]	; (80038ec <SystemInit+0x74>)
 8003890:	400a      	ands	r2, r1
 8003892:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8003894:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <SystemInit+0x70>)
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <SystemInit+0x70>)
 800389a:	4915      	ldr	r1, [pc, #84]	; (80038f0 <SystemInit+0x78>)
 800389c:	400a      	ands	r2, r1
 800389e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80038a0:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <SystemInit+0x70>)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <SystemInit+0x70>)
 80038a6:	4913      	ldr	r1, [pc, #76]	; (80038f4 <SystemInit+0x7c>)
 80038a8:	400a      	ands	r2, r1
 80038aa:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80038ac:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <SystemInit+0x70>)
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <SystemInit+0x70>)
 80038b2:	4911      	ldr	r1, [pc, #68]	; (80038f8 <SystemInit+0x80>)
 80038b4:	400a      	ands	r2, r1
 80038b6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80038b8:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <SystemInit+0x70>)
 80038ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <SystemInit+0x70>)
 80038be:	210f      	movs	r1, #15
 80038c0:	438a      	bics	r2, r1
 80038c2:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80038c4:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <SystemInit+0x70>)
 80038c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c8:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <SystemInit+0x70>)
 80038ca:	490c      	ldr	r1, [pc, #48]	; (80038fc <SystemInit+0x84>)
 80038cc:	400a      	ands	r2, r1
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <SystemInit+0x70>)
 80038d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d4:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <SystemInit+0x70>)
 80038d6:	2101      	movs	r1, #1
 80038d8:	438a      	bics	r2, r1
 80038da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80038dc:	4b02      	ldr	r3, [pc, #8]	; (80038e8 <SystemInit+0x70>)
 80038de:	2200      	movs	r2, #0
 80038e0:	609a      	str	r2, [r3, #8]

}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40021000 	.word	0x40021000
 80038ec:	08ffb80c 	.word	0x08ffb80c
 80038f0:	fef6ffff 	.word	0xfef6ffff
 80038f4:	fffbffff 	.word	0xfffbffff
 80038f8:	ffc0ffff 	.word	0xffc0ffff
 80038fc:	fffffeec 	.word	0xfffffeec

08003900 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003900:	480d      	ldr	r0, [pc, #52]	; (8003938 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003902:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003904:	480d      	ldr	r0, [pc, #52]	; (800393c <LoopForever+0x6>)
  ldr r1, =_edata
 8003906:	490e      	ldr	r1, [pc, #56]	; (8003940 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003908:	4a0e      	ldr	r2, [pc, #56]	; (8003944 <LoopForever+0xe>)
  movs r3, #0
 800390a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800390c:	e002      	b.n	8003914 <LoopCopyDataInit>

0800390e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800390e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003912:	3304      	adds	r3, #4

08003914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003918:	d3f9      	bcc.n	800390e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800391a:	4a0b      	ldr	r2, [pc, #44]	; (8003948 <LoopForever+0x12>)
  ldr r4, =_ebss
 800391c:	4c0b      	ldr	r4, [pc, #44]	; (800394c <LoopForever+0x16>)
  movs r3, #0
 800391e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003920:	e001      	b.n	8003926 <LoopFillZerobss>

08003922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003924:	3204      	adds	r2, #4

08003926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003928:	d3fb      	bcc.n	8003922 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800392a:	f7ff ffa5 	bl	8003878 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800392e:	f002 fd91 	bl	8006454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003932:	f7fc fc75 	bl	8000220 <main>

08003936 <LoopForever>:

LoopForever:
    b LoopForever
 8003936:	e7fe      	b.n	8003936 <LoopForever>
  ldr   r0, =_estack
 8003938:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800393c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003940:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8003944:	08006504 	.word	0x08006504
  ldr r2, =_sbss
 8003948:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 800394c:	2000039c 	.word	0x2000039c

08003950 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003950:	e7fe      	b.n	8003950 <ADC1_IRQHandler>
	...

08003954 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003958:	4b07      	ldr	r3, [pc, #28]	; (8003978 <HAL_Init+0x24>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	4b06      	ldr	r3, [pc, #24]	; (8003978 <HAL_Init+0x24>)
 800395e:	2110      	movs	r1, #16
 8003960:	430a      	orrs	r2, r1
 8003962:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003964:	2000      	movs	r0, #0
 8003966:	f000 f809 	bl	800397c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800396a:	f7ff fded 	bl	8003548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	40022000 	.word	0x40022000

0800397c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8003984:	f001 f830 	bl	80049e8 <HAL_RCC_GetHCLKFreq>
 8003988:	0002      	movs	r2, r0
 800398a:	23fa      	movs	r3, #250	; 0xfa
 800398c:	0099      	lsls	r1, r3, #2
 800398e:	0010      	movs	r0, r2
 8003990:	f7fc fbba 	bl	8000108 <__udivsi3>
 8003994:	0003      	movs	r3, r0
 8003996:	0018      	movs	r0, r3
 8003998:	f000 f8ef 	bl	8003b7a <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	2301      	movs	r3, #1
 80039a0:	425b      	negs	r3, r3
 80039a2:	2200      	movs	r2, #0
 80039a4:	0018      	movs	r0, r3
 80039a6:	f000 f8c3 	bl	8003b30 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	0018      	movs	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b002      	add	sp, #8
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  uwTick++;
 80039b8:	4b03      	ldr	r3, [pc, #12]	; (80039c8 <HAL_IncTick+0x14>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	4b02      	ldr	r3, [pc, #8]	; (80039c8 <HAL_IncTick+0x14>)
 80039c0:	601a      	str	r2, [r3, #0]
}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20000398 	.word	0x20000398

080039cc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  return uwTick;
 80039d0:	4b02      	ldr	r3, [pc, #8]	; (80039dc <HAL_GetTick+0x10>)
 80039d2:	681b      	ldr	r3, [r3, #0]
}
 80039d4:	0018      	movs	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	20000398 	.word	0x20000398

080039e0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	0002      	movs	r2, r0
 80039e8:	1dfb      	adds	r3, r7, #7
 80039ea:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80039ec:	1dfb      	adds	r3, r7, #7
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	001a      	movs	r2, r3
 80039f2:	231f      	movs	r3, #31
 80039f4:	401a      	ands	r2, r3
 80039f6:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <NVIC_EnableIRQ+0x28>)
 80039f8:	2101      	movs	r1, #1
 80039fa:	4091      	lsls	r1, r2
 80039fc:	000a      	movs	r2, r1
 80039fe:	601a      	str	r2, [r3, #0]
}
 8003a00:	46c0      	nop			; (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b002      	add	sp, #8
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	e000e100 	.word	0xe000e100

08003a0c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a0c:	b590      	push	{r4, r7, lr}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	0002      	movs	r2, r0
 8003a14:	6039      	str	r1, [r7, #0]
 8003a16:	1dfb      	adds	r3, r7, #7
 8003a18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8003a1a:	1dfb      	adds	r3, r7, #7
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b7f      	cmp	r3, #127	; 0x7f
 8003a20:	d932      	bls.n	8003a88 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a22:	4a2f      	ldr	r2, [pc, #188]	; (8003ae0 <NVIC_SetPriority+0xd4>)
 8003a24:	1dfb      	adds	r3, r7, #7
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	0019      	movs	r1, r3
 8003a2a:	230f      	movs	r3, #15
 8003a2c:	400b      	ands	r3, r1
 8003a2e:	3b08      	subs	r3, #8
 8003a30:	089b      	lsrs	r3, r3, #2
 8003a32:	3306      	adds	r3, #6
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	18d3      	adds	r3, r2, r3
 8003a38:	3304      	adds	r3, #4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	1dfa      	adds	r2, r7, #7
 8003a3e:	7812      	ldrb	r2, [r2, #0]
 8003a40:	0011      	movs	r1, r2
 8003a42:	2203      	movs	r2, #3
 8003a44:	400a      	ands	r2, r1
 8003a46:	00d2      	lsls	r2, r2, #3
 8003a48:	21ff      	movs	r1, #255	; 0xff
 8003a4a:	4091      	lsls	r1, r2
 8003a4c:	000a      	movs	r2, r1
 8003a4e:	43d2      	mvns	r2, r2
 8003a50:	401a      	ands	r2, r3
 8003a52:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	019b      	lsls	r3, r3, #6
 8003a58:	22ff      	movs	r2, #255	; 0xff
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	1dfb      	adds	r3, r7, #7
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	0018      	movs	r0, r3
 8003a62:	2303      	movs	r3, #3
 8003a64:	4003      	ands	r3, r0
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a6a:	481d      	ldr	r0, [pc, #116]	; (8003ae0 <NVIC_SetPriority+0xd4>)
 8003a6c:	1dfb      	adds	r3, r7, #7
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	001c      	movs	r4, r3
 8003a72:	230f      	movs	r3, #15
 8003a74:	4023      	ands	r3, r4
 8003a76:	3b08      	subs	r3, #8
 8003a78:	089b      	lsrs	r3, r3, #2
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	3306      	adds	r3, #6
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	18c3      	adds	r3, r0, r3
 8003a82:	3304      	adds	r3, #4
 8003a84:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003a86:	e027      	b.n	8003ad8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a88:	4a16      	ldr	r2, [pc, #88]	; (8003ae4 <NVIC_SetPriority+0xd8>)
 8003a8a:	1dfb      	adds	r3, r7, #7
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	b25b      	sxtb	r3, r3
 8003a90:	089b      	lsrs	r3, r3, #2
 8003a92:	33c0      	adds	r3, #192	; 0xc0
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	589b      	ldr	r3, [r3, r2]
 8003a98:	1dfa      	adds	r2, r7, #7
 8003a9a:	7812      	ldrb	r2, [r2, #0]
 8003a9c:	0011      	movs	r1, r2
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	400a      	ands	r2, r1
 8003aa2:	00d2      	lsls	r2, r2, #3
 8003aa4:	21ff      	movs	r1, #255	; 0xff
 8003aa6:	4091      	lsls	r1, r2
 8003aa8:	000a      	movs	r2, r1
 8003aaa:	43d2      	mvns	r2, r2
 8003aac:	401a      	ands	r2, r3
 8003aae:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	019b      	lsls	r3, r3, #6
 8003ab4:	22ff      	movs	r2, #255	; 0xff
 8003ab6:	401a      	ands	r2, r3
 8003ab8:	1dfb      	adds	r3, r7, #7
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	0018      	movs	r0, r3
 8003abe:	2303      	movs	r3, #3
 8003ac0:	4003      	ands	r3, r0
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ac6:	4807      	ldr	r0, [pc, #28]	; (8003ae4 <NVIC_SetPriority+0xd8>)
 8003ac8:	1dfb      	adds	r3, r7, #7
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	b25b      	sxtb	r3, r3
 8003ace:	089b      	lsrs	r3, r3, #2
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	33c0      	adds	r3, #192	; 0xc0
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	501a      	str	r2, [r3, r0]
}
 8003ad8:	46c0      	nop			; (mov r8, r8)
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b003      	add	sp, #12
 8003ade:	bd90      	pop	{r4, r7, pc}
 8003ae0:	e000ed00 	.word	0xe000ed00
 8003ae4:	e000e100 	.word	0xe000e100

08003ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	1e5a      	subs	r2, r3, #1
 8003af4:	2380      	movs	r3, #128	; 0x80
 8003af6:	045b      	lsls	r3, r3, #17
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d301      	bcc.n	8003b00 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003afc:	2301      	movs	r3, #1
 8003afe:	e010      	b.n	8003b22 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b00:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <SysTick_Config+0x44>)
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	3a01      	subs	r2, #1
 8003b06:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b08:	2301      	movs	r3, #1
 8003b0a:	425b      	negs	r3, r3
 8003b0c:	2103      	movs	r1, #3
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f7ff ff7c 	bl	8003a0c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b14:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <SysTick_Config+0x44>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b1a:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <SysTick_Config+0x44>)
 8003b1c:	2207      	movs	r2, #7
 8003b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	0018      	movs	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	b002      	add	sp, #8
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	e000e010 	.word	0xe000e010

08003b30 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	210f      	movs	r1, #15
 8003b3c:	187b      	adds	r3, r7, r1
 8003b3e:	1c02      	adds	r2, r0, #0
 8003b40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	187b      	adds	r3, r7, r1
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	b25b      	sxtb	r3, r3
 8003b4a:	0011      	movs	r1, r2
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f7ff ff5d 	bl	8003a0c <NVIC_SetPriority>
}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	46bd      	mov	sp, r7
 8003b56:	b004      	add	sp, #16
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b082      	sub	sp, #8
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	0002      	movs	r2, r0
 8003b62:	1dfb      	adds	r3, r7, #7
 8003b64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b66:	1dfb      	adds	r3, r7, #7
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	b25b      	sxtb	r3, r3
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f7ff ff37 	bl	80039e0 <NVIC_EnableIRQ>
}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b002      	add	sp, #8
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	0018      	movs	r0, r3
 8003b86:	f7ff ffaf 	bl	8003ae8 <SysTick_Config>
 8003b8a:	0003      	movs	r3, r0
}
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b002      	add	sp, #8
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e042      	b.n	8003c30 <HAL_DMA_Init+0x9c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2221      	movs	r2, #33	; 0x21
 8003bae:	2102      	movs	r1, #2
 8003bb0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4a1e      	ldr	r2, [pc, #120]	; (8003c38 <HAL_DMA_Init+0xa4>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f000 f906 	bl	8003e0c <DMA_CalcBaseAndBitshift>
  
  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2221      	movs	r2, #33	; 0x21
 8003c22:	2101      	movs	r1, #1
 8003c24:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}  
 8003c30:	0018      	movs	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b004      	add	sp, #16
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	ffffc00f 	.word	0xffffc00f

08003c3c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c44:	210f      	movs	r1, #15
 8003c46:	187b      	adds	r3, r7, r1
 8003c48:	2200      	movs	r2, #0
 8003c4a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2221      	movs	r2, #33	; 0x21
 8003c50:	5c9b      	ldrb	r3, [r3, r2]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d006      	beq.n	8003c66 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2204      	movs	r2, #4
 8003c5c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003c5e:	187b      	adds	r3, r7, r1
 8003c60:	2201      	movs	r2, #1
 8003c62:	701a      	strb	r2, [r3, #0]
 8003c64:	e028      	b.n	8003cb8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	210e      	movs	r1, #14
 8003c72:	438a      	bics	r2, r1
 8003c74:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2101      	movs	r1, #1
 8003c82:	438a      	bics	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8e:	2101      	movs	r1, #1
 8003c90:	4091      	lsls	r1, r2
 8003c92:	000a      	movs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2221      	movs	r2, #33	; 0x21
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d004      	beq.n	8003cb8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	0010      	movs	r0, r2
 8003cb6:	4798      	blx	r3
    } 
  }
  return status;
 8003cb8:	230f      	movs	r3, #15
 8003cba:	18fb      	adds	r3, r7, r3
 8003cbc:	781b      	ldrb	r3, [r3, #0]
}
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b004      	add	sp, #16
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b084      	sub	sp, #16
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	0013      	movs	r3, r2
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4013      	ands	r3, r2
 8003cec:	d024      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x72>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	d020      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d107      	bne.n	8003d12 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2104      	movs	r1, #4
 8003d0e:	438a      	bics	r2, r1
 8003d10:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1a:	2104      	movs	r1, #4
 8003d1c:	4091      	lsls	r1, r2
 8003d1e:	000a      	movs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d100      	bne.n	8003d2c <HAL_DMA_IRQHandler+0x66>
 8003d2a:	e06a      	b.n	8003e02 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	0010      	movs	r0, r2
 8003d34:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003d36:	e064      	b.n	8003e02 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	0013      	movs	r3, r2
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4013      	ands	r3, r2
 8003d46:	d02b      	beq.n	8003da0 <HAL_DMA_IRQHandler+0xda>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d027      	beq.n	8003da0 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2220      	movs	r2, #32
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d10b      	bne.n	8003d74 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	210a      	movs	r1, #10
 8003d68:	438a      	bics	r2, r1
 8003d6a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2221      	movs	r2, #33	; 0x21
 8003d70:	2101      	movs	r1, #1
 8003d72:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7c:	2102      	movs	r1, #2
 8003d7e:	4091      	lsls	r1, r2
 8003d80:	000a      	movs	r2, r1
 8003d82:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	2100      	movs	r1, #0
 8003d8a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d036      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	0010      	movs	r0, r2
 8003d9c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003d9e:	e030      	b.n	8003e02 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	2208      	movs	r2, #8
 8003da6:	409a      	lsls	r2, r3
 8003da8:	0013      	movs	r3, r2
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4013      	ands	r3, r2
 8003dae:	d028      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x13c>
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2208      	movs	r2, #8
 8003db4:	4013      	ands	r3, r2
 8003db6:	d024      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	210e      	movs	r1, #14
 8003dc4:	438a      	bics	r2, r1
 8003dc6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	4091      	lsls	r1, r2
 8003dd4:	000a      	movs	r2, r1
 8003dd6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2221      	movs	r2, #33	; 0x21
 8003de2:	2101      	movs	r1, #1
 8003de4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	2100      	movs	r1, #0
 8003dec:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	0010      	movs	r0, r2
 8003dfe:	4798      	blx	r3
    }
   }
}  
 8003e00:	e7ff      	b.n	8003e02 <HAL_DMA_IRQHandler+0x13c>
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b004      	add	sp, #16
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a08      	ldr	r2, [pc, #32]	; (8003e3c <DMA_CalcBaseAndBitshift+0x30>)
 8003e1a:	4694      	mov	ip, r2
 8003e1c:	4463      	add	r3, ip
 8003e1e:	2114      	movs	r1, #20
 8003e20:	0018      	movs	r0, r3
 8003e22:	f7fc f971 	bl	8000108 <__udivsi3>
 8003e26:	0003      	movs	r3, r0
 8003e28:	009a      	lsls	r2, r3, #2
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a03      	ldr	r2, [pc, #12]	; (8003e40 <DMA_CalcBaseAndBitshift+0x34>)
 8003e32:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003e34:	46c0      	nop			; (mov r8, r8)
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b002      	add	sp, #8
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	bffdfff8 	.word	0xbffdfff8
 8003e40:	40020000 	.word	0x40020000

08003e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003e5a:	e14f      	b.n	80040fc <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2101      	movs	r1, #1
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4091      	lsls	r1, r2
 8003e66:	000a      	movs	r2, r1
 8003e68:	4013      	ands	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d100      	bne.n	8003e74 <HAL_GPIO_Init+0x30>
 8003e72:	e140      	b.n	80040f6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d003      	beq.n	8003e84 <HAL_GPIO_Init+0x40>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b12      	cmp	r3, #18
 8003e82:	d123      	bne.n	8003ecc <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	08da      	lsrs	r2, r3, #3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3208      	adds	r2, #8
 8003e8c:	0092      	lsls	r2, r2, #2
 8003e8e:	58d3      	ldr	r3, [r2, r3]
 8003e90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2207      	movs	r2, #7
 8003e96:	4013      	ands	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	220f      	movs	r2, #15
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	0013      	movs	r3, r2
 8003ea0:	43da      	mvns	r2, r3
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	2107      	movs	r1, #7
 8003eb0:	400b      	ands	r3, r1
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	0013      	movs	r3, r2
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	08da      	lsrs	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3208      	adds	r2, #8
 8003ec6:	0092      	lsls	r2, r2, #2
 8003ec8:	6939      	ldr	r1, [r7, #16]
 8003eca:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	2203      	movs	r2, #3
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	0013      	movs	r3, r2
 8003edc:	43da      	mvns	r2, r3
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2203      	movs	r2, #3
 8003eea:	401a      	ands	r2, r3
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	409a      	lsls	r2, r3
 8003ef2:	0013      	movs	r3, r2
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d00b      	beq.n	8003f20 <HAL_GPIO_Init+0xdc>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d007      	beq.n	8003f20 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f14:	2b11      	cmp	r3, #17
 8003f16:	d003      	beq.n	8003f20 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b12      	cmp	r3, #18
 8003f1e:	d130      	bne.n	8003f82 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	409a      	lsls	r2, r3
 8003f2e:	0013      	movs	r3, r2
 8003f30:	43da      	mvns	r2, r3
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4013      	ands	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	409a      	lsls	r2, r3
 8003f42:	0013      	movs	r3, r2
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003f56:	2201      	movs	r2, #1
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	409a      	lsls	r2, r3
 8003f5c:	0013      	movs	r3, r2
 8003f5e:	43da      	mvns	r2, r3
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4013      	ands	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	091b      	lsrs	r3, r3, #4
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	401a      	ands	r2, r3
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	409a      	lsls	r2, r3
 8003f74:	0013      	movs	r3, r2
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	409a      	lsls	r2, r3
 8003f90:	0013      	movs	r3, r2
 8003f92:	43da      	mvns	r2, r3
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	4013      	ands	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	409a      	lsls	r2, r3
 8003fa4:	0013      	movs	r3, r2
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	2380      	movs	r3, #128	; 0x80
 8003fb8:	055b      	lsls	r3, r3, #21
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d100      	bne.n	8003fc0 <HAL_GPIO_Init+0x17c>
 8003fbe:	e09a      	b.n	80040f6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fc0:	4b54      	ldr	r3, [pc, #336]	; (8004114 <HAL_GPIO_Init+0x2d0>)
 8003fc2:	699a      	ldr	r2, [r3, #24]
 8003fc4:	4b53      	ldr	r3, [pc, #332]	; (8004114 <HAL_GPIO_Init+0x2d0>)
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	619a      	str	r2, [r3, #24]
 8003fcc:	4b51      	ldr	r3, [pc, #324]	; (8004114 <HAL_GPIO_Init+0x2d0>)
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	60bb      	str	r3, [r7, #8]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8003fd8:	4a4f      	ldr	r2, [pc, #316]	; (8004118 <HAL_GPIO_Init+0x2d4>)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	089b      	lsrs	r3, r3, #2
 8003fde:	3302      	adds	r3, #2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	589b      	ldr	r3, [r3, r2]
 8003fe4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2203      	movs	r2, #3
 8003fea:	4013      	ands	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	220f      	movs	r2, #15
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	0013      	movs	r3, r2
 8003ff4:	43da      	mvns	r2, r3
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	2390      	movs	r3, #144	; 0x90
 8004000:	05db      	lsls	r3, r3, #23
 8004002:	429a      	cmp	r2, r3
 8004004:	d013      	beq.n	800402e <HAL_GPIO_Init+0x1ea>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a44      	ldr	r2, [pc, #272]	; (800411c <HAL_GPIO_Init+0x2d8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00d      	beq.n	800402a <HAL_GPIO_Init+0x1e6>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a43      	ldr	r2, [pc, #268]	; (8004120 <HAL_GPIO_Init+0x2dc>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d007      	beq.n	8004026 <HAL_GPIO_Init+0x1e2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a42      	ldr	r2, [pc, #264]	; (8004124 <HAL_GPIO_Init+0x2e0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d101      	bne.n	8004022 <HAL_GPIO_Init+0x1de>
 800401e:	2303      	movs	r3, #3
 8004020:	e006      	b.n	8004030 <HAL_GPIO_Init+0x1ec>
 8004022:	2305      	movs	r3, #5
 8004024:	e004      	b.n	8004030 <HAL_GPIO_Init+0x1ec>
 8004026:	2302      	movs	r3, #2
 8004028:	e002      	b.n	8004030 <HAL_GPIO_Init+0x1ec>
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <HAL_GPIO_Init+0x1ec>
 800402e:	2300      	movs	r3, #0
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	2103      	movs	r1, #3
 8004034:	400a      	ands	r2, r1
 8004036:	0092      	lsls	r2, r2, #2
 8004038:	4093      	lsls	r3, r2
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004040:	4935      	ldr	r1, [pc, #212]	; (8004118 <HAL_GPIO_Init+0x2d4>)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	089b      	lsrs	r3, r3, #2
 8004046:	3302      	adds	r3, #2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800404e:	4b36      	ldr	r3, [pc, #216]	; (8004128 <HAL_GPIO_Init+0x2e4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	43da      	mvns	r2, r3
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4013      	ands	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	025b      	lsls	r3, r3, #9
 8004066:	4013      	ands	r3, r2
 8004068:	d003      	beq.n	8004072 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004072:	4b2d      	ldr	r3, [pc, #180]	; (8004128 <HAL_GPIO_Init+0x2e4>)
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004078:	4b2b      	ldr	r3, [pc, #172]	; (8004128 <HAL_GPIO_Init+0x2e4>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	43da      	mvns	r2, r3
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4013      	ands	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	2380      	movs	r3, #128	; 0x80
 800408e:	029b      	lsls	r3, r3, #10
 8004090:	4013      	ands	r3, r2
 8004092:	d003      	beq.n	800409c <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800409c:	4b22      	ldr	r3, [pc, #136]	; (8004128 <HAL_GPIO_Init+0x2e4>)
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040a2:	4b21      	ldr	r3, [pc, #132]	; (8004128 <HAL_GPIO_Init+0x2e4>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	43da      	mvns	r2, r3
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4013      	ands	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	2380      	movs	r3, #128	; 0x80
 80040b8:	035b      	lsls	r3, r3, #13
 80040ba:	4013      	ands	r3, r2
 80040bc:	d003      	beq.n	80040c6 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80040c6:	4b18      	ldr	r3, [pc, #96]	; (8004128 <HAL_GPIO_Init+0x2e4>)
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80040cc:	4b16      	ldr	r3, [pc, #88]	; (8004128 <HAL_GPIO_Init+0x2e4>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	43da      	mvns	r2, r3
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4013      	ands	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	2380      	movs	r3, #128	; 0x80
 80040e2:	039b      	lsls	r3, r3, #14
 80040e4:	4013      	ands	r3, r2
 80040e6:	d003      	beq.n	80040f0 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80040f0:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <HAL_GPIO_Init+0x2e4>)
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	3301      	adds	r3, #1
 80040fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	40da      	lsrs	r2, r3
 8004104:	1e13      	subs	r3, r2, #0
 8004106:	d000      	beq.n	800410a <HAL_GPIO_Init+0x2c6>
 8004108:	e6a8      	b.n	8003e5c <HAL_GPIO_Init+0x18>
  } 
}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	46c0      	nop			; (mov r8, r8)
 800410e:	46bd      	mov	sp, r7
 8004110:	b006      	add	sp, #24
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40021000 	.word	0x40021000
 8004118:	40010000 	.word	0x40010000
 800411c:	48000400 	.word	0x48000400
 8004120:	48000800 	.word	0x48000800
 8004124:	48000c00 	.word	0x48000c00
 8004128:	40010400 	.word	0x40010400

0800412c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	0008      	movs	r0, r1
 8004136:	0011      	movs	r1, r2
 8004138:	1cbb      	adds	r3, r7, #2
 800413a:	1c02      	adds	r2, r0, #0
 800413c:	801a      	strh	r2, [r3, #0]
 800413e:	1c7b      	adds	r3, r7, #1
 8004140:	1c0a      	adds	r2, r1, #0
 8004142:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004144:	1c7b      	adds	r3, r7, #1
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d004      	beq.n	8004156 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800414c:	1cbb      	adds	r3, r7, #2
 800414e:	881a      	ldrh	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004154:	e003      	b.n	800415e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004156:	1cbb      	adds	r3, r7, #2
 8004158:	881a      	ldrh	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	46bd      	mov	sp, r7
 8004162:	b002      	add	sp, #8
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2201      	movs	r2, #1
 800417a:	4013      	ands	r3, r2
 800417c:	d100      	bne.n	8004180 <HAL_RCC_OscConfig+0x18>
 800417e:	e08d      	b.n	800429c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004180:	4bc3      	ldr	r3, [pc, #780]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	220c      	movs	r2, #12
 8004186:	4013      	ands	r3, r2
 8004188:	2b04      	cmp	r3, #4
 800418a:	d00e      	beq.n	80041aa <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800418c:	4bc0      	ldr	r3, [pc, #768]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	220c      	movs	r2, #12
 8004192:	4013      	ands	r3, r2
 8004194:	2b08      	cmp	r3, #8
 8004196:	d116      	bne.n	80041c6 <HAL_RCC_OscConfig+0x5e>
 8004198:	4bbd      	ldr	r3, [pc, #756]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	025b      	lsls	r3, r3, #9
 80041a0:	401a      	ands	r2, r3
 80041a2:	2380      	movs	r3, #128	; 0x80
 80041a4:	025b      	lsls	r3, r3, #9
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d10d      	bne.n	80041c6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041aa:	4bb9      	ldr	r3, [pc, #740]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	029b      	lsls	r3, r3, #10
 80041b2:	4013      	ands	r3, r2
 80041b4:	d100      	bne.n	80041b8 <HAL_RCC_OscConfig+0x50>
 80041b6:	e070      	b.n	800429a <HAL_RCC_OscConfig+0x132>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d000      	beq.n	80041c2 <HAL_RCC_OscConfig+0x5a>
 80041c0:	e06b      	b.n	800429a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e2b6      	b.n	8004734 <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d107      	bne.n	80041de <HAL_RCC_OscConfig+0x76>
 80041ce:	4bb0      	ldr	r3, [pc, #704]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4baf      	ldr	r3, [pc, #700]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 80041d4:	2180      	movs	r1, #128	; 0x80
 80041d6:	0249      	lsls	r1, r1, #9
 80041d8:	430a      	orrs	r2, r1
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	e02f      	b.n	800423e <HAL_RCC_OscConfig+0xd6>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10c      	bne.n	8004200 <HAL_RCC_OscConfig+0x98>
 80041e6:	4baa      	ldr	r3, [pc, #680]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	4ba9      	ldr	r3, [pc, #676]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 80041ec:	49a9      	ldr	r1, [pc, #676]	; (8004494 <HAL_RCC_OscConfig+0x32c>)
 80041ee:	400a      	ands	r2, r1
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	4ba7      	ldr	r3, [pc, #668]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4ba6      	ldr	r3, [pc, #664]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 80041f8:	49a7      	ldr	r1, [pc, #668]	; (8004498 <HAL_RCC_OscConfig+0x330>)
 80041fa:	400a      	ands	r2, r1
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	e01e      	b.n	800423e <HAL_RCC_OscConfig+0xd6>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b05      	cmp	r3, #5
 8004206:	d10e      	bne.n	8004226 <HAL_RCC_OscConfig+0xbe>
 8004208:	4ba1      	ldr	r3, [pc, #644]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4ba0      	ldr	r3, [pc, #640]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 800420e:	2180      	movs	r1, #128	; 0x80
 8004210:	02c9      	lsls	r1, r1, #11
 8004212:	430a      	orrs	r2, r1
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	4b9e      	ldr	r3, [pc, #632]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4b9d      	ldr	r3, [pc, #628]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 800421c:	2180      	movs	r1, #128	; 0x80
 800421e:	0249      	lsls	r1, r1, #9
 8004220:	430a      	orrs	r2, r1
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	e00b      	b.n	800423e <HAL_RCC_OscConfig+0xd6>
 8004226:	4b9a      	ldr	r3, [pc, #616]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	4b99      	ldr	r3, [pc, #612]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 800422c:	4999      	ldr	r1, [pc, #612]	; (8004494 <HAL_RCC_OscConfig+0x32c>)
 800422e:	400a      	ands	r2, r1
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	4b97      	ldr	r3, [pc, #604]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	4b96      	ldr	r3, [pc, #600]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 8004238:	4997      	ldr	r1, [pc, #604]	; (8004498 <HAL_RCC_OscConfig+0x330>)
 800423a:	400a      	ands	r2, r1
 800423c:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d014      	beq.n	8004270 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004246:	f7ff fbc1 	bl	80039cc <HAL_GetTick>
 800424a:	0003      	movs	r3, r0
 800424c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004250:	f7ff fbbc 	bl	80039cc <HAL_GetTick>
 8004254:	0002      	movs	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b64      	cmp	r3, #100	; 0x64
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e268      	b.n	8004734 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004262:	4b8b      	ldr	r3, [pc, #556]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	2380      	movs	r3, #128	; 0x80
 8004268:	029b      	lsls	r3, r3, #10
 800426a:	4013      	ands	r3, r2
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0xe8>
 800426e:	e015      	b.n	800429c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004270:	f7ff fbac 	bl	80039cc <HAL_GetTick>
 8004274:	0003      	movs	r3, r0
 8004276:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800427a:	f7ff fba7 	bl	80039cc <HAL_GetTick>
 800427e:	0002      	movs	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b64      	cmp	r3, #100	; 0x64
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e253      	b.n	8004734 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800428c:	4b80      	ldr	r3, [pc, #512]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	2380      	movs	r3, #128	; 0x80
 8004292:	029b      	lsls	r3, r3, #10
 8004294:	4013      	ands	r3, r2
 8004296:	d1f0      	bne.n	800427a <HAL_RCC_OscConfig+0x112>
 8004298:	e000      	b.n	800429c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2202      	movs	r2, #2
 80042a2:	4013      	ands	r3, r2
 80042a4:	d100      	bne.n	80042a8 <HAL_RCC_OscConfig+0x140>
 80042a6:	e069      	b.n	800437c <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80042a8:	4b79      	ldr	r3, [pc, #484]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	220c      	movs	r2, #12
 80042ae:	4013      	ands	r3, r2
 80042b0:	d00b      	beq.n	80042ca <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80042b2:	4b77      	ldr	r3, [pc, #476]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	220c      	movs	r2, #12
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d11c      	bne.n	80042f8 <HAL_RCC_OscConfig+0x190>
 80042be:	4b74      	ldr	r3, [pc, #464]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	2380      	movs	r3, #128	; 0x80
 80042c4:	025b      	lsls	r3, r3, #9
 80042c6:	4013      	ands	r3, r2
 80042c8:	d116      	bne.n	80042f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ca:	4b71      	ldr	r3, [pc, #452]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2202      	movs	r2, #2
 80042d0:	4013      	ands	r3, r2
 80042d2:	d005      	beq.n	80042e0 <HAL_RCC_OscConfig+0x178>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e229      	b.n	8004734 <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e0:	4b6b      	ldr	r3, [pc, #428]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	22f8      	movs	r2, #248	; 0xf8
 80042e6:	4393      	bics	r3, r2
 80042e8:	0019      	movs	r1, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	00da      	lsls	r2, r3, #3
 80042f0:	4b67      	ldr	r3, [pc, #412]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 80042f2:	430a      	orrs	r2, r1
 80042f4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042f6:	e041      	b.n	800437c <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d024      	beq.n	800434a <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004300:	4b63      	ldr	r3, [pc, #396]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	4b62      	ldr	r3, [pc, #392]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 8004306:	2101      	movs	r1, #1
 8004308:	430a      	orrs	r2, r1
 800430a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430c:	f7ff fb5e 	bl	80039cc <HAL_GetTick>
 8004310:	0003      	movs	r3, r0
 8004312:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004316:	f7ff fb59 	bl	80039cc <HAL_GetTick>
 800431a:	0002      	movs	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e205      	b.n	8004734 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004328:	4b59      	ldr	r3, [pc, #356]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2202      	movs	r2, #2
 800432e:	4013      	ands	r3, r2
 8004330:	d0f1      	beq.n	8004316 <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004332:	4b57      	ldr	r3, [pc, #348]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	22f8      	movs	r2, #248	; 0xf8
 8004338:	4393      	bics	r3, r2
 800433a:	0019      	movs	r1, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	00da      	lsls	r2, r3, #3
 8004342:	4b53      	ldr	r3, [pc, #332]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 8004344:	430a      	orrs	r2, r1
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	e018      	b.n	800437c <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800434a:	4b51      	ldr	r3, [pc, #324]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b50      	ldr	r3, [pc, #320]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 8004350:	2101      	movs	r1, #1
 8004352:	438a      	bics	r2, r1
 8004354:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004356:	f7ff fb39 	bl	80039cc <HAL_GetTick>
 800435a:	0003      	movs	r3, r0
 800435c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004360:	f7ff fb34 	bl	80039cc <HAL_GetTick>
 8004364:	0002      	movs	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e1e0      	b.n	8004734 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004372:	4b47      	ldr	r3, [pc, #284]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2202      	movs	r2, #2
 8004378:	4013      	ands	r3, r2
 800437a:	d1f1      	bne.n	8004360 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2208      	movs	r2, #8
 8004382:	4013      	ands	r3, r2
 8004384:	d036      	beq.n	80043f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d019      	beq.n	80043c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800438e:	4b40      	ldr	r3, [pc, #256]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 8004390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004392:	4b3f      	ldr	r3, [pc, #252]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 8004394:	2101      	movs	r1, #1
 8004396:	430a      	orrs	r2, r1
 8004398:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800439a:	f7ff fb17 	bl	80039cc <HAL_GetTick>
 800439e:	0003      	movs	r3, r0
 80043a0:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a4:	f7ff fb12 	bl	80039cc <HAL_GetTick>
 80043a8:	0002      	movs	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e1be      	b.n	8004734 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b6:	4b36      	ldr	r3, [pc, #216]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	2202      	movs	r2, #2
 80043bc:	4013      	ands	r3, r2
 80043be:	d0f1      	beq.n	80043a4 <HAL_RCC_OscConfig+0x23c>
 80043c0:	e018      	b.n	80043f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c2:	4b33      	ldr	r3, [pc, #204]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 80043c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043c6:	4b32      	ldr	r3, [pc, #200]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 80043c8:	2101      	movs	r1, #1
 80043ca:	438a      	bics	r2, r1
 80043cc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ce:	f7ff fafd 	bl	80039cc <HAL_GetTick>
 80043d2:	0003      	movs	r3, r0
 80043d4:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043d8:	f7ff faf8 	bl	80039cc <HAL_GetTick>
 80043dc:	0002      	movs	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e1a4      	b.n	8004734 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ea:	4b29      	ldr	r3, [pc, #164]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	2202      	movs	r2, #2
 80043f0:	4013      	ands	r3, r2
 80043f2:	d1f1      	bne.n	80043d8 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2204      	movs	r2, #4
 80043fa:	4013      	ands	r3, r2
 80043fc:	d100      	bne.n	8004400 <HAL_RCC_OscConfig+0x298>
 80043fe:	e0b5      	b.n	800456c <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004400:	2017      	movs	r0, #23
 8004402:	183b      	adds	r3, r7, r0
 8004404:	2200      	movs	r2, #0
 8004406:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004408:	4b21      	ldr	r3, [pc, #132]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 800440a:	69da      	ldr	r2, [r3, #28]
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	055b      	lsls	r3, r3, #21
 8004410:	4013      	ands	r3, r2
 8004412:	d110      	bne.n	8004436 <HAL_RCC_OscConfig+0x2ce>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004414:	4b1e      	ldr	r3, [pc, #120]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	4b1d      	ldr	r3, [pc, #116]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 800441a:	2180      	movs	r1, #128	; 0x80
 800441c:	0549      	lsls	r1, r1, #21
 800441e:	430a      	orrs	r2, r1
 8004420:	61da      	str	r2, [r3, #28]
 8004422:	4b1b      	ldr	r3, [pc, #108]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 8004424:	69da      	ldr	r2, [r3, #28]
 8004426:	2380      	movs	r3, #128	; 0x80
 8004428:	055b      	lsls	r3, r3, #21
 800442a:	4013      	ands	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004430:	183b      	adds	r3, r7, r0
 8004432:	2201      	movs	r2, #1
 8004434:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004436:	4b19      	ldr	r3, [pc, #100]	; (800449c <HAL_RCC_OscConfig+0x334>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	2380      	movs	r3, #128	; 0x80
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	4013      	ands	r3, r2
 8004440:	d11a      	bne.n	8004478 <HAL_RCC_OscConfig+0x310>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004442:	4b16      	ldr	r3, [pc, #88]	; (800449c <HAL_RCC_OscConfig+0x334>)
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	4b15      	ldr	r3, [pc, #84]	; (800449c <HAL_RCC_OscConfig+0x334>)
 8004448:	2180      	movs	r1, #128	; 0x80
 800444a:	0049      	lsls	r1, r1, #1
 800444c:	430a      	orrs	r2, r1
 800444e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004450:	f7ff fabc 	bl	80039cc <HAL_GetTick>
 8004454:	0003      	movs	r3, r0
 8004456:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x304>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800445a:	f7ff fab7 	bl	80039cc <HAL_GetTick>
 800445e:	0002      	movs	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b64      	cmp	r3, #100	; 0x64
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e163      	b.n	8004734 <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <HAL_RCC_OscConfig+0x334>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	2380      	movs	r3, #128	; 0x80
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4013      	ands	r3, r2
 8004476:	d0f0      	beq.n	800445a <HAL_RCC_OscConfig+0x2f2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d10f      	bne.n	80044a0 <HAL_RCC_OscConfig+0x338>
 8004480:	4b03      	ldr	r3, [pc, #12]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 8004482:	6a1a      	ldr	r2, [r3, #32]
 8004484:	4b02      	ldr	r3, [pc, #8]	; (8004490 <HAL_RCC_OscConfig+0x328>)
 8004486:	2101      	movs	r1, #1
 8004488:	430a      	orrs	r2, r1
 800448a:	621a      	str	r2, [r3, #32]
 800448c:	e036      	b.n	80044fc <HAL_RCC_OscConfig+0x394>
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	40021000 	.word	0x40021000
 8004494:	fffeffff 	.word	0xfffeffff
 8004498:	fffbffff 	.word	0xfffbffff
 800449c:	40007000 	.word	0x40007000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10c      	bne.n	80044c2 <HAL_RCC_OscConfig+0x35a>
 80044a8:	4ba4      	ldr	r3, [pc, #656]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80044aa:	6a1a      	ldr	r2, [r3, #32]
 80044ac:	4ba3      	ldr	r3, [pc, #652]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80044ae:	2101      	movs	r1, #1
 80044b0:	438a      	bics	r2, r1
 80044b2:	621a      	str	r2, [r3, #32]
 80044b4:	4ba1      	ldr	r3, [pc, #644]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80044b6:	6a1a      	ldr	r2, [r3, #32]
 80044b8:	4ba0      	ldr	r3, [pc, #640]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80044ba:	2104      	movs	r1, #4
 80044bc:	438a      	bics	r2, r1
 80044be:	621a      	str	r2, [r3, #32]
 80044c0:	e01c      	b.n	80044fc <HAL_RCC_OscConfig+0x394>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2b05      	cmp	r3, #5
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x37c>
 80044ca:	4b9c      	ldr	r3, [pc, #624]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80044cc:	6a1a      	ldr	r2, [r3, #32]
 80044ce:	4b9b      	ldr	r3, [pc, #620]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80044d0:	2104      	movs	r1, #4
 80044d2:	430a      	orrs	r2, r1
 80044d4:	621a      	str	r2, [r3, #32]
 80044d6:	4b99      	ldr	r3, [pc, #612]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80044d8:	6a1a      	ldr	r2, [r3, #32]
 80044da:	4b98      	ldr	r3, [pc, #608]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80044dc:	2101      	movs	r1, #1
 80044de:	430a      	orrs	r2, r1
 80044e0:	621a      	str	r2, [r3, #32]
 80044e2:	e00b      	b.n	80044fc <HAL_RCC_OscConfig+0x394>
 80044e4:	4b95      	ldr	r3, [pc, #596]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80044e6:	6a1a      	ldr	r2, [r3, #32]
 80044e8:	4b94      	ldr	r3, [pc, #592]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80044ea:	2101      	movs	r1, #1
 80044ec:	438a      	bics	r2, r1
 80044ee:	621a      	str	r2, [r3, #32]
 80044f0:	4b92      	ldr	r3, [pc, #584]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80044f2:	6a1a      	ldr	r2, [r3, #32]
 80044f4:	4b91      	ldr	r3, [pc, #580]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80044f6:	2104      	movs	r1, #4
 80044f8:	438a      	bics	r2, r1
 80044fa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d014      	beq.n	800452e <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004504:	f7ff fa62 	bl	80039cc <HAL_GetTick>
 8004508:	0003      	movs	r3, r0
 800450a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450c:	e009      	b.n	8004522 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800450e:	f7ff fa5d 	bl	80039cc <HAL_GetTick>
 8004512:	0002      	movs	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	4a89      	ldr	r2, [pc, #548]	; (8004740 <HAL_RCC_OscConfig+0x5d8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e108      	b.n	8004734 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004522:	4b86      	ldr	r3, [pc, #536]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	2202      	movs	r2, #2
 8004528:	4013      	ands	r3, r2
 800452a:	d0f0      	beq.n	800450e <HAL_RCC_OscConfig+0x3a6>
 800452c:	e013      	b.n	8004556 <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800452e:	f7ff fa4d 	bl	80039cc <HAL_GetTick>
 8004532:	0003      	movs	r3, r0
 8004534:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004536:	e009      	b.n	800454c <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004538:	f7ff fa48 	bl	80039cc <HAL_GetTick>
 800453c:	0002      	movs	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	4a7f      	ldr	r2, [pc, #508]	; (8004740 <HAL_RCC_OscConfig+0x5d8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e0f3      	b.n	8004734 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800454c:	4b7b      	ldr	r3, [pc, #492]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	2202      	movs	r2, #2
 8004552:	4013      	ands	r3, r2
 8004554:	d1f0      	bne.n	8004538 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004556:	2317      	movs	r3, #23
 8004558:	18fb      	adds	r3, r7, r3
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d105      	bne.n	800456c <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004560:	4b76      	ldr	r3, [pc, #472]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 8004562:	69da      	ldr	r2, [r3, #28]
 8004564:	4b75      	ldr	r3, [pc, #468]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 8004566:	4977      	ldr	r1, [pc, #476]	; (8004744 <HAL_RCC_OscConfig+0x5dc>)
 8004568:	400a      	ands	r2, r1
 800456a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2210      	movs	r2, #16
 8004572:	4013      	ands	r3, r2
 8004574:	d063      	beq.n	800463e <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d12a      	bne.n	80045d4 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800457e:	4b6f      	ldr	r3, [pc, #444]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 8004580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004582:	4b6e      	ldr	r3, [pc, #440]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 8004584:	2104      	movs	r1, #4
 8004586:	430a      	orrs	r2, r1
 8004588:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800458a:	4b6c      	ldr	r3, [pc, #432]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 800458c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800458e:	4b6b      	ldr	r3, [pc, #428]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 8004590:	2101      	movs	r1, #1
 8004592:	430a      	orrs	r2, r1
 8004594:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004596:	f7ff fa19 	bl	80039cc <HAL_GetTick>
 800459a:	0003      	movs	r3, r0
 800459c:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80045a0:	f7ff fa14 	bl	80039cc <HAL_GetTick>
 80045a4:	0002      	movs	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e0c0      	b.n	8004734 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80045b2:	4b62      	ldr	r3, [pc, #392]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80045b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b6:	2202      	movs	r2, #2
 80045b8:	4013      	ands	r3, r2
 80045ba:	d0f1      	beq.n	80045a0 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80045bc:	4b5f      	ldr	r3, [pc, #380]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80045be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c0:	22f8      	movs	r2, #248	; 0xf8
 80045c2:	4393      	bics	r3, r2
 80045c4:	0019      	movs	r1, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	00da      	lsls	r2, r3, #3
 80045cc:	4b5b      	ldr	r3, [pc, #364]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80045ce:	430a      	orrs	r2, r1
 80045d0:	635a      	str	r2, [r3, #52]	; 0x34
 80045d2:	e034      	b.n	800463e <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	3305      	adds	r3, #5
 80045da:	d111      	bne.n	8004600 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80045dc:	4b57      	ldr	r3, [pc, #348]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80045de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e0:	4b56      	ldr	r3, [pc, #344]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80045e2:	2104      	movs	r1, #4
 80045e4:	438a      	bics	r2, r1
 80045e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80045e8:	4b54      	ldr	r3, [pc, #336]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80045ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ec:	22f8      	movs	r2, #248	; 0xf8
 80045ee:	4393      	bics	r3, r2
 80045f0:	0019      	movs	r1, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	00da      	lsls	r2, r3, #3
 80045f8:	4b50      	ldr	r3, [pc, #320]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80045fa:	430a      	orrs	r2, r1
 80045fc:	635a      	str	r2, [r3, #52]	; 0x34
 80045fe:	e01e      	b.n	800463e <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004600:	4b4e      	ldr	r3, [pc, #312]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 8004602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004604:	4b4d      	ldr	r3, [pc, #308]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 8004606:	2104      	movs	r1, #4
 8004608:	430a      	orrs	r2, r1
 800460a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800460c:	4b4b      	ldr	r3, [pc, #300]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 800460e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004610:	4b4a      	ldr	r3, [pc, #296]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 8004612:	2101      	movs	r1, #1
 8004614:	438a      	bics	r2, r1
 8004616:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004618:	f7ff f9d8 	bl	80039cc <HAL_GetTick>
 800461c:	0003      	movs	r3, r0
 800461e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004622:	f7ff f9d3 	bl	80039cc <HAL_GetTick>
 8004626:	0002      	movs	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e07f      	b.n	8004734 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004634:	4b41      	ldr	r3, [pc, #260]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 8004636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004638:	2202      	movs	r2, #2
 800463a:	4013      	ands	r3, r2
 800463c:	d1f1      	bne.n	8004622 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d100      	bne.n	8004648 <HAL_RCC_OscConfig+0x4e0>
 8004646:	e074      	b.n	8004732 <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004648:	4b3c      	ldr	r3, [pc, #240]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	220c      	movs	r2, #12
 800464e:	4013      	ands	r3, r2
 8004650:	2b08      	cmp	r3, #8
 8004652:	d100      	bne.n	8004656 <HAL_RCC_OscConfig+0x4ee>
 8004654:	e06b      	b.n	800472e <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d14c      	bne.n	80046f8 <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800465e:	4b37      	ldr	r3, [pc, #220]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	4b36      	ldr	r3, [pc, #216]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 8004664:	4938      	ldr	r1, [pc, #224]	; (8004748 <HAL_RCC_OscConfig+0x5e0>)
 8004666:	400a      	ands	r2, r1
 8004668:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466a:	f7ff f9af 	bl	80039cc <HAL_GetTick>
 800466e:	0003      	movs	r3, r0
 8004670:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004674:	f7ff f9aa 	bl	80039cc <HAL_GetTick>
 8004678:	0002      	movs	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e056      	b.n	8004734 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004686:	4b2d      	ldr	r3, [pc, #180]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	2380      	movs	r3, #128	; 0x80
 800468c:	049b      	lsls	r3, r3, #18
 800468e:	4013      	ands	r3, r2
 8004690:	d1f0      	bne.n	8004674 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004692:	4b2a      	ldr	r3, [pc, #168]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 8004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004696:	220f      	movs	r2, #15
 8004698:	4393      	bics	r3, r2
 800469a:	0019      	movs	r1, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a0:	4b26      	ldr	r3, [pc, #152]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80046a2:	430a      	orrs	r2, r1
 80046a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80046a6:	4b25      	ldr	r3, [pc, #148]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4a28      	ldr	r2, [pc, #160]	; (800474c <HAL_RCC_OscConfig+0x5e4>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	0019      	movs	r1, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	431a      	orrs	r2, r3
 80046ba:	4b20      	ldr	r3, [pc, #128]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80046bc:	430a      	orrs	r2, r1
 80046be:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c0:	4b1e      	ldr	r3, [pc, #120]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	4b1d      	ldr	r3, [pc, #116]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80046c6:	2180      	movs	r1, #128	; 0x80
 80046c8:	0449      	lsls	r1, r1, #17
 80046ca:	430a      	orrs	r2, r1
 80046cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ce:	f7ff f97d 	bl	80039cc <HAL_GetTick>
 80046d2:	0003      	movs	r3, r0
 80046d4:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d8:	f7ff f978 	bl	80039cc <HAL_GetTick>
 80046dc:	0002      	movs	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e024      	b.n	8004734 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046ea:	4b14      	ldr	r3, [pc, #80]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	2380      	movs	r3, #128	; 0x80
 80046f0:	049b      	lsls	r3, r3, #18
 80046f2:	4013      	ands	r3, r2
 80046f4:	d0f0      	beq.n	80046d8 <HAL_RCC_OscConfig+0x570>
 80046f6:	e01c      	b.n	8004732 <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f8:	4b10      	ldr	r3, [pc, #64]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	4b0f      	ldr	r3, [pc, #60]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 80046fe:	4912      	ldr	r1, [pc, #72]	; (8004748 <HAL_RCC_OscConfig+0x5e0>)
 8004700:	400a      	ands	r2, r1
 8004702:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004704:	f7ff f962 	bl	80039cc <HAL_GetTick>
 8004708:	0003      	movs	r3, r0
 800470a:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800470e:	f7ff f95d 	bl	80039cc <HAL_GetTick>
 8004712:	0002      	movs	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e009      	b.n	8004734 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004720:	4b06      	ldr	r3, [pc, #24]	; (800473c <HAL_RCC_OscConfig+0x5d4>)
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	2380      	movs	r3, #128	; 0x80
 8004726:	049b      	lsls	r3, r3, #18
 8004728:	4013      	ands	r3, r2
 800472a:	d1f0      	bne.n	800470e <HAL_RCC_OscConfig+0x5a6>
 800472c:	e001      	b.n	8004732 <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	0018      	movs	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	b006      	add	sp, #24
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40021000 	.word	0x40021000
 8004740:	00001388 	.word	0x00001388
 8004744:	efffffff 	.word	0xefffffff
 8004748:	feffffff 	.word	0xfeffffff
 800474c:	ffc2ffff 	.word	0xffc2ffff

08004750 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800475e:	4b6a      	ldr	r3, [pc, #424]	; (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2201      	movs	r2, #1
 8004764:	4013      	ands	r3, r2
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d911      	bls.n	8004790 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476c:	4b66      	ldr	r3, [pc, #408]	; (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2201      	movs	r2, #1
 8004772:	4393      	bics	r3, r2
 8004774:	0019      	movs	r1, r3
 8004776:	4b64      	ldr	r3, [pc, #400]	; (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800477e:	4b62      	ldr	r3, [pc, #392]	; (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2201      	movs	r2, #1
 8004784:	4013      	ands	r3, r2
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0b6      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2202      	movs	r2, #2
 8004796:	4013      	ands	r3, r2
 8004798:	d009      	beq.n	80047ae <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800479a:	4b5c      	ldr	r3, [pc, #368]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	22f0      	movs	r2, #240	; 0xf0
 80047a0:	4393      	bics	r3, r2
 80047a2:	0019      	movs	r1, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	4b58      	ldr	r3, [pc, #352]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	430a      	orrs	r2, r1
 80047ac:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2201      	movs	r2, #1
 80047b4:	4013      	ands	r3, r2
 80047b6:	d100      	bne.n	80047ba <HAL_RCC_ClockConfig+0x6a>
 80047b8:	e067      	b.n	800488a <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d107      	bne.n	80047d2 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c2:	4b52      	ldr	r3, [pc, #328]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	2380      	movs	r3, #128	; 0x80
 80047c8:	029b      	lsls	r3, r3, #10
 80047ca:	4013      	ands	r3, r2
 80047cc:	d114      	bne.n	80047f8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e095      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d107      	bne.n	80047ea <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047da:	4b4c      	ldr	r3, [pc, #304]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	2380      	movs	r3, #128	; 0x80
 80047e0:	049b      	lsls	r3, r3, #18
 80047e2:	4013      	ands	r3, r2
 80047e4:	d108      	bne.n	80047f8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e089      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ea:	4b48      	ldr	r3, [pc, #288]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2202      	movs	r2, #2
 80047f0:	4013      	ands	r3, r2
 80047f2:	d101      	bne.n	80047f8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e082      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047f8:	4b44      	ldr	r3, [pc, #272]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2203      	movs	r2, #3
 80047fe:	4393      	bics	r3, r2
 8004800:	0019      	movs	r1, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	4b41      	ldr	r3, [pc, #260]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 8004808:	430a      	orrs	r2, r1
 800480a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800480c:	f7ff f8de 	bl	80039cc <HAL_GetTick>
 8004810:	0003      	movs	r3, r0
 8004812:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d111      	bne.n	8004840 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800481c:	e009      	b.n	8004832 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800481e:	f7ff f8d5 	bl	80039cc <HAL_GetTick>
 8004822:	0002      	movs	r2, r0
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	4a39      	ldr	r2, [pc, #228]	; (8004910 <HAL_RCC_ClockConfig+0x1c0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e065      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004832:	4b36      	ldr	r3, [pc, #216]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	220c      	movs	r2, #12
 8004838:	4013      	ands	r3, r2
 800483a:	2b04      	cmp	r3, #4
 800483c:	d1ef      	bne.n	800481e <HAL_RCC_ClockConfig+0xce>
 800483e:	e024      	b.n	800488a <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b02      	cmp	r3, #2
 8004846:	d11b      	bne.n	8004880 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004848:	e009      	b.n	800485e <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800484a:	f7ff f8bf 	bl	80039cc <HAL_GetTick>
 800484e:	0002      	movs	r2, r0
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	4a2e      	ldr	r2, [pc, #184]	; (8004910 <HAL_RCC_ClockConfig+0x1c0>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e04f      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800485e:	4b2b      	ldr	r3, [pc, #172]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	220c      	movs	r2, #12
 8004864:	4013      	ands	r3, r2
 8004866:	2b08      	cmp	r3, #8
 8004868:	d1ef      	bne.n	800484a <HAL_RCC_ClockConfig+0xfa>
 800486a:	e00e      	b.n	800488a <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800486c:	f7ff f8ae 	bl	80039cc <HAL_GetTick>
 8004870:	0002      	movs	r2, r0
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	4a26      	ldr	r2, [pc, #152]	; (8004910 <HAL_RCC_ClockConfig+0x1c0>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e03e      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004880:	4b22      	ldr	r3, [pc, #136]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	220c      	movs	r2, #12
 8004886:	4013      	ands	r3, r2
 8004888:	d1f0      	bne.n	800486c <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800488a:	4b1f      	ldr	r3, [pc, #124]	; (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2201      	movs	r2, #1
 8004890:	4013      	ands	r3, r2
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d211      	bcs.n	80048bc <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004898:	4b1b      	ldr	r3, [pc, #108]	; (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2201      	movs	r2, #1
 800489e:	4393      	bics	r3, r2
 80048a0:	0019      	movs	r1, r3
 80048a2:	4b19      	ldr	r3, [pc, #100]	; (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80048aa:	4b17      	ldr	r3, [pc, #92]	; (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2201      	movs	r2, #1
 80048b0:	4013      	ands	r3, r2
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e020      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2204      	movs	r2, #4
 80048c2:	4013      	ands	r3, r2
 80048c4:	d009      	beq.n	80048da <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80048c6:	4b11      	ldr	r3, [pc, #68]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	4a12      	ldr	r2, [pc, #72]	; (8004914 <HAL_RCC_ClockConfig+0x1c4>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	0019      	movs	r1, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	4b0d      	ldr	r3, [pc, #52]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	430a      	orrs	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80048da:	f000 f821 	bl	8004920 <HAL_RCC_GetSysClockFreq>
 80048de:	0001      	movs	r1, r0
 80048e0:	4b0a      	ldr	r3, [pc, #40]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	220f      	movs	r2, #15
 80048e8:	4013      	ands	r3, r2
 80048ea:	4a0b      	ldr	r2, [pc, #44]	; (8004918 <HAL_RCC_ClockConfig+0x1c8>)
 80048ec:	5cd3      	ldrb	r3, [r2, r3]
 80048ee:	000a      	movs	r2, r1
 80048f0:	40da      	lsrs	r2, r3
 80048f2:	4b0a      	ldr	r3, [pc, #40]	; (800491c <HAL_RCC_ClockConfig+0x1cc>)
 80048f4:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80048f6:	2000      	movs	r0, #0
 80048f8:	f7ff f840 	bl	800397c <HAL_InitTick>
  
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	0018      	movs	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	b004      	add	sp, #16
 8004904:	bd80      	pop	{r7, pc}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	40022000 	.word	0x40022000
 800490c:	40021000 	.word	0x40021000
 8004910:	00001388 	.word	0x00001388
 8004914:	fffff8ff 	.word	0xfffff8ff
 8004918:	080064e4 	.word	0x080064e4
 800491c:	2000003c 	.word	0x2000003c

08004920 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004920:	b590      	push	{r4, r7, lr}
 8004922:	b08f      	sub	sp, #60	; 0x3c
 8004924:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004926:	2314      	movs	r3, #20
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	4a2b      	ldr	r2, [pc, #172]	; (80049d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800492c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800492e:	c313      	stmia	r3!, {r0, r1, r4}
 8004930:	6812      	ldr	r2, [r2, #0]
 8004932:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004934:	1d3b      	adds	r3, r7, #4
 8004936:	4a29      	ldr	r2, [pc, #164]	; (80049dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004938:	ca13      	ldmia	r2!, {r0, r1, r4}
 800493a:	c313      	stmia	r3!, {r0, r1, r4}
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004944:	2300      	movs	r3, #0
 8004946:	62bb      	str	r3, [r7, #40]	; 0x28
 8004948:	2300      	movs	r3, #0
 800494a:	637b      	str	r3, [r7, #52]	; 0x34
 800494c:	2300      	movs	r3, #0
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004954:	4b22      	ldr	r3, [pc, #136]	; (80049e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495c:	220c      	movs	r2, #12
 800495e:	4013      	ands	r3, r2
 8004960:	2b04      	cmp	r3, #4
 8004962:	d002      	beq.n	800496a <HAL_RCC_GetSysClockFreq+0x4a>
 8004964:	2b08      	cmp	r3, #8
 8004966:	d003      	beq.n	8004970 <HAL_RCC_GetSysClockFreq+0x50>
 8004968:	e02d      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800496a:	4b1e      	ldr	r3, [pc, #120]	; (80049e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800496c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800496e:	e02d      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004972:	0c9b      	lsrs	r3, r3, #18
 8004974:	220f      	movs	r2, #15
 8004976:	4013      	ands	r3, r2
 8004978:	2214      	movs	r2, #20
 800497a:	18ba      	adds	r2, r7, r2
 800497c:	5cd3      	ldrb	r3, [r2, r3]
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004980:	4b17      	ldr	r3, [pc, #92]	; (80049e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	220f      	movs	r2, #15
 8004986:	4013      	ands	r3, r2
 8004988:	1d3a      	adds	r2, r7, #4
 800498a:	5cd3      	ldrb	r3, [r2, r3]
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800498e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004990:	2380      	movs	r3, #128	; 0x80
 8004992:	025b      	lsls	r3, r3, #9
 8004994:	4013      	ands	r3, r2
 8004996:	d009      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8004998:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800499a:	4812      	ldr	r0, [pc, #72]	; (80049e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800499c:	f7fb fbb4 	bl	8000108 <__udivsi3>
 80049a0:	0003      	movs	r3, r0
 80049a2:	001a      	movs	r2, r3
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	4353      	muls	r3, r2
 80049a8:	637b      	str	r3, [r7, #52]	; 0x34
 80049aa:	e009      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80049ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049ae:	000a      	movs	r2, r1
 80049b0:	0152      	lsls	r2, r2, #5
 80049b2:	1a52      	subs	r2, r2, r1
 80049b4:	0193      	lsls	r3, r2, #6
 80049b6:	1a9b      	subs	r3, r3, r2
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	185b      	adds	r3, r3, r1
 80049bc:	021b      	lsls	r3, r3, #8
 80049be:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80049c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80049c4:	e002      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049c6:	4b07      	ldr	r3, [pc, #28]	; (80049e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80049c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80049ca:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80049cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80049ce:	0018      	movs	r0, r3
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b00f      	add	sp, #60	; 0x3c
 80049d4:	bd90      	pop	{r4, r7, pc}
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	080064c4 	.word	0x080064c4
 80049dc:	080064d4 	.word	0x080064d4
 80049e0:	40021000 	.word	0x40021000
 80049e4:	007a1200 	.word	0x007a1200

080049e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049ec:	4b02      	ldr	r3, [pc, #8]	; (80049f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80049ee:	681b      	ldr	r3, [r3, #0]
}
 80049f0:	0018      	movs	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	2000003c 	.word	0x2000003c

080049fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004a00:	f7ff fff2 	bl	80049e8 <HAL_RCC_GetHCLKFreq>
 8004a04:	0001      	movs	r1, r0
 8004a06:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	0a1b      	lsrs	r3, r3, #8
 8004a0c:	2207      	movs	r2, #7
 8004a0e:	4013      	ands	r3, r2
 8004a10:	4a04      	ldr	r2, [pc, #16]	; (8004a24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a12:	5cd3      	ldrb	r3, [r2, r3]
 8004a14:	40d9      	lsrs	r1, r3
 8004a16:	000b      	movs	r3, r1
}    
 8004a18:	0018      	movs	r0, r3
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	46c0      	nop			; (mov r8, r8)
 8004a20:	40021000 	.word	0x40021000
 8004a24:	080064f4 	.word	0x080064f4

08004a28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e08a      	b.n	8004b50 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	225d      	movs	r2, #93	; 0x5d
 8004a44:	5c9b      	ldrb	r3, [r3, r2]
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d107      	bne.n	8004a5c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	225c      	movs	r2, #92	; 0x5c
 8004a50:	2100      	movs	r1, #0
 8004a52:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	0018      	movs	r0, r3
 8004a58:	f7fe fd9a 	bl	8003590 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	225d      	movs	r2, #93	; 0x5d
 8004a60:	2102      	movs	r1, #2
 8004a62:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2140      	movs	r1, #64	; 0x40
 8004a70:	438a      	bics	r2, r1
 8004a72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	23e0      	movs	r3, #224	; 0xe0
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d902      	bls.n	8004a86 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a80:	2300      	movs	r3, #0
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	e002      	b.n	8004a8c <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a86:	2380      	movs	r3, #128	; 0x80
 8004a88:	015b      	lsls	r3, r3, #5
 8004a8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68da      	ldr	r2, [r3, #12]
 8004a90:	23f0      	movs	r3, #240	; 0xf0
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d008      	beq.n	8004aaa <HAL_SPI_Init+0x82>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	23e0      	movs	r3, #224	; 0xe0
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d002      	beq.n	8004aaa <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10c      	bne.n	8004acc <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	23e0      	movs	r3, #224	; 0xe0
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d903      	bls.n	8004ac6 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
 8004ac4:	e002      	b.n	8004acc <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6999      	ldr	r1, [r3, #24]
 8004ae6:	2380      	movs	r3, #128	; 0x80
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	400b      	ands	r3, r1
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	431a      	orrs	r2, r3
 8004afa:	0011      	movs	r1, r2
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	0c1b      	lsrs	r3, r3, #16
 8004b0e:	2204      	movs	r2, #4
 8004b10:	401a      	ands	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	0011      	movs	r1, r2
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	69da      	ldr	r2, [r3, #28]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4907      	ldr	r1, [pc, #28]	; (8004b58 <HAL_SPI_Init+0x130>)
 8004b3c:	400a      	ands	r2, r1
 8004b3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	225d      	movs	r2, #93	; 0x5d
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	0018      	movs	r0, r3
 8004b52:	46bd      	mov	sp, r7
 8004b54:	b004      	add	sp, #16
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	fffff7ff 	.word	0xfffff7ff

08004b5c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b088      	sub	sp, #32
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	001a      	movs	r2, r3
 8004b6a:	1cbb      	adds	r3, r7, #2
 8004b6c:	801a      	strh	r2, [r3, #0]
  uint32_t tmp = 0U, tmp1 = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61bb      	str	r3, [r7, #24]
 8004b72:	2300      	movs	r3, #0
 8004b74:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b76:	231f      	movs	r3, #31
 8004b78:	18fb      	adds	r3, r7, r3
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	225c      	movs	r2, #92	; 0x5c
 8004b82:	5c9b      	ldrb	r3, [r3, r2]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <HAL_SPI_TransmitReceive_IT+0x30>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e0a4      	b.n	8004cd6 <HAL_SPI_TransmitReceive_IT+0x17a>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	225c      	movs	r2, #92	; 0x5c
 8004b90:	2101      	movs	r1, #1
 8004b92:	5499      	strb	r1, [r3, r2]

  tmp  = hspi->State;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	225d      	movs	r2, #93	; 0x5d
 8004b98:	5c9b      	ldrb	r3, [r3, r2]
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	61bb      	str	r3, [r7, #24]
  tmp1 = hspi->Init.Mode;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	617b      	str	r3, [r7, #20]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d010      	beq.n	8004bcc <HAL_SPI_TransmitReceive_IT+0x70>
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	2382      	movs	r3, #130	; 0x82
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d106      	bne.n	8004bc2 <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d102      	bne.n	8004bc2 <HAL_SPI_TransmitReceive_IT+0x66>
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d004      	beq.n	8004bcc <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 8004bc2:	231f      	movs	r3, #31
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	701a      	strb	r2, [r3, #0]
    goto error;
 8004bca:	e07d      	b.n	8004cc8 <HAL_SPI_TransmitReceive_IT+0x16c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d006      	beq.n	8004be0 <HAL_SPI_TransmitReceive_IT+0x84>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <HAL_SPI_TransmitReceive_IT+0x84>
 8004bd8:	1cbb      	adds	r3, r7, #2
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d104      	bne.n	8004bea <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 8004be0:	231f      	movs	r3, #31
 8004be2:	18fb      	adds	r3, r7, r3
 8004be4:	2201      	movs	r2, #1
 8004be6:	701a      	strb	r2, [r3, #0]
    goto error;
 8004be8:	e06e      	b.n	8004cc8 <HAL_SPI_TransmitReceive_IT+0x16c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	225d      	movs	r2, #93	; 0x5d
 8004bee:	5c9b      	ldrb	r3, [r3, r2]
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d003      	beq.n	8004bfe <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	225d      	movs	r2, #93	; 0x5d
 8004bfa:	2105      	movs	r1, #5
 8004bfc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1cba      	adds	r2, r7, #2
 8004c0e:	8812      	ldrh	r2, [r2, #0]
 8004c10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	1cba      	adds	r2, r7, #2
 8004c16:	8812      	ldrh	r2, [r2, #0]
 8004c18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	1cba      	adds	r2, r7, #2
 8004c24:	2144      	movs	r1, #68	; 0x44
 8004c26:	8812      	ldrh	r2, [r2, #0]
 8004c28:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	1cba      	adds	r2, r7, #2
 8004c2e:	2146      	movs	r1, #70	; 0x46
 8004c30:	8812      	ldrh	r2, [r2, #0]
 8004c32:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	23e0      	movs	r3, #224	; 0xe0
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d906      	bls.n	8004c4e <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4a27      	ldr	r2, [pc, #156]	; (8004ce0 <HAL_SPI_TransmitReceive_IT+0x184>)
 8004c44:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4a26      	ldr	r2, [pc, #152]	; (8004ce4 <HAL_SPI_TransmitReceive_IT+0x188>)
 8004c4a:	651a      	str	r2, [r3, #80]	; 0x50
 8004c4c:	e005      	b.n	8004c5a <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4a25      	ldr	r2, [pc, #148]	; (8004ce8 <HAL_SPI_TransmitReceive_IT+0x18c>)
 8004c52:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4a25      	ldr	r2, [pc, #148]	; (8004cec <HAL_SPI_TransmitReceive_IT+0x190>)
 8004c58:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount >= 2U))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	23e0      	movs	r3, #224	; 0xe0
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d805      	bhi.n	8004c72 <HAL_SPI_TransmitReceive_IT+0x116>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2246      	movs	r2, #70	; 0x46
 8004c6a:	5a9b      	ldrh	r3, [r3, r2]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d908      	bls.n	8004c84 <HAL_SPI_TransmitReceive_IT+0x128>
  {
    /* Set fiforxthresold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	491c      	ldr	r1, [pc, #112]	; (8004cf0 <HAL_SPI_TransmitReceive_IT+0x194>)
 8004c7e:	400a      	ands	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
 8004c82:	e008      	b.n	8004c96 <HAL_SPI_TransmitReceive_IT+0x13a>
  }
  else
  {
    /* Set fiforxthresold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2180      	movs	r1, #128	; 0x80
 8004c90:	0149      	lsls	r1, r1, #5
 8004c92:	430a      	orrs	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	21e0      	movs	r1, #224	; 0xe0
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2240      	movs	r2, #64	; 0x40
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b40      	cmp	r3, #64	; 0x40
 8004cb2:	d008      	beq.n	8004cc6 <HAL_SPI_TransmitReceive_IT+0x16a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2140      	movs	r1, #64	; 0x40
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	e000      	b.n	8004cc8 <HAL_SPI_TransmitReceive_IT+0x16c>
  }

error :
 8004cc6:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	225c      	movs	r2, #92	; 0x5c
 8004ccc:	2100      	movs	r1, #0
 8004cce:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004cd0:	231f      	movs	r3, #31
 8004cd2:	18fb      	adds	r3, r7, r3
 8004cd4:	781b      	ldrb	r3, [r3, #0]
}
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	b008      	add	sp, #32
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	0800502f 	.word	0x0800502f
 8004ce4:	08005097 	.word	0x08005097
 8004ce8:	08004ee1 	.word	0x08004ee1
 8004cec:	08004f9f 	.word	0x08004f9f
 8004cf0:	ffffefff 	.word	0xffffefff

08004cf4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2240      	movs	r2, #64	; 0x40
 8004d10:	4013      	ands	r3, r2
 8004d12:	d10d      	bne.n	8004d30 <HAL_SPI_IRQHandler+0x3c>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	2201      	movs	r2, #1
 8004d18:	4013      	ands	r3, r2
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8004d1a:	d009      	beq.n	8004d30 <HAL_SPI_IRQHandler+0x3c>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	2240      	movs	r2, #64	; 0x40
 8004d20:	4013      	ands	r3, r2
 8004d22:	d005      	beq.n	8004d30 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	0010      	movs	r0, r2
 8004d2c:	4798      	blx	r3
    return;
 8004d2e:	e0ac      	b.n	8004e8a <HAL_SPI_IRQHandler+0x196>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2202      	movs	r2, #2
 8004d34:	4013      	ands	r3, r2
 8004d36:	d009      	beq.n	8004d4c <HAL_SPI_IRQHandler+0x58>
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	2280      	movs	r2, #128	; 0x80
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	d005      	beq.n	8004d4c <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	0010      	movs	r0, r2
 8004d48:	4798      	blx	r3
    return;
 8004d4a:	e09e      	b.n	8004e8a <HAL_SPI_IRQHandler+0x196>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	23b0      	movs	r3, #176	; 0xb0
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	4013      	ands	r3, r2
 8004d54:	d100      	bne.n	8004d58 <HAL_SPI_IRQHandler+0x64>
 8004d56:	e098      	b.n	8004e8a <HAL_SPI_IRQHandler+0x196>
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	d100      	bne.n	8004d62 <HAL_SPI_IRQHandler+0x6e>
 8004d60:	e093      	b.n	8004e8a <HAL_SPI_IRQHandler+0x196>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	2240      	movs	r2, #64	; 0x40
 8004d66:	4013      	ands	r3, r2
 8004d68:	d023      	beq.n	8004db2 <HAL_SPI_IRQHandler+0xbe>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	225d      	movs	r2, #93	; 0x5d
 8004d6e:	5c9b      	ldrb	r3, [r3, r2]
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d011      	beq.n	8004d9a <HAL_SPI_IRQHandler+0xa6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	e00b      	b.n	8004db2 <HAL_SPI_IRQHandler+0xbe>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	613b      	str	r3, [r7, #16]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	693b      	ldr	r3, [r7, #16]
        return;
 8004db0:	e06b      	b.n	8004e8a <HAL_SPI_IRQHandler+0x196>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	2220      	movs	r2, #32
 8004db6:	4013      	ands	r3, r2
 8004db8:	d014      	beq.n	8004de4 <HAL_SPI_IRQHandler+0xf0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2140      	movs	r1, #64	; 0x40
 8004dde:	438a      	bics	r2, r1
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	2380      	movs	r3, #128	; 0x80
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	4013      	ands	r3, r2
 8004dec:	d00c      	beq.n	8004e08 <HAL_SPI_IRQHandler+0x114>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df2:	2208      	movs	r2, #8
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60bb      	str	r3, [r7, #8]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d03b      	beq.n	8004e88 <HAL_SPI_IRQHandler+0x194>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	21e0      	movs	r1, #224	; 0xe0
 8004e1c:	438a      	bics	r2, r1
 8004e1e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	225d      	movs	r2, #93	; 0x5d
 8004e24:	2101      	movs	r1, #1
 8004e26:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	d103      	bne.n	8004e38 <HAL_SPI_IRQHandler+0x144>
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	2201      	movs	r2, #1
 8004e34:	4013      	ands	r3, r2
 8004e36:	d022      	beq.n	8004e7e <HAL_SPI_IRQHandler+0x18a>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2103      	movs	r1, #3
 8004e44:	438a      	bics	r2, r1
 8004e46:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <HAL_SPI_IRQHandler+0x16e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e54:	4a0e      	ldr	r2, [pc, #56]	; (8004e90 <HAL_SPI_IRQHandler+0x19c>)
 8004e56:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f7fe feed 	bl	8003c3c <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00e      	beq.n	8004e88 <HAL_SPI_IRQHandler+0x194>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6e:	4a08      	ldr	r2, [pc, #32]	; (8004e90 <HAL_SPI_IRQHandler+0x19c>)
 8004e70:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e76:	0018      	movs	r0, r3
 8004e78:	f7fe fee0 	bl	8003c3c <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 8004e7c:	e004      	b.n	8004e88 <HAL_SPI_IRQHandler+0x194>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	0018      	movs	r0, r3
 8004e82:	f000 f80f 	bl	8004ea4 <HAL_SPI_ErrorCallback>
      }
    }
    return;
 8004e86:	e7ff      	b.n	8004e88 <HAL_SPI_IRQHandler+0x194>
 8004e88:	46c0      	nop			; (mov r8, r8)
  }
}
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	b008      	add	sp, #32
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	08004eb5 	.word	0x08004eb5

08004e94 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004e9c:	46c0      	nop			; (mov r8, r8)
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	b002      	add	sp, #8
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004eac:	46c0      	nop			; (mov r8, r8)
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b002      	add	sp, #8
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2246      	movs	r2, #70	; 0x46
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	87da      	strh	r2, [r3, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	f7ff ffe6 	bl	8004ea4 <HAL_SPI_ErrorCallback>
}
 8004ed8:	46c0      	nop			; (mov r8, r8)
 8004eda:	46bd      	mov	sp, r7
 8004edc:	b004      	add	sp, #16
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2246      	movs	r2, #70	; 0x46
 8004eec:	5a9b      	ldrh	r3, [r3, r2]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d924      	bls.n	8004f3e <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	b292      	uxth	r2, r2
 8004f00:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	1c9a      	adds	r2, r3, #2
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2246      	movs	r2, #70	; 0x46
 8004f10:	5a9b      	ldrh	r3, [r3, r2]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b02      	subs	r3, #2
 8004f16:	b299      	uxth	r1, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2246      	movs	r2, #70	; 0x46
 8004f1c:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2246      	movs	r2, #70	; 0x46
 8004f22:	5a9b      	ldrh	r3, [r3, r2]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d11e      	bne.n	8004f68 <SPI_2linesRxISR_8BIT+0x88>
    {
      /* set fiforxthresold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2180      	movs	r1, #128	; 0x80
 8004f36:	0149      	lsls	r1, r1, #5
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	605a      	str	r2, [r3, #4]
 8004f3c:	e014      	b.n	8004f68 <SPI_2linesRxISR_8BIT+0x88>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr++ = *((__IO uint8_t *)&hspi->Instance->DR);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	330c      	adds	r3, #12
 8004f44:	0019      	movs	r1, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	1c58      	adds	r0, r3, #1
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6410      	str	r0, [r2, #64]	; 0x40
 8004f50:	780a      	ldrb	r2, [r1, #0]
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	701a      	strb	r2, [r3, #0]
    hspi->RxXferCount--;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2246      	movs	r2, #70	; 0x46
 8004f5a:	5a9b      	ldrh	r3, [r3, r2]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b299      	uxth	r1, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2246      	movs	r2, #70	; 0x46
 8004f66:	5299      	strh	r1, [r3, r2]
  }

  /* check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2246      	movs	r2, #70	; 0x46
 8004f6c:	5a9b      	ldrh	r3, [r3, r2]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d110      	bne.n	8004f96 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2160      	movs	r1, #96	; 0x60
 8004f80:	438a      	bics	r2, r1
 8004f82:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d103      	bne.n	8004f96 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	0018      	movs	r0, r3
 8004f92:	f000 f9df 	bl	8005354 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004f96:	46c0      	nop			; (mov r8, r8)
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	b002      	add	sp, #8
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d912      	bls.n	8004fd6 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb4:	881a      	ldrh	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	1c9a      	adds	r2, r3, #2
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	3b02      	subs	r3, #2
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fd4:	e010      	b.n	8004ff8 <SPI_2linesTxISR_8BIT+0x5a>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fda:	1c59      	adds	r1, r3, #1
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6391      	str	r1, [r2, #56]	; 0x38
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6812      	ldr	r2, [r2, #0]
 8004fe4:	320c      	adds	r2, #12
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	7013      	strb	r3, [r2, #0]
    hspi->TxXferCount--;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d111      	bne.n	8005026 <SPI_2linesTxISR_8BIT+0x88>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2180      	movs	r1, #128	; 0x80
 800500e:	438a      	bics	r2, r1
 8005010:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2246      	movs	r2, #70	; 0x46
 8005016:	5a9b      	ldrh	r3, [r3, r2]
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d103      	bne.n	8005026 <SPI_2linesTxISR_8BIT+0x88>
    {
      SPI_CloseRxTx_ISR(hspi);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	0018      	movs	r0, r3
 8005022:	f000 f997 	bl	8005354 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	46bd      	mov	sp, r7
 800502a:	b002      	add	sp, #8
 800502c:	bd80      	pop	{r7, pc}

0800502e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b082      	sub	sp, #8
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	b292      	uxth	r2, r2
 8005042:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005048:	1c9a      	adds	r2, r3, #2
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2246      	movs	r2, #70	; 0x46
 8005052:	5a9b      	ldrh	r3, [r3, r2]
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b299      	uxth	r1, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2246      	movs	r2, #70	; 0x46
 800505e:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2246      	movs	r2, #70	; 0x46
 8005064:	5a9b      	ldrh	r3, [r3, r2]
 8005066:	b29b      	uxth	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d110      	bne.n	800508e <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2140      	movs	r1, #64	; 0x40
 8005078:	438a      	bics	r2, r1
 800507a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005080:	b29b      	uxth	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d103      	bne.n	800508e <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	0018      	movs	r0, r3
 800508a:	f000 f963 	bl	8005354 <SPI_CloseRxTx_ISR>
    }
  }
}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	46bd      	mov	sp, r7
 8005092:	b002      	add	sp, #8
 8005094:	bd80      	pop	{r7, pc}

08005096 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b082      	sub	sp, #8
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a2:	881a      	ldrh	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	1c9a      	adds	r2, r3, #2
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d111      	bne.n	80050f0 <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2180      	movs	r1, #128	; 0x80
 80050d8:	438a      	bics	r2, r1
 80050da:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2246      	movs	r2, #70	; 0x46
 80050e0:	5a9b      	ldrh	r3, [r3, r2]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d103      	bne.n	80050f0 <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	0018      	movs	r0, r3
 80050ec:	f000 f932 	bl	8005354 <SPI_CloseRxTx_ISR>
    }
  }
}
 80050f0:	46c0      	nop			; (mov r8, r8)
 80050f2:	46bd      	mov	sp, r7
 80050f4:	b002      	add	sp, #8
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005106:	e050      	b.n	80051aa <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	3301      	adds	r3, #1
 800510c:	d04d      	beq.n	80051aa <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d007      	beq.n	8005124 <SPI_WaitFlagStateUntilTimeout+0x2c>
 8005114:	f7fe fc5a 	bl	80039cc <HAL_GetTick>
 8005118:	0002      	movs	r2, r0
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	429a      	cmp	r2, r3
 8005122:	d842      	bhi.n	80051aa <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	21e0      	movs	r1, #224	; 0xe0
 8005130:	438a      	bics	r2, r1
 8005132:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	2382      	movs	r3, #130	; 0x82
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	429a      	cmp	r2, r3
 800513e:	d113      	bne.n	8005168 <SPI_WaitFlagStateUntilTimeout+0x70>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	2380      	movs	r3, #128	; 0x80
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	429a      	cmp	r2, r3
 800514a:	d005      	beq.n	8005158 <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	2380      	movs	r3, #128	; 0x80
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	429a      	cmp	r2, r3
 8005156:	d107      	bne.n	8005168 <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2140      	movs	r1, #64	; 0x40
 8005164:	438a      	bics	r2, r1
 8005166:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800516c:	2380      	movs	r3, #128	; 0x80
 800516e:	019b      	lsls	r3, r3, #6
 8005170:	429a      	cmp	r2, r3
 8005172:	d110      	bne.n	8005196 <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4914      	ldr	r1, [pc, #80]	; (80051d0 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 8005180:	400a      	ands	r2, r1
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2180      	movs	r1, #128	; 0x80
 8005190:	0189      	lsls	r1, r1, #6
 8005192:	430a      	orrs	r2, r1
 8005194:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	225d      	movs	r2, #93	; 0x5d
 800519a:	2101      	movs	r1, #1
 800519c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	225c      	movs	r2, #92	; 0x5c
 80051a2:	2100      	movs	r1, #0
 80051a4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e00e      	b.n	80051c8 <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	4013      	ands	r3, r2
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d101      	bne.n	80051be <SPI_WaitFlagStateUntilTimeout+0xc6>
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <SPI_WaitFlagStateUntilTimeout+0xc8>
 80051be:	2300      	movs	r3, #0
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d1a0      	bne.n	8005108 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	0018      	movs	r0, r3
 80051ca:	46bd      	mov	sp, r7
 80051cc:	b004      	add	sp, #16
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	ffffdfff 	.word	0xffffdfff

080051d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80051e2:	e062      	b.n	80052aa <SPI_WaitFifoStateUntilTimeout+0xd6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	23c0      	movs	r3, #192	; 0xc0
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d10c      	bne.n	8005208 <SPI_WaitFifoStateUntilTimeout+0x34>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d109      	bne.n	8005208 <SPI_WaitFifoStateUntilTimeout+0x34>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	330c      	adds	r3, #12
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	2117      	movs	r1, #23
 8005200:	187b      	adds	r3, r7, r1
 8005202:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005204:	187b      	adds	r3, r7, r1
 8005206:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	3301      	adds	r3, #1
 800520c:	d04d      	beq.n	80052aa <SPI_WaitFifoStateUntilTimeout+0xd6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d007      	beq.n	8005224 <SPI_WaitFifoStateUntilTimeout+0x50>
 8005214:	f7fe fbda 	bl	80039cc <HAL_GetTick>
 8005218:	0002      	movs	r2, r0
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	429a      	cmp	r2, r3
 8005222:	d842      	bhi.n	80052aa <SPI_WaitFifoStateUntilTimeout+0xd6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	21e0      	movs	r1, #224	; 0xe0
 8005230:	438a      	bics	r2, r1
 8005232:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	2382      	movs	r3, #130	; 0x82
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	429a      	cmp	r2, r3
 800523e:	d113      	bne.n	8005268 <SPI_WaitFifoStateUntilTimeout+0x94>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	2380      	movs	r3, #128	; 0x80
 8005246:	021b      	lsls	r3, r3, #8
 8005248:	429a      	cmp	r2, r3
 800524a:	d005      	beq.n	8005258 <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	429a      	cmp	r2, r3
 8005256:	d107      	bne.n	8005268 <SPI_WaitFifoStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2140      	movs	r1, #64	; 0x40
 8005264:	438a      	bics	r2, r1
 8005266:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800526c:	2380      	movs	r3, #128	; 0x80
 800526e:	019b      	lsls	r3, r3, #6
 8005270:	429a      	cmp	r2, r3
 8005272:	d110      	bne.n	8005296 <SPI_WaitFifoStateUntilTimeout+0xc2>
        {
          SPI_RESET_CRC(hspi);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4911      	ldr	r1, [pc, #68]	; (80052c4 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8005280:	400a      	ands	r2, r1
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2180      	movs	r1, #128	; 0x80
 8005290:	0189      	lsls	r1, r1, #6
 8005292:	430a      	orrs	r2, r1
 8005294:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	225d      	movs	r2, #93	; 0x5d
 800529a:	2101      	movs	r1, #1
 800529c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	225c      	movs	r2, #92	; 0x5c
 80052a2:	2100      	movs	r1, #0
 80052a4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e008      	b.n	80052bc <SPI_WaitFifoStateUntilTimeout+0xe8>
  while ((hspi->Instance->SR & Fifo) != State)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	4013      	ands	r3, r2
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d194      	bne.n	80051e4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	0018      	movs	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	b006      	add	sp, #24
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	ffffdfff 	.word	0xffffdfff

080052c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	23c0      	movs	r3, #192	; 0xc0
 80052d8:	0159      	lsls	r1, r3, #5
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	0013      	movs	r3, r2
 80052e2:	2200      	movs	r2, #0
 80052e4:	f7ff ff76 	bl	80051d4 <SPI_WaitFifoStateUntilTimeout>
 80052e8:	1e03      	subs	r3, r0, #0
 80052ea:	d007      	beq.n	80052fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f0:	2220      	movs	r2, #32
 80052f2:	431a      	orrs	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e027      	b.n	800534c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	0013      	movs	r3, r2
 8005306:	2200      	movs	r2, #0
 8005308:	2180      	movs	r1, #128	; 0x80
 800530a:	f7ff fef5 	bl	80050f8 <SPI_WaitFlagStateUntilTimeout>
 800530e:	1e03      	subs	r3, r0, #0
 8005310:	d007      	beq.n	8005322 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005316:	2220      	movs	r2, #32
 8005318:	431a      	orrs	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e014      	b.n	800534c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	23c0      	movs	r3, #192	; 0xc0
 8005326:	00d9      	lsls	r1, r3, #3
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	0013      	movs	r3, r2
 8005330:	2200      	movs	r2, #0
 8005332:	f7ff ff4f 	bl	80051d4 <SPI_WaitFifoStateUntilTimeout>
 8005336:	1e03      	subs	r3, r0, #0
 8005338:	d007      	beq.n	800534a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800533e:	2220      	movs	r2, #32
 8005340:	431a      	orrs	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e000      	b.n	800534c <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	0018      	movs	r0, r3
 800534e:	46bd      	mov	sp, r7
 8005350:	b004      	add	sp, #16
 8005352:	bd80      	pop	{r7, pc}

08005354 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005360:	f7fe fb34 	bl	80039cc <HAL_GetTick>
 8005364:	0003      	movs	r3, r0
 8005366:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2120      	movs	r1, #32
 8005374:	438a      	bics	r2, r1
 8005376:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2164      	movs	r1, #100	; 0x64
 800537e:	0018      	movs	r0, r3
 8005380:	f7ff ffa2 	bl	80052c8 <SPI_EndRxTxTransaction>
 8005384:	1e03      	subs	r3, r0, #0
 8005386:	d005      	beq.n	8005394 <SPI_CloseRxTx_ISR+0x40>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800538c:	2220      	movs	r2, #32
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	661a      	str	r2, [r3, #96]	; 0x60
    HAL_SPI_ErrorCallback(hspi);
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005398:	2b00      	cmp	r3, #0
 800539a:	d117      	bne.n	80053cc <SPI_CloseRxTx_ISR+0x78>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	225d      	movs	r2, #93	; 0x5d
 80053a0:	5c9b      	ldrb	r3, [r3, r2]
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b04      	cmp	r3, #4
 80053a6:	d108      	bne.n	80053ba <SPI_CloseRxTx_ISR+0x66>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	225d      	movs	r2, #93	; 0x5d
 80053ac:	2101      	movs	r1, #1
 80053ae:	5499      	strb	r1, [r3, r2]
        HAL_SPI_RxCpltCallback(hspi);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	0018      	movs	r0, r3
 80053b4:	f7ff fd6e 	bl	8004e94 <HAL_SPI_RxCpltCallback>
      HAL_SPI_ErrorCallback(hspi);
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80053b8:	e010      	b.n	80053dc <SPI_CloseRxTx_ISR+0x88>
        hspi->State = HAL_SPI_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	225d      	movs	r2, #93	; 0x5d
 80053be:	2101      	movs	r1, #1
 80053c0:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	0018      	movs	r0, r3
 80053c6:	f7fe f847 	bl	8003458 <HAL_SPI_TxRxCpltCallback>
}
 80053ca:	e007      	b.n	80053dc <SPI_CloseRxTx_ISR+0x88>
      hspi->State = HAL_SPI_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	225d      	movs	r2, #93	; 0x5d
 80053d0:	2101      	movs	r1, #1
 80053d2:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	0018      	movs	r0, r3
 80053d8:	f7ff fd64 	bl	8004ea4 <HAL_SPI_ErrorCallback>
}
 80053dc:	46c0      	nop			; (mov r8, r8)
 80053de:	46bd      	mov	sp, r7
 80053e0:	b004      	add	sp, #16
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e01e      	b.n	8005434 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	223d      	movs	r2, #61	; 0x3d
 80053fa:	5c9b      	ldrb	r3, [r3, r2]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d107      	bne.n	8005412 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	223c      	movs	r2, #60	; 0x3c
 8005406:	2100      	movs	r1, #0
 8005408:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	0018      	movs	r0, r3
 800540e:	f7fe f969 	bl	80036e4 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	223d      	movs	r2, #61	; 0x3d
 8005416:	2102      	movs	r1, #2
 8005418:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3304      	adds	r3, #4
 8005422:	0019      	movs	r1, r3
 8005424:	0010      	movs	r0, r2
 8005426:	f000 f971 	bl	800570c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	223d      	movs	r2, #61	; 0x3d
 800542e:	2101      	movs	r1, #1
 8005430:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	0018      	movs	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	b002      	add	sp, #8
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	223d      	movs	r2, #61	; 0x3d
 8005448:	2102      	movs	r1, #2
 800544a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2101      	movs	r1, #1
 8005458:	430a      	orrs	r2, r1
 800545a:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	223d      	movs	r2, #61	; 0x3d
 8005460:	2101      	movs	r1, #1
 8005462:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	0018      	movs	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	b002      	add	sp, #8
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b082      	sub	sp, #8
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2101      	movs	r1, #1
 8005482:	430a      	orrs	r2, r1
 8005484:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2101      	movs	r1, #1
 8005492:	430a      	orrs	r2, r1
 8005494:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	0018      	movs	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	b002      	add	sp, #8
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2202      	movs	r2, #2
 80054b0:	4013      	ands	r3, r2
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d124      	bne.n	8005500 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	2202      	movs	r2, #2
 80054be:	4013      	ands	r3, r2
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d11d      	bne.n	8005500 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2203      	movs	r2, #3
 80054ca:	4252      	negs	r2, r2
 80054cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	2203      	movs	r2, #3
 80054dc:	4013      	ands	r3, r2
 80054de:	d004      	beq.n	80054ea <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	0018      	movs	r0, r3
 80054e4:	f000 f8fa 	bl	80056dc <HAL_TIM_IC_CaptureCallback>
 80054e8:	e007      	b.n	80054fa <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	0018      	movs	r0, r3
 80054ee:	f000 f8ed 	bl	80056cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	0018      	movs	r0, r3
 80054f6:	f000 f8f9 	bl	80056ec <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	2204      	movs	r2, #4
 8005508:	4013      	ands	r3, r2
 800550a:	2b04      	cmp	r3, #4
 800550c:	d125      	bne.n	800555a <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	2204      	movs	r2, #4
 8005516:	4013      	ands	r3, r2
 8005518:	2b04      	cmp	r3, #4
 800551a:	d11e      	bne.n	800555a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2205      	movs	r2, #5
 8005522:	4252      	negs	r2, r2
 8005524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2202      	movs	r2, #2
 800552a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699a      	ldr	r2, [r3, #24]
 8005532:	23c0      	movs	r3, #192	; 0xc0
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4013      	ands	r3, r2
 8005538:	d004      	beq.n	8005544 <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	0018      	movs	r0, r3
 800553e:	f000 f8cd 	bl	80056dc <HAL_TIM_IC_CaptureCallback>
 8005542:	e007      	b.n	8005554 <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	0018      	movs	r0, r3
 8005548:	f000 f8c0 	bl	80056cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	0018      	movs	r0, r3
 8005550:	f000 f8cc 	bl	80056ec <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	2208      	movs	r2, #8
 8005562:	4013      	ands	r3, r2
 8005564:	2b08      	cmp	r3, #8
 8005566:	d124      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	2208      	movs	r2, #8
 8005570:	4013      	ands	r3, r2
 8005572:	2b08      	cmp	r3, #8
 8005574:	d11d      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2209      	movs	r2, #9
 800557c:	4252      	negs	r2, r2
 800557e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2204      	movs	r2, #4
 8005584:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	2203      	movs	r2, #3
 800558e:	4013      	ands	r3, r2
 8005590:	d004      	beq.n	800559c <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	0018      	movs	r0, r3
 8005596:	f000 f8a1 	bl	80056dc <HAL_TIM_IC_CaptureCallback>
 800559a:	e007      	b.n	80055ac <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	0018      	movs	r0, r3
 80055a0:	f000 f894 	bl	80056cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	0018      	movs	r0, r3
 80055a8:	f000 f8a0 	bl	80056ec <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	2210      	movs	r2, #16
 80055ba:	4013      	ands	r3, r2
 80055bc:	2b10      	cmp	r3, #16
 80055be:	d125      	bne.n	800560c <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2210      	movs	r2, #16
 80055c8:	4013      	ands	r3, r2
 80055ca:	2b10      	cmp	r3, #16
 80055cc:	d11e      	bne.n	800560c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2211      	movs	r2, #17
 80055d4:	4252      	negs	r2, r2
 80055d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2208      	movs	r2, #8
 80055dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69da      	ldr	r2, [r3, #28]
 80055e4:	23c0      	movs	r3, #192	; 0xc0
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4013      	ands	r3, r2
 80055ea:	d004      	beq.n	80055f6 <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	0018      	movs	r0, r3
 80055f0:	f000 f874 	bl	80056dc <HAL_TIM_IC_CaptureCallback>
 80055f4:	e007      	b.n	8005606 <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	0018      	movs	r0, r3
 80055fa:	f000 f867 	bl	80056cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	0018      	movs	r0, r3
 8005602:	f000 f873 	bl	80056ec <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2201      	movs	r2, #1
 8005614:	4013      	ands	r3, r2
 8005616:	2b01      	cmp	r3, #1
 8005618:	d10f      	bne.n	800563a <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	2201      	movs	r2, #1
 8005622:	4013      	ands	r3, r2
 8005624:	2b01      	cmp	r3, #1
 8005626:	d108      	bne.n	800563a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2202      	movs	r2, #2
 800562e:	4252      	negs	r2, r2
 8005630:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	0018      	movs	r0, r3
 8005636:	f7fd ff53 	bl	80034e0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	2280      	movs	r2, #128	; 0x80
 8005642:	4013      	ands	r3, r2
 8005644:	2b80      	cmp	r3, #128	; 0x80
 8005646:	d10f      	bne.n	8005668 <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2280      	movs	r2, #128	; 0x80
 8005650:	4013      	ands	r3, r2
 8005652:	2b80      	cmp	r3, #128	; 0x80
 8005654:	d108      	bne.n	8005668 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2281      	movs	r2, #129	; 0x81
 800565c:	4252      	negs	r2, r2
 800565e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	0018      	movs	r0, r3
 8005664:	f000 f8d2 	bl	800580c <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2240      	movs	r2, #64	; 0x40
 8005670:	4013      	ands	r3, r2
 8005672:	2b40      	cmp	r3, #64	; 0x40
 8005674:	d10f      	bne.n	8005696 <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	2240      	movs	r2, #64	; 0x40
 800567e:	4013      	ands	r3, r2
 8005680:	2b40      	cmp	r3, #64	; 0x40
 8005682:	d108      	bne.n	8005696 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2241      	movs	r2, #65	; 0x41
 800568a:	4252      	negs	r2, r2
 800568c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	0018      	movs	r0, r3
 8005692:	f000 f833 	bl	80056fc <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	2220      	movs	r2, #32
 800569e:	4013      	ands	r3, r2
 80056a0:	2b20      	cmp	r3, #32
 80056a2:	d10f      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	2220      	movs	r2, #32
 80056ac:	4013      	ands	r3, r2
 80056ae:	2b20      	cmp	r3, #32
 80056b0:	d108      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2221      	movs	r2, #33	; 0x21
 80056b8:	4252      	negs	r2, r2
 80056ba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	0018      	movs	r0, r3
 80056c0:	f000 f89c 	bl	80057fc <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80056c4:	46c0      	nop			; (mov r8, r8)
 80056c6:	46bd      	mov	sp, r7
 80056c8:	b002      	add	sp, #8
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056d4:	46c0      	nop			; (mov r8, r8)
 80056d6:	46bd      	mov	sp, r7
 80056d8:	b002      	add	sp, #8
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056e4:	46c0      	nop			; (mov r8, r8)
 80056e6:	46bd      	mov	sp, r7
 80056e8:	b002      	add	sp, #8
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056f4:	46c0      	nop			; (mov r8, r8)
 80056f6:	46bd      	mov	sp, r7
 80056f8:	b002      	add	sp, #8
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005704:	46c0      	nop			; (mov r8, r8)
 8005706:	46bd      	mov	sp, r7
 8005708:	b002      	add	sp, #8
 800570a:	bd80      	pop	{r7, pc}

0800570c <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a2f      	ldr	r2, [pc, #188]	; (80057e0 <TIM_Base_SetConfig+0xd4>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d003      	beq.n	8005730 <TIM_Base_SetConfig+0x24>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a2e      	ldr	r2, [pc, #184]	; (80057e4 <TIM_Base_SetConfig+0xd8>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d108      	bne.n	8005742 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2270      	movs	r2, #112	; 0x70
 8005734:	4393      	bics	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a26      	ldr	r2, [pc, #152]	; (80057e0 <TIM_Base_SetConfig+0xd4>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <TIM_Base_SetConfig+0x66>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a25      	ldr	r2, [pc, #148]	; (80057e4 <TIM_Base_SetConfig+0xd8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00f      	beq.n	8005772 <TIM_Base_SetConfig+0x66>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a24      	ldr	r2, [pc, #144]	; (80057e8 <TIM_Base_SetConfig+0xdc>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00b      	beq.n	8005772 <TIM_Base_SetConfig+0x66>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a23      	ldr	r2, [pc, #140]	; (80057ec <TIM_Base_SetConfig+0xe0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_Base_SetConfig+0x66>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a22      	ldr	r2, [pc, #136]	; (80057f0 <TIM_Base_SetConfig+0xe4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_Base_SetConfig+0x66>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a21      	ldr	r2, [pc, #132]	; (80057f4 <TIM_Base_SetConfig+0xe8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d108      	bne.n	8005784 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4a20      	ldr	r2, [pc, #128]	; (80057f8 <TIM_Base_SetConfig+0xec>)
 8005776:	4013      	ands	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2280      	movs	r2, #128	; 0x80
 8005788:	4393      	bics	r3, r2
 800578a:	001a      	movs	r2, r3
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a0c      	ldr	r2, [pc, #48]	; (80057e0 <TIM_Base_SetConfig+0xd4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00b      	beq.n	80057ca <TIM_Base_SetConfig+0xbe>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a0d      	ldr	r2, [pc, #52]	; (80057ec <TIM_Base_SetConfig+0xe0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d007      	beq.n	80057ca <TIM_Base_SetConfig+0xbe>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a0c      	ldr	r2, [pc, #48]	; (80057f0 <TIM_Base_SetConfig+0xe4>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d003      	beq.n	80057ca <TIM_Base_SetConfig+0xbe>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a0b      	ldr	r2, [pc, #44]	; (80057f4 <TIM_Base_SetConfig+0xe8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d103      	bne.n	80057d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	691a      	ldr	r2, [r3, #16]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	615a      	str	r2, [r3, #20]
}
 80057d8:	46c0      	nop			; (mov r8, r8)
 80057da:	46bd      	mov	sp, r7
 80057dc:	b004      	add	sp, #16
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40002000 	.word	0x40002000
 80057ec:	40014000 	.word	0x40014000
 80057f0:	40014400 	.word	0x40014400
 80057f4:	40014800 	.word	0x40014800
 80057f8:	fffffcff 	.word	0xfffffcff

080057fc <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8005804:	46c0      	nop			; (mov r8, r8)
 8005806:	46bd      	mov	sp, r7
 8005808:	b002      	add	sp, #8
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005814:	46c0      	nop			; (mov r8, r8)
 8005816:	46bd      	mov	sp, r7
 8005818:	b002      	add	sp, #8
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e047      	b.n	80058be <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2269      	movs	r2, #105	; 0x69
 8005832:	5c9b      	ldrb	r3, [r3, r2]
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d107      	bne.n	800584a <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2268      	movs	r2, #104	; 0x68
 800583e:	2100      	movs	r1, #0
 8005840:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	0018      	movs	r0, r3
 8005846:	f7fd ff73 	bl	8003730 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2269      	movs	r2, #105	; 0x69
 800584e:	2124      	movs	r1, #36	; 0x24
 8005850:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2101      	movs	r1, #1
 800585e:	438a      	bics	r2, r1
 8005860:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	0018      	movs	r0, r3
 8005866:	f000 fa77 	bl	8005d58 <UART_SetConfig>
 800586a:	0003      	movs	r3, r0
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e024      	b.n	80058be <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	0018      	movs	r0, r3
 8005880:	f000 fbe2 	bl	8006048 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	490e      	ldr	r1, [pc, #56]	; (80058c8 <HAL_UART_Init+0xac>)
 8005890:	400a      	ands	r2, r1
 8005892:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689a      	ldr	r2, [r3, #8]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2108      	movs	r1, #8
 80058a0:	438a      	bics	r2, r1
 80058a2:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2101      	movs	r1, #1
 80058b0:	430a      	orrs	r2, r1
 80058b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	0018      	movs	r0, r3
 80058b8:	f000 fc7a 	bl	80061b0 <UART_CheckIdleState>
 80058bc:	0003      	movs	r3, r0
}
 80058be:	0018      	movs	r0, r3
 80058c0:	46bd      	mov	sp, r7
 80058c2:	b002      	add	sp, #8
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	46c0      	nop			; (mov r8, r8)
 80058c8:	fffff7ff 	.word	0xfffff7ff

080058cc <HAL_UART_Transmit_IT>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	1dbb      	adds	r3, r7, #6
 80058d8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2269      	movs	r2, #105	; 0x69
 80058de:	5c9b      	ldrb	r3, [r3, r2]
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b20      	cmp	r3, #32
 80058e4:	d145      	bne.n	8005972 <HAL_UART_Transmit_IT+0xa6>
  {
    if((pData == NULL ) || (Size == 0U))
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <HAL_UART_Transmit_IT+0x28>
 80058ec:	1dbb      	adds	r3, r7, #6
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e03d      	b.n	8005974 <HAL_UART_Transmit_IT+0xa8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	2380      	movs	r3, #128	; 0x80
 80058fe:	015b      	lsls	r3, r3, #5
 8005900:	429a      	cmp	r2, r3
 8005902:	d109      	bne.n	8005918 <HAL_UART_Transmit_IT+0x4c>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d105      	bne.n	8005918 <HAL_UART_Transmit_IT+0x4c>
    {
      if((((uint32_t)pData)&1U) != 0U)
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2201      	movs	r2, #1
 8005910:	4013      	ands	r3, r2
 8005912:	d001      	beq.n	8005918 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e02d      	b.n	8005974 <HAL_UART_Transmit_IT+0xa8>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2268      	movs	r2, #104	; 0x68
 800591c:	5c9b      	ldrb	r3, [r3, r2]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_UART_Transmit_IT+0x5a>
 8005922:	2302      	movs	r3, #2
 8005924:	e026      	b.n	8005974 <HAL_UART_Transmit_IT+0xa8>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2268      	movs	r2, #104	; 0x68
 800592a:	2101      	movs	r1, #1
 800592c:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr = pData;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	1dba      	adds	r2, r7, #6
 8005938:	2150      	movs	r1, #80	; 0x50
 800593a:	8812      	ldrh	r2, [r2, #0]
 800593c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	1dba      	adds	r2, r7, #6
 8005942:	2152      	movs	r1, #82	; 0x52
 8005944:	8812      	ldrh	r2, [r2, #0]
 8005946:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2269      	movs	r2, #105	; 0x69
 8005952:	2121      	movs	r1, #33	; 0x21
 8005954:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2268      	movs	r2, #104	; 0x68
 800595a:	2100      	movs	r1, #0
 800595c:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2180      	movs	r1, #128	; 0x80
 800596a:	430a      	orrs	r2, r1
 800596c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	e000      	b.n	8005974 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005972:	2302      	movs	r3, #2
  }
}
 8005974:	0018      	movs	r0, r3
 8005976:	46bd      	mov	sp, r7
 8005978:	b004      	add	sp, #16
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_UART_Receive_IT>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	1dbb      	adds	r3, r7, #6
 8005988:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	226a      	movs	r2, #106	; 0x6a
 800598e:	5c9b      	ldrb	r3, [r3, r2]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b20      	cmp	r3, #32
 8005994:	d000      	beq.n	8005998 <HAL_UART_Receive_IT+0x1c>
 8005996:	e073      	b.n	8005a80 <HAL_UART_Receive_IT+0x104>
  {
    if((pData == NULL ) || (Size == 0U))
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_UART_Receive_IT+0x2a>
 800599e:	1dbb      	adds	r3, r7, #6
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_UART_Receive_IT+0x2e>
    {
      return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e06b      	b.n	8005a82 <HAL_UART_Receive_IT+0x106>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	2380      	movs	r3, #128	; 0x80
 80059b0:	015b      	lsls	r3, r3, #5
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d109      	bne.n	80059ca <HAL_UART_Receive_IT+0x4e>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d105      	bne.n	80059ca <HAL_UART_Receive_IT+0x4e>
    {
      if((((uint32_t)pData)&1U) != 0U)
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2201      	movs	r2, #1
 80059c2:	4013      	ands	r3, r2
 80059c4:	d001      	beq.n	80059ca <HAL_UART_Receive_IT+0x4e>
      {
        return  HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e05b      	b.n	8005a82 <HAL_UART_Receive_IT+0x106>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2268      	movs	r2, #104	; 0x68
 80059ce:	5c9b      	ldrb	r3, [r3, r2]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_UART_Receive_IT+0x5c>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e054      	b.n	8005a82 <HAL_UART_Receive_IT+0x106>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2268      	movs	r2, #104	; 0x68
 80059dc:	2101      	movs	r1, #1
 80059de:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	1dba      	adds	r2, r7, #6
 80059ea:	2158      	movs	r1, #88	; 0x58
 80059ec:	8812      	ldrh	r2, [r2, #0]
 80059ee:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	1dba      	adds	r2, r7, #6
 80059f4:	215a      	movs	r1, #90	; 0x5a
 80059f6:	8812      	ldrh	r2, [r2, #0]
 80059f8:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	689a      	ldr	r2, [r3, #8]
 80059fe:	2380      	movs	r3, #128	; 0x80
 8005a00:	015b      	lsls	r3, r3, #5
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d10d      	bne.n	8005a22 <HAL_UART_Receive_IT+0xa6>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d104      	bne.n	8005a18 <HAL_UART_Receive_IT+0x9c>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	225c      	movs	r2, #92	; 0x5c
 8005a12:	491e      	ldr	r1, [pc, #120]	; (8005a8c <HAL_UART_Receive_IT+0x110>)
 8005a14:	5299      	strh	r1, [r3, r2]
 8005a16:	e015      	b.n	8005a44 <HAL_UART_Receive_IT+0xc8>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	225c      	movs	r2, #92	; 0x5c
 8005a1c:	21ff      	movs	r1, #255	; 0xff
 8005a1e:	5299      	strh	r1, [r3, r2]
 8005a20:	e010      	b.n	8005a44 <HAL_UART_Receive_IT+0xc8>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10c      	bne.n	8005a44 <HAL_UART_Receive_IT+0xc8>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d104      	bne.n	8005a3c <HAL_UART_Receive_IT+0xc0>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	225c      	movs	r2, #92	; 0x5c
 8005a36:	21ff      	movs	r1, #255	; 0xff
 8005a38:	5299      	strh	r1, [r3, r2]
 8005a3a:	e003      	b.n	8005a44 <HAL_UART_Receive_IT+0xc8>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	225c      	movs	r2, #92	; 0x5c
 8005a40:	217f      	movs	r1, #127	; 0x7f
 8005a42:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	226a      	movs	r2, #106	; 0x6a
 8005a4e:	2122      	movs	r1, #34	; 0x22
 8005a50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2268      	movs	r2, #104	; 0x68
 8005a56:	2100      	movs	r1, #0
 8005a58:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2101      	movs	r1, #1
 8005a66:	430a      	orrs	r2, r1
 8005a68:	609a      	str	r2, [r3, #8]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2190      	movs	r1, #144	; 0x90
 8005a76:	0049      	lsls	r1, r1, #1
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	e000      	b.n	8005a82 <HAL_UART_Receive_IT+0x106>
  }
  else
  {
    return HAL_BUSY;
 8005a80:	2302      	movs	r3, #2
  }
}
 8005a82:	0018      	movs	r0, r3
 8005a84:	46bd      	mov	sp, r7
 8005a86:	b004      	add	sp, #16
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	46c0      	nop			; (mov r8, r8)
 8005a8c:	000001ff 	.word	0x000001ff

08005a90 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	492b      	ldr	r1, [pc, #172]	; (8005b50 <HAL_UART_AbortReceive_IT+0xc0>)
 8005aa4:	400a      	ands	r2, r1
 8005aa6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	438a      	bics	r2, r1
 8005ab6:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	2240      	movs	r2, #64	; 0x40
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d02f      	beq.n	8005b24 <HAL_UART_AbortReceive_IT+0x94>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2140      	movs	r1, #64	; 0x40
 8005ad0:	438a      	bics	r2, r1
 8005ad2:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if(huart->hdmarx != NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d012      	beq.n	8005b02 <HAL_UART_AbortReceive_IT+0x72>
    {
      /* Set the UART DMA Abort callback : 
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ae0:	4a1c      	ldr	r2, [pc, #112]	; (8005b54 <HAL_UART_AbortReceive_IT+0xc4>)
 8005ae2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f7fe f8a7 	bl	8003c3c <HAL_DMA_Abort_IT>
 8005aee:	1e03      	subs	r3, r0, #0
 8005af0:	d028      	beq.n	8005b44 <HAL_UART_AbortReceive_IT+0xb4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005afc:	0018      	movs	r0, r3
 8005afe:	4790      	blx	r2
 8005b00:	e020      	b.n	8005b44 <HAL_UART_AbortReceive_IT+0xb4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U; 
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	225a      	movs	r2, #90	; 0x5a
 8005b06:	2100      	movs	r1, #0
 8005b08:	5299      	strh	r1, [r3, r2]

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	220f      	movs	r2, #15
 8005b10:	621a      	str	r2, [r3, #32]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	226a      	movs	r2, #106	; 0x6a
 8005b16:	2120      	movs	r1, #32
 8005b18:	5499      	strb	r1, [r3, r2]

      /* As no DMA to be aborted, call directly user Abort complete callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	f000 f913 	bl	8005d48 <HAL_UART_AbortReceiveCpltCallback>
 8005b22:	e00f      	b.n	8005b44 <HAL_UART_AbortReceive_IT+0xb4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U; 
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	225a      	movs	r2, #90	; 0x5a
 8005b28:	2100      	movs	r1, #0
 8005b2a:	5299      	strh	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	220f      	movs	r2, #15
 8005b32:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	226a      	movs	r2, #106	; 0x6a
 8005b38:	2120      	movs	r1, #32
 8005b3a:	5499      	strb	r1, [r3, r2]

    /* As no DMA to be aborted, call directly user Abort complete callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	0018      	movs	r0, r3
 8005b40:	f000 f902 	bl	8005d48 <HAL_UART_AbortReceiveCpltCallback>
  }

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	0018      	movs	r0, r3
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	b002      	add	sp, #8
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	46c0      	nop			; (mov r8, r8)
 8005b50:	fffffedf 	.word	0xfffffedf
 8005b54:	0800624b 	.word	0x0800624b

08005b58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	220f      	movs	r2, #15
 8005b74:	4013      	ands	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10c      	bne.n	8005b98 <HAL_UART_IRQHandler+0x40>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2220      	movs	r2, #32
 8005b82:	4013      	ands	r3, r2
 8005b84:	d008      	beq.n	8005b98 <HAL_UART_IRQHandler+0x40>
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	d004      	beq.n	8005b98 <HAL_UART_IRQHandler+0x40>
    {
      UART_Receive_IT(huart);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	0018      	movs	r0, r3
 8005b92:	f000 fbe5 	bl	8006360 <UART_Receive_IT>
      return;
 8005b96:	e0d2      	b.n	8005d3e <HAL_UART_IRQHandler+0x1e6>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d100      	bne.n	8005ba8 <HAL_UART_IRQHandler+0x50>
 8005ba6:	e0af      	b.n	8005d08 <HAL_UART_IRQHandler+0x1b0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2201      	movs	r2, #1
 8005bac:	4013      	ands	r3, r2
 8005bae:	d105      	bne.n	8005bbc <HAL_UART_IRQHandler+0x64>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	2390      	movs	r3, #144	; 0x90
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	d100      	bne.n	8005bbc <HAL_UART_IRQHandler+0x64>
 8005bba:	e0a5      	b.n	8005d08 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	d00e      	beq.n	8005be2 <HAL_UART_IRQHandler+0x8a>
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	2380      	movs	r3, #128	; 0x80
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	4013      	ands	r3, r2
 8005bcc:	d009      	beq.n	8005be2 <HAL_UART_IRQHandler+0x8a>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bda:	2201      	movs	r2, #1
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2202      	movs	r2, #2
 8005be6:	4013      	ands	r3, r2
 8005be8:	d00d      	beq.n	8005c06 <HAL_UART_IRQHandler+0xae>
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2201      	movs	r2, #1
 8005bee:	4013      	ands	r3, r2
 8005bf0:	d009      	beq.n	8005c06 <HAL_UART_IRQHandler+0xae>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bfe:	2204      	movs	r2, #4
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2204      	movs	r2, #4
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	d00d      	beq.n	8005c2a <HAL_UART_IRQHandler+0xd2>
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2201      	movs	r2, #1
 8005c12:	4013      	ands	r3, r2
 8005c14:	d009      	beq.n	8005c2a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2204      	movs	r2, #4
 8005c1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c22:	2202      	movs	r2, #2
 8005c24:	431a      	orrs	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2208      	movs	r2, #8
 8005c2e:	4013      	ands	r3, r2
 8005c30:	d011      	beq.n	8005c56 <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	2220      	movs	r2, #32
 8005c36:	4013      	ands	r3, r2
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8005c38:	d103      	bne.n	8005c42 <HAL_UART_IRQHandler+0xea>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	4013      	ands	r3, r2
 8005c40:	d009      	beq.n	8005c56 <HAL_UART_IRQHandler+0xfe>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2208      	movs	r2, #8
 8005c48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c4e:	2208      	movs	r2, #8
 8005c50:	431a      	orrs	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d100      	bne.n	8005c60 <HAL_UART_IRQHandler+0x108>
 8005c5e:	e06d      	b.n	8005d3c <HAL_UART_IRQHandler+0x1e4>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2220      	movs	r2, #32
 8005c64:	4013      	ands	r3, r2
 8005c66:	d007      	beq.n	8005c78 <HAL_UART_IRQHandler+0x120>
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	d003      	beq.n	8005c78 <HAL_UART_IRQHandler+0x120>
      {
        UART_Receive_IT(huart);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	0018      	movs	r0, r3
 8005c74:	f000 fb74 	bl	8006360 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c7c:	2208      	movs	r2, #8
 8005c7e:	4013      	ands	r3, r2
 8005c80:	d105      	bne.n	8005c8e <HAL_UART_IRQHandler+0x136>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	2240      	movs	r2, #64	; 0x40
 8005c8a:	4013      	ands	r3, r2
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005c8c:	d032      	beq.n	8005cf4 <HAL_UART_IRQHandler+0x19c>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	0018      	movs	r0, r3
 8005c92:	f000 faa5 	bl	80061e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	2240      	movs	r2, #64	; 0x40
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	d023      	beq.n	8005cea <HAL_UART_IRQHandler+0x192>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2140      	movs	r1, #64	; 0x40
 8005cae:	438a      	bics	r2, r1
 8005cb0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d012      	beq.n	8005ce0 <HAL_UART_IRQHandler+0x188>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cbe:	4a21      	ldr	r2, [pc, #132]	; (8005d44 <HAL_UART_IRQHandler+0x1ec>)
 8005cc0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cc6:	0018      	movs	r0, r3
 8005cc8:	f7fd ffb8 	bl	8003c3c <HAL_DMA_Abort_IT>
 8005ccc:	1e03      	subs	r3, r0, #0
 8005cce:	d019      	beq.n	8005d04 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cda:	0018      	movs	r0, r3
 8005cdc:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cde:	e011      	b.n	8005d04 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	f7fd fb9c 	bl	8003420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce8:	e00c      	b.n	8005d04 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	0018      	movs	r0, r3
 8005cee:	f7fd fb97 	bl	8003420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf2:	e007      	b.n	8005d04 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	0018      	movs	r0, r3
 8005cf8:	f7fd fb92 	bl	8003420 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 8005d02:	e01b      	b.n	8005d3c <HAL_UART_IRQHandler+0x1e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d04:	46c0      	nop			; (mov r8, r8)
    return;
 8005d06:	e019      	b.n	8005d3c <HAL_UART_IRQHandler+0x1e4>
    return;
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	2280      	movs	r2, #128	; 0x80
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	d008      	beq.n	8005d22 <HAL_UART_IRQHandler+0x1ca>
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	2280      	movs	r2, #128	; 0x80
 8005d14:	4013      	ands	r3, r2
 8005d16:	d004      	beq.n	8005d22 <HAL_UART_IRQHandler+0x1ca>
  {
    UART_Transmit_IT(huart);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	f000 fab0 	bl	8006280 <UART_Transmit_IT>
    return;
 8005d20:	e00d      	b.n	8005d3e <HAL_UART_IRQHandler+0x1e6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2240      	movs	r2, #64	; 0x40
 8005d26:	4013      	ands	r3, r2
 8005d28:	d009      	beq.n	8005d3e <HAL_UART_IRQHandler+0x1e6>
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	2240      	movs	r2, #64	; 0x40
 8005d2e:	4013      	ands	r3, r2
 8005d30:	d005      	beq.n	8005d3e <HAL_UART_IRQHandler+0x1e6>
  {
    UART_EndTransmit_IT(huart);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	0018      	movs	r0, r3
 8005d36:	f000 fafa 	bl	800632e <UART_EndTransmit_IT>
    return;
 8005d3a:	e000      	b.n	8005d3e <HAL_UART_IRQHandler+0x1e6>
    return;
 8005d3c:	46c0      	nop			; (mov r8, r8)
  }

}
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	b006      	add	sp, #24
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	0800621d 	.word	0x0800621d

08005d48 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback (UART_HandleTypeDef *huart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005d50:	46c0      	nop			; (mov r8, r8)
 8005d52:	46bd      	mov	sp, r7
 8005d54:	b002      	add	sp, #8
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d58:	b590      	push	{r4, r7, lr}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8005d64:	2317      	movs	r3, #23
 8005d66:	18fb      	adds	r3, r7, r3
 8005d68:	2210      	movs	r2, #16
 8005d6a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8005d6c:	230a      	movs	r3, #10
 8005d6e:	18fb      	adds	r3, r7, r3
 8005d70:	2200      	movs	r2, #0
 8005d72:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8005d74:	2314      	movs	r3, #20
 8005d76:	18fb      	adds	r3, r7, r3
 8005d78:	2200      	movs	r2, #0
 8005d7a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d7c:	2313      	movs	r3, #19
 8005d7e:	18fb      	adds	r3, r7, r3
 8005d80:	2200      	movs	r2, #0
 8005d82:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4aa1      	ldr	r2, [pc, #644]	; (8006028 <UART_SetConfig+0x2d0>)
 8005da4:	4013      	ands	r3, r2
 8005da6:	0019      	movs	r1, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	4a9c      	ldr	r2, [pc, #624]	; (800602c <UART_SetConfig+0x2d4>)
 8005dba:	4013      	ands	r3, r2
 8005dbc:	0019      	movs	r1, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	4a94      	ldr	r2, [pc, #592]	; (8006030 <UART_SetConfig+0x2d8>)
 8005dde:	4013      	ands	r3, r2
 8005de0:	0019      	movs	r1, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a90      	ldr	r2, [pc, #576]	; (8006034 <UART_SetConfig+0x2dc>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d127      	bne.n	8005e46 <UART_SetConfig+0xee>
 8005df6:	4b90      	ldr	r3, [pc, #576]	; (8006038 <UART_SetConfig+0x2e0>)
 8005df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfa:	2203      	movs	r2, #3
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	d00d      	beq.n	8005e1e <UART_SetConfig+0xc6>
 8005e02:	d81b      	bhi.n	8005e3c <UART_SetConfig+0xe4>
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d014      	beq.n	8005e32 <UART_SetConfig+0xda>
 8005e08:	d818      	bhi.n	8005e3c <UART_SetConfig+0xe4>
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <UART_SetConfig+0xbc>
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d00a      	beq.n	8005e28 <UART_SetConfig+0xd0>
 8005e12:	e013      	b.n	8005e3c <UART_SetConfig+0xe4>
 8005e14:	2317      	movs	r3, #23
 8005e16:	18fb      	adds	r3, r7, r3
 8005e18:	2200      	movs	r2, #0
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	e021      	b.n	8005e62 <UART_SetConfig+0x10a>
 8005e1e:	2317      	movs	r3, #23
 8005e20:	18fb      	adds	r3, r7, r3
 8005e22:	2202      	movs	r2, #2
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	e01c      	b.n	8005e62 <UART_SetConfig+0x10a>
 8005e28:	2317      	movs	r3, #23
 8005e2a:	18fb      	adds	r3, r7, r3
 8005e2c:	2204      	movs	r2, #4
 8005e2e:	701a      	strb	r2, [r3, #0]
 8005e30:	e017      	b.n	8005e62 <UART_SetConfig+0x10a>
 8005e32:	2317      	movs	r3, #23
 8005e34:	18fb      	adds	r3, r7, r3
 8005e36:	2208      	movs	r2, #8
 8005e38:	701a      	strb	r2, [r3, #0]
 8005e3a:	e012      	b.n	8005e62 <UART_SetConfig+0x10a>
 8005e3c:	2317      	movs	r3, #23
 8005e3e:	18fb      	adds	r3, r7, r3
 8005e40:	2210      	movs	r2, #16
 8005e42:	701a      	strb	r2, [r3, #0]
 8005e44:	e00d      	b.n	8005e62 <UART_SetConfig+0x10a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a7c      	ldr	r2, [pc, #496]	; (800603c <UART_SetConfig+0x2e4>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d104      	bne.n	8005e5a <UART_SetConfig+0x102>
 8005e50:	2317      	movs	r3, #23
 8005e52:	18fb      	adds	r3, r7, r3
 8005e54:	2200      	movs	r2, #0
 8005e56:	701a      	strb	r2, [r3, #0]
 8005e58:	e003      	b.n	8005e62 <UART_SetConfig+0x10a>
 8005e5a:	2317      	movs	r3, #23
 8005e5c:	18fb      	adds	r3, r7, r3
 8005e5e:	2210      	movs	r2, #16
 8005e60:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69da      	ldr	r2, [r3, #28]
 8005e66:	2380      	movs	r3, #128	; 0x80
 8005e68:	021b      	lsls	r3, r3, #8
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d000      	beq.n	8005e70 <UART_SetConfig+0x118>
 8005e6e:	e077      	b.n	8005f60 <UART_SetConfig+0x208>
  {
    switch (clocksource)
 8005e70:	2317      	movs	r3, #23
 8005e72:	18fb      	adds	r3, r7, r3
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	2b08      	cmp	r3, #8
 8005e78:	d041      	beq.n	8005efe <UART_SetConfig+0x1a6>
 8005e7a:	dc52      	bgt.n	8005f22 <UART_SetConfig+0x1ca>
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d02a      	beq.n	8005ed6 <UART_SetConfig+0x17e>
 8005e80:	dc4f      	bgt.n	8005f22 <UART_SetConfig+0x1ca>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <UART_SetConfig+0x134>
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d014      	beq.n	8005eb4 <UART_SetConfig+0x15c>
 8005e8a:	e04a      	b.n	8005f22 <UART_SetConfig+0x1ca>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005e8c:	f7fe fdb6 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8005e90:	0003      	movs	r3, r0
 8005e92:	005a      	lsls	r2, r3, #1
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	085b      	lsrs	r3, r3, #1
 8005e9a:	18d2      	adds	r2, r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	0019      	movs	r1, r3
 8005ea2:	0010      	movs	r0, r2
 8005ea4:	f7fa f930 	bl	8000108 <__udivsi3>
 8005ea8:	0003      	movs	r3, r0
 8005eaa:	001a      	movs	r2, r3
 8005eac:	2314      	movs	r3, #20
 8005eae:	18fb      	adds	r3, r7, r3
 8005eb0:	801a      	strh	r2, [r3, #0]
        break;
 8005eb2:	e03b      	b.n	8005f2c <UART_SetConfig+0x1d4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	085b      	lsrs	r3, r3, #1
 8005eba:	4a61      	ldr	r2, [pc, #388]	; (8006040 <UART_SetConfig+0x2e8>)
 8005ebc:	189a      	adds	r2, r3, r2
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	0019      	movs	r1, r3
 8005ec4:	0010      	movs	r0, r2
 8005ec6:	f7fa f91f 	bl	8000108 <__udivsi3>
 8005eca:	0003      	movs	r3, r0
 8005ecc:	001a      	movs	r2, r3
 8005ece:	2314      	movs	r3, #20
 8005ed0:	18fb      	adds	r3, r7, r3
 8005ed2:	801a      	strh	r2, [r3, #0]
        break;
 8005ed4:	e02a      	b.n	8005f2c <UART_SetConfig+0x1d4>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005ed6:	f7fe fd23 	bl	8004920 <HAL_RCC_GetSysClockFreq>
 8005eda:	0003      	movs	r3, r0
 8005edc:	005a      	lsls	r2, r3, #1
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	085b      	lsrs	r3, r3, #1
 8005ee4:	18d2      	adds	r2, r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	0019      	movs	r1, r3
 8005eec:	0010      	movs	r0, r2
 8005eee:	f7fa f90b 	bl	8000108 <__udivsi3>
 8005ef2:	0003      	movs	r3, r0
 8005ef4:	001a      	movs	r2, r3
 8005ef6:	2314      	movs	r3, #20
 8005ef8:	18fb      	adds	r3, r7, r3
 8005efa:	801a      	strh	r2, [r3, #0]
        break;
 8005efc:	e016      	b.n	8005f2c <UART_SetConfig+0x1d4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	085b      	lsrs	r3, r3, #1
 8005f04:	2280      	movs	r2, #128	; 0x80
 8005f06:	0252      	lsls	r2, r2, #9
 8005f08:	189a      	adds	r2, r3, r2
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	0019      	movs	r1, r3
 8005f10:	0010      	movs	r0, r2
 8005f12:	f7fa f8f9 	bl	8000108 <__udivsi3>
 8005f16:	0003      	movs	r3, r0
 8005f18:	001a      	movs	r2, r3
 8005f1a:	2314      	movs	r3, #20
 8005f1c:	18fb      	adds	r3, r7, r3
 8005f1e:	801a      	strh	r2, [r3, #0]
        break;
 8005f20:	e004      	b.n	8005f2c <UART_SetConfig+0x1d4>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005f22:	2313      	movs	r3, #19
 8005f24:	18fb      	adds	r3, r7, r3
 8005f26:	2201      	movs	r2, #1
 8005f28:	701a      	strb	r2, [r3, #0]
        break;
 8005f2a:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8005f2c:	200a      	movs	r0, #10
 8005f2e:	183b      	adds	r3, r7, r0
 8005f30:	2414      	movs	r4, #20
 8005f32:	193a      	adds	r2, r7, r4
 8005f34:	8812      	ldrh	r2, [r2, #0]
 8005f36:	210f      	movs	r1, #15
 8005f38:	438a      	bics	r2, r1
 8005f3a:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f3c:	193b      	adds	r3, r7, r4
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	105b      	asrs	r3, r3, #1
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	2207      	movs	r2, #7
 8005f46:	4013      	ands	r3, r2
 8005f48:	b299      	uxth	r1, r3
 8005f4a:	183b      	adds	r3, r7, r0
 8005f4c:	183a      	adds	r2, r7, r0
 8005f4e:	8812      	ldrh	r2, [r2, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	183a      	adds	r2, r7, r0
 8005f5a:	8812      	ldrh	r2, [r2, #0]
 8005f5c:	60da      	str	r2, [r3, #12]
 8005f5e:	e05b      	b.n	8006018 <UART_SetConfig+0x2c0>
  }
  else
  {
    switch (clocksource)
 8005f60:	2317      	movs	r3, #23
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b08      	cmp	r3, #8
 8005f68:	d03f      	beq.n	8005fea <UART_SetConfig+0x292>
 8005f6a:	dc50      	bgt.n	800600e <UART_SetConfig+0x2b6>
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d029      	beq.n	8005fc4 <UART_SetConfig+0x26c>
 8005f70:	dc4d      	bgt.n	800600e <UART_SetConfig+0x2b6>
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <UART_SetConfig+0x224>
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d013      	beq.n	8005fa2 <UART_SetConfig+0x24a>
 8005f7a:	e048      	b.n	800600e <UART_SetConfig+0x2b6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005f7c:	f7fe fd3e 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8005f80:	0002      	movs	r2, r0
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	085b      	lsrs	r3, r3, #1
 8005f88:	18d2      	adds	r2, r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	0019      	movs	r1, r3
 8005f90:	0010      	movs	r0, r2
 8005f92:	f7fa f8b9 	bl	8000108 <__udivsi3>
 8005f96:	0003      	movs	r3, r0
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	60da      	str	r2, [r3, #12]
        break;
 8005fa0:	e03a      	b.n	8006018 <UART_SetConfig+0x2c0>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	085b      	lsrs	r3, r3, #1
 8005fa8:	4a26      	ldr	r2, [pc, #152]	; (8006044 <UART_SetConfig+0x2ec>)
 8005faa:	189a      	adds	r2, r3, r2
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	0019      	movs	r1, r3
 8005fb2:	0010      	movs	r0, r2
 8005fb4:	f7fa f8a8 	bl	8000108 <__udivsi3>
 8005fb8:	0003      	movs	r3, r0
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	60da      	str	r2, [r3, #12]
        break;
 8005fc2:	e029      	b.n	8006018 <UART_SetConfig+0x2c0>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005fc4:	f7fe fcac 	bl	8004920 <HAL_RCC_GetSysClockFreq>
 8005fc8:	0002      	movs	r2, r0
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	085b      	lsrs	r3, r3, #1
 8005fd0:	18d2      	adds	r2, r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	0019      	movs	r1, r3
 8005fd8:	0010      	movs	r0, r2
 8005fda:	f7fa f895 	bl	8000108 <__udivsi3>
 8005fde:	0003      	movs	r3, r0
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	60da      	str	r2, [r3, #12]
        break;
 8005fe8:	e016      	b.n	8006018 <UART_SetConfig+0x2c0>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	085b      	lsrs	r3, r3, #1
 8005ff0:	2280      	movs	r2, #128	; 0x80
 8005ff2:	0212      	lsls	r2, r2, #8
 8005ff4:	189a      	adds	r2, r3, r2
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	0019      	movs	r1, r3
 8005ffc:	0010      	movs	r0, r2
 8005ffe:	f7fa f883 	bl	8000108 <__udivsi3>
 8006002:	0003      	movs	r3, r0
 8006004:	b29a      	uxth	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60da      	str	r2, [r3, #12]
        break;
 800600c:	e004      	b.n	8006018 <UART_SetConfig+0x2c0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800600e:	2313      	movs	r3, #19
 8006010:	18fb      	adds	r3, r7, r3
 8006012:	2201      	movs	r2, #1
 8006014:	701a      	strb	r2, [r3, #0]
        break;
 8006016:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8006018:	2313      	movs	r3, #19
 800601a:	18fb      	adds	r3, r7, r3
 800601c:	781b      	ldrb	r3, [r3, #0]

}
 800601e:	0018      	movs	r0, r3
 8006020:	46bd      	mov	sp, r7
 8006022:	b007      	add	sp, #28
 8006024:	bd90      	pop	{r4, r7, pc}
 8006026:	46c0      	nop			; (mov r8, r8)
 8006028:	ffff69f3 	.word	0xffff69f3
 800602c:	ffffcfff 	.word	0xffffcfff
 8006030:	fffff4ff 	.word	0xfffff4ff
 8006034:	40013800 	.word	0x40013800
 8006038:	40021000 	.word	0x40021000
 800603c:	40004400 	.word	0x40004400
 8006040:	00f42400 	.word	0x00f42400
 8006044:	007a1200 	.word	0x007a1200

08006048 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	2201      	movs	r2, #1
 8006056:	4013      	ands	r3, r2
 8006058:	d00b      	beq.n	8006072 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	4a4a      	ldr	r2, [pc, #296]	; (800618c <UART_AdvFeatureConfig+0x144>)
 8006062:	4013      	ands	r3, r2
 8006064:	0019      	movs	r1, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	2202      	movs	r2, #2
 8006078:	4013      	ands	r3, r2
 800607a:	d00b      	beq.n	8006094 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	4a43      	ldr	r2, [pc, #268]	; (8006190 <UART_AdvFeatureConfig+0x148>)
 8006084:	4013      	ands	r3, r2
 8006086:	0019      	movs	r1, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	2204      	movs	r2, #4
 800609a:	4013      	ands	r3, r2
 800609c:	d00b      	beq.n	80060b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	4a3b      	ldr	r2, [pc, #236]	; (8006194 <UART_AdvFeatureConfig+0x14c>)
 80060a6:	4013      	ands	r3, r2
 80060a8:	0019      	movs	r1, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	2208      	movs	r2, #8
 80060bc:	4013      	ands	r3, r2
 80060be:	d00b      	beq.n	80060d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	4a34      	ldr	r2, [pc, #208]	; (8006198 <UART_AdvFeatureConfig+0x150>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	0019      	movs	r1, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	2210      	movs	r2, #16
 80060de:	4013      	ands	r3, r2
 80060e0:	d00b      	beq.n	80060fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	4a2c      	ldr	r2, [pc, #176]	; (800619c <UART_AdvFeatureConfig+0x154>)
 80060ea:	4013      	ands	r3, r2
 80060ec:	0019      	movs	r1, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	2220      	movs	r2, #32
 8006100:	4013      	ands	r3, r2
 8006102:	d00b      	beq.n	800611c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	4a25      	ldr	r2, [pc, #148]	; (80061a0 <UART_AdvFeatureConfig+0x158>)
 800610c:	4013      	ands	r3, r2
 800610e:	0019      	movs	r1, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	2240      	movs	r2, #64	; 0x40
 8006122:	4013      	ands	r3, r2
 8006124:	d01d      	beq.n	8006162 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	4a1d      	ldr	r2, [pc, #116]	; (80061a4 <UART_AdvFeatureConfig+0x15c>)
 800612e:	4013      	ands	r3, r2
 8006130:	0019      	movs	r1, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006142:	2380      	movs	r3, #128	; 0x80
 8006144:	035b      	lsls	r3, r3, #13
 8006146:	429a      	cmp	r2, r3
 8006148:	d10b      	bne.n	8006162 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	4a15      	ldr	r2, [pc, #84]	; (80061a8 <UART_AdvFeatureConfig+0x160>)
 8006152:	4013      	ands	r3, r2
 8006154:	0019      	movs	r1, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	2280      	movs	r2, #128	; 0x80
 8006168:	4013      	ands	r3, r2
 800616a:	d00b      	beq.n	8006184 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	4a0e      	ldr	r2, [pc, #56]	; (80061ac <UART_AdvFeatureConfig+0x164>)
 8006174:	4013      	ands	r3, r2
 8006176:	0019      	movs	r1, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	605a      	str	r2, [r3, #4]
  }
}
 8006184:	46c0      	nop			; (mov r8, r8)
 8006186:	46bd      	mov	sp, r7
 8006188:	b002      	add	sp, #8
 800618a:	bd80      	pop	{r7, pc}
 800618c:	fffdffff 	.word	0xfffdffff
 8006190:	fffeffff 	.word	0xfffeffff
 8006194:	fffbffff 	.word	0xfffbffff
 8006198:	ffff7fff 	.word	0xffff7fff
 800619c:	ffffefff 	.word	0xffffefff
 80061a0:	ffffdfff 	.word	0xffffdfff
 80061a4:	ffefffff 	.word	0xffefffff
 80061a8:	ff9fffff 	.word	0xff9fffff
 80061ac:	fff7ffff 	.word	0xfff7ffff

080061b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2269      	movs	r2, #105	; 0x69
 80061c2:	2120      	movs	r1, #32
 80061c4:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	226a      	movs	r2, #106	; 0x6a
 80061ca:	2120      	movs	r1, #32
 80061cc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2268      	movs	r2, #104	; 0x68
 80061d2:	2100      	movs	r1, #0
 80061d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	0018      	movs	r0, r3
 80061da:	46bd      	mov	sp, r7
 80061dc:	b002      	add	sp, #8
 80061de:	bd80      	pop	{r7, pc}

080061e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4909      	ldr	r1, [pc, #36]	; (8006218 <UART_EndRxTransfer+0x38>)
 80061f4:	400a      	ands	r2, r1
 80061f6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2101      	movs	r1, #1
 8006204:	438a      	bics	r2, r1
 8006206:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	226a      	movs	r2, #106	; 0x6a
 800620c:	2120      	movs	r1, #32
 800620e:	5499      	strb	r1, [r3, r2]
}
 8006210:	46c0      	nop			; (mov r8, r8)
 8006212:	46bd      	mov	sp, r7
 8006214:	b002      	add	sp, #8
 8006216:	bd80      	pop	{r7, pc}
 8006218:	fffffedf 	.word	0xfffffedf

0800621c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	225a      	movs	r2, #90	; 0x5a
 800622e:	2100      	movs	r1, #0
 8006230:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2252      	movs	r2, #82	; 0x52
 8006236:	2100      	movs	r1, #0
 8006238:	5299      	strh	r1, [r3, r2]

  HAL_UART_ErrorCallback(huart);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	0018      	movs	r0, r3
 800623e:	f7fd f8ef 	bl	8003420 <HAL_UART_ErrorCallback>
}
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	46bd      	mov	sp, r7
 8006246:	b004      	add	sp, #16
 8006248:	bd80      	pop	{r7, pc}

0800624a <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b084      	sub	sp, #16
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006256:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	225a      	movs	r2, #90	; 0x5a
 800625c:	2100      	movs	r1, #0
 800625e:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	220f      	movs	r2, #15
 8006266:	621a      	str	r2, [r3, #32]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	226a      	movs	r2, #106	; 0x6a
 800626c:	2120      	movs	r1, #32
 800626e:	5499      	strb	r1, [r3, r2]

  /* Call user Abort complete callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	0018      	movs	r0, r3
 8006274:	f7ff fd68 	bl	8005d48 <HAL_UART_AbortReceiveCpltCallback>
}
 8006278:	46c0      	nop			; (mov r8, r8)
 800627a:	46bd      	mov	sp, r7
 800627c:	b004      	add	sp, #16
 800627e:	bd80      	pop	{r7, pc}

08006280 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2269      	movs	r2, #105	; 0x69
 800628c:	5c9b      	ldrb	r3, [r3, r2]
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b21      	cmp	r3, #33	; 0x21
 8006292:	d147      	bne.n	8006324 <UART_Transmit_IT+0xa4>
  {
    if(huart->TxXferCount == 0U)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2252      	movs	r2, #82	; 0x52
 8006298:	5a9b      	ldrh	r3, [r3, r2]
 800629a:	b29b      	uxth	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d111      	bne.n	80062c4 <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2180      	movs	r1, #128	; 0x80
 80062ac:	438a      	bics	r2, r1
 80062ae:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2140      	movs	r1, #64	; 0x40
 80062bc:	430a      	orrs	r2, r1
 80062be:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	e030      	b.n	8006326 <UART_Transmit_IT+0xa6>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	2380      	movs	r3, #128	; 0x80
 80062ca:	015b      	lsls	r3, r3, #5
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d114      	bne.n	80062fa <UART_Transmit_IT+0x7a>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d110      	bne.n	80062fa <UART_Transmit_IT+0x7a>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062dc:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	881a      	ldrh	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	05d2      	lsls	r2, r2, #23
 80062e8:	0dd2      	lsrs	r2, r2, #23
 80062ea:	b292      	uxth	r2, r2
 80062ec:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062f2:	1c9a      	adds	r2, r3, #2
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80062f8:	e009      	b.n	800630e <UART_Transmit_IT+0x8e>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062fe:	1c59      	adds	r1, r3, #1
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	64d1      	str	r1, [r2, #76]	; 0x4c
 8006304:	781a      	ldrb	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	b292      	uxth	r2, r2
 800630c:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2252      	movs	r2, #82	; 0x52
 8006312:	5a9b      	ldrh	r3, [r3, r2]
 8006314:	b29b      	uxth	r3, r3
 8006316:	3b01      	subs	r3, #1
 8006318:	b299      	uxth	r1, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2252      	movs	r2, #82	; 0x52
 800631e:	5299      	strh	r1, [r3, r2]

      return HAL_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	e000      	b.n	8006326 <UART_Transmit_IT+0xa6>
    }
  }
  else
  {
    return HAL_BUSY;
 8006324:	2302      	movs	r3, #2
  }
}
 8006326:	0018      	movs	r0, r3
 8006328:	46bd      	mov	sp, r7
 800632a:	b004      	add	sp, #16
 800632c:	bd80      	pop	{r7, pc}

0800632e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b082      	sub	sp, #8
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2140      	movs	r1, #64	; 0x40
 8006342:	438a      	bics	r2, r1
 8006344:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2269      	movs	r2, #105	; 0x69
 800634a:	2120      	movs	r1, #32
 800634c:	5499      	strb	r1, [r3, r2]

  HAL_UART_TxCpltCallback(huart);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	0018      	movs	r0, r3
 8006352:	f7fd f857 	bl	8003404 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	0018      	movs	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	b002      	add	sp, #8
 800635e:	bd80      	pop	{r7, pc}

08006360 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006360:	b590      	push	{r4, r7, lr}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8006368:	200e      	movs	r0, #14
 800636a:	183b      	adds	r3, r7, r0
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	215c      	movs	r1, #92	; 0x5c
 8006370:	5a52      	ldrh	r2, [r2, r1]
 8006372:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	226a      	movs	r2, #106	; 0x6a
 8006378:	5c9b      	ldrb	r3, [r3, r2]
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b22      	cmp	r3, #34	; 0x22
 800637e:	d159      	bne.n	8006434 <UART_Receive_IT+0xd4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	210c      	movs	r1, #12
 8006386:	187b      	adds	r3, r7, r1
 8006388:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800638a:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	2380      	movs	r3, #128	; 0x80
 8006392:	015b      	lsls	r3, r3, #5
 8006394:	429a      	cmp	r2, r3
 8006396:	d114      	bne.n	80063c2 <UART_Receive_IT+0x62>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d110      	bne.n	80063c2 <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a4:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 80063a6:	187b      	adds	r3, r7, r1
 80063a8:	183a      	adds	r2, r7, r0
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	8812      	ldrh	r2, [r2, #0]
 80063ae:	4013      	ands	r3, r2
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ba:	1c9a      	adds	r2, r3, #2
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	655a      	str	r2, [r3, #84]	; 0x54
 80063c0:	e010      	b.n	80063e4 <UART_Receive_IT+0x84>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80063c2:	230c      	movs	r3, #12
 80063c4:	18fb      	adds	r3, r7, r3
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	b2d9      	uxtb	r1, r3
 80063ca:	230e      	movs	r3, #14
 80063cc:	18fb      	adds	r3, r7, r3
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	b2d8      	uxtb	r0, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d6:	1c5c      	adds	r4, r3, #1
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	6554      	str	r4, [r2, #84]	; 0x54
 80063dc:	0002      	movs	r2, r0
 80063de:	400a      	ands	r2, r1
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	225a      	movs	r2, #90	; 0x5a
 80063e8:	5a9b      	ldrh	r3, [r3, r2]
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	215a      	movs	r1, #90	; 0x5a
 80063f4:	1c18      	adds	r0, r3, #0
 80063f6:	5250      	strh	r0, [r2, r1]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d119      	bne.n	8006430 <UART_Receive_IT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4912      	ldr	r1, [pc, #72]	; (8006450 <UART_Receive_IT+0xf0>)
 8006408:	400a      	ands	r2, r1
 800640a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2101      	movs	r1, #1
 8006418:	438a      	bics	r2, r1
 800641a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	226a      	movs	r2, #106	; 0x6a
 8006420:	2120      	movs	r1, #32
 8006422:	5499      	strb	r1, [r3, r2]

      HAL_UART_RxCpltCallback(huart);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	0018      	movs	r0, r3
 8006428:	f7fc ffb6 	bl	8003398 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	e00a      	b.n	8006446 <UART_Receive_IT+0xe6>
    }

    return HAL_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	e008      	b.n	8006446 <UART_Receive_IT+0xe6>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699a      	ldr	r2, [r3, #24]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2108      	movs	r1, #8
 8006440:	430a      	orrs	r2, r1
 8006442:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8006444:	2302      	movs	r3, #2
  }
}
 8006446:	0018      	movs	r0, r3
 8006448:	46bd      	mov	sp, r7
 800644a:	b005      	add	sp, #20
 800644c:	bd90      	pop	{r4, r7, pc}
 800644e:	46c0      	nop			; (mov r8, r8)
 8006450:	fffffedf 	.word	0xfffffedf

08006454 <__libc_init_array>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	2600      	movs	r6, #0
 8006458:	4d0c      	ldr	r5, [pc, #48]	; (800648c <__libc_init_array+0x38>)
 800645a:	4c0d      	ldr	r4, [pc, #52]	; (8006490 <__libc_init_array+0x3c>)
 800645c:	1b64      	subs	r4, r4, r5
 800645e:	10a4      	asrs	r4, r4, #2
 8006460:	42a6      	cmp	r6, r4
 8006462:	d109      	bne.n	8006478 <__libc_init_array+0x24>
 8006464:	2600      	movs	r6, #0
 8006466:	f000 f821 	bl	80064ac <_init>
 800646a:	4d0a      	ldr	r5, [pc, #40]	; (8006494 <__libc_init_array+0x40>)
 800646c:	4c0a      	ldr	r4, [pc, #40]	; (8006498 <__libc_init_array+0x44>)
 800646e:	1b64      	subs	r4, r4, r5
 8006470:	10a4      	asrs	r4, r4, #2
 8006472:	42a6      	cmp	r6, r4
 8006474:	d105      	bne.n	8006482 <__libc_init_array+0x2e>
 8006476:	bd70      	pop	{r4, r5, r6, pc}
 8006478:	00b3      	lsls	r3, r6, #2
 800647a:	58eb      	ldr	r3, [r5, r3]
 800647c:	4798      	blx	r3
 800647e:	3601      	adds	r6, #1
 8006480:	e7ee      	b.n	8006460 <__libc_init_array+0xc>
 8006482:	00b3      	lsls	r3, r6, #2
 8006484:	58eb      	ldr	r3, [r5, r3]
 8006486:	4798      	blx	r3
 8006488:	3601      	adds	r6, #1
 800648a:	e7f2      	b.n	8006472 <__libc_init_array+0x1e>
 800648c:	080064fc 	.word	0x080064fc
 8006490:	080064fc 	.word	0x080064fc
 8006494:	080064fc 	.word	0x080064fc
 8006498:	08006500 	.word	0x08006500

0800649c <memset>:
 800649c:	0003      	movs	r3, r0
 800649e:	1882      	adds	r2, r0, r2
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d100      	bne.n	80064a6 <memset+0xa>
 80064a4:	4770      	bx	lr
 80064a6:	7019      	strb	r1, [r3, #0]
 80064a8:	3301      	adds	r3, #1
 80064aa:	e7f9      	b.n	80064a0 <memset+0x4>

080064ac <_init>:
 80064ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b2:	bc08      	pop	{r3}
 80064b4:	469e      	mov	lr, r3
 80064b6:	4770      	bx	lr

080064b8 <_fini>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	46c0      	nop			; (mov r8, r8)
 80064bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064be:	bc08      	pop	{r3}
 80064c0:	469e      	mov	lr, r3
 80064c2:	4770      	bx	lr
