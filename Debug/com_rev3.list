
com_rev3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cfc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003dbc  08003dbc  00013dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003df4  08003df4  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08003df4  08003df4  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003df4  08003df4  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003df4  08003df4  00013df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dfc  08003dfc  00013dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08003e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  2000003c  08003e3c  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  08003e3c  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1c7  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e9b  00000000  00000000  0002c22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  0002e0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  0002ee00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f7a8  00000000  00000000  0002fa50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eaae  00000000  00000000  0003f1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004bf20  00000000  00000000  0004dca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00099bc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fa8  00000000  00000000  00099c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000003c 	.word	0x2000003c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003da4 	.word	0x08003da4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000040 	.word	0x20000040
 8000104:	08003da4 	.word	0x08003da4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <_ZN7SpiPortC1Ev>:
#include "SpiPort.hpp"
SpiPort::SpiPort() {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	0018      	movs	r0, r3
 800022c:	2306      	movs	r3, #6
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f003 fdaf 	bl	8003d94 <memset>
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2206      	movs	r2, #6
 800023a:	189b      	adds	r3, r3, r2
 800023c:	2206      	movs	r2, #6
 800023e:	2100      	movs	r1, #0
 8000240:	0018      	movs	r0, r3
 8000242:	f003 fda7 	bl	8003d94 <memset>
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	330c      	adds	r3, #12
 800024a:	2206      	movs	r2, #6
 800024c:	2100      	movs	r1, #0
 800024e:	0018      	movs	r0, r3
 8000250:	f003 fda0 	bl	8003d94 <memset>
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2212      	movs	r2, #18
 8000258:	189b      	adds	r3, r3, r2
 800025a:	2206      	movs	r2, #6
 800025c:	2100      	movs	r1, #0
 800025e:	0018      	movs	r0, r3
 8000260:	f003 fd98 	bl	8003d94 <memset>
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	3318      	adds	r3, #24
 8000268:	2206      	movs	r2, #6
 800026a:	2100      	movs	r1, #0
 800026c:	0018      	movs	r0, r3
 800026e:	f003 fd91 	bl	8003d94 <memset>
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2225      	movs	r2, #37	; 0x25
 8000276:	2100      	movs	r1, #0
 8000278:	5499      	strb	r1, [r3, r2]
	this->port = GPIOA;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2290      	movs	r2, #144	; 0x90
 800027e:	05d2      	lsls	r2, r2, #23
 8000280:	621a      	str	r2, [r3, #32]
	this->pin = 0;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2224      	movs	r2, #36	; 0x24
 8000286:	2100      	movs	r1, #0
 8000288:	5499      	strb	r1, [r3, r2]
}
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	0018      	movs	r0, r3
 800028e:	46bd      	mov	sp, r7
 8000290:	b002      	add	sp, #8
 8000292:	bd80      	pop	{r7, pc}

08000294 <_ZN7SpiPort5setCSEP12GPIO_TypeDefh>:
SpiPort::SpiPort(GPIO_TypeDef *port, uint8_t pin) {
	this->port = port;
	this->pin = pin;
}

void SpiPort::setCS(GPIO_TypeDef *port, uint8_t pin) {
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	60f8      	str	r0, [r7, #12]
 800029c:	60b9      	str	r1, [r7, #8]
 800029e:	1dfb      	adds	r3, r7, #7
 80002a0:	701a      	strb	r2, [r3, #0]
	this->port = port;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	68ba      	ldr	r2, [r7, #8]
 80002a6:	621a      	str	r2, [r3, #32]
	this->pin = pin;
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	1dfa      	adds	r2, r7, #7
 80002ac:	2124      	movs	r1, #36	; 0x24
 80002ae:	7812      	ldrb	r2, [r2, #0]
 80002b0:	545a      	strb	r2, [r3, r1]
}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	46bd      	mov	sp, r7
 80002b6:	b004      	add	sp, #16
 80002b8:	bd80      	pop	{r7, pc}

080002ba <_ZN7SpiPort5setTxEPhS0_S0_S0_>:

void SpiPort::setTx(uint8_t *dat0, uint8_t *dat1, uint8_t *dat2, uint8_t *dat3) {
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b084      	sub	sp, #16
 80002be:	af00      	add	r7, sp, #0
 80002c0:	60f8      	str	r0, [r7, #12]
 80002c2:	60b9      	str	r1, [r7, #8]
 80002c4:	607a      	str	r2, [r7, #4]
 80002c6:	603b      	str	r3, [r7, #0]
	this->tx[0] = *dat0;
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	781a      	ldrb	r2, [r3, #0]
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	719a      	strb	r2, [r3, #6]
	this->tx[1] = *dat1;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	781a      	ldrb	r2, [r3, #0]
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	71da      	strb	r2, [r3, #7]
	this->tx[2] = *dat2;
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	721a      	strb	r2, [r3, #8]
	this->tx[3] = *dat3;
 80002e0:	69bb      	ldr	r3, [r7, #24]
 80002e2:	781a      	ldrb	r2, [r3, #0]
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	725a      	strb	r2, [r3, #9]
	this->tx[5] = this->tx[0] + this->tx[1] + this->tx[2] + this->tx[3] + this->tx[4];
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	799a      	ldrb	r2, [r3, #6]
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	79db      	ldrb	r3, [r3, #7]
 80002f0:	18d3      	adds	r3, r2, r3
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	7a1b      	ldrb	r3, [r3, #8]
 80002f8:	18d3      	adds	r3, r2, r3
 80002fa:	b2da      	uxtb	r2, r3
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	7a5b      	ldrb	r3, [r3, #9]
 8000300:	18d3      	adds	r3, r2, r3
 8000302:	b2da      	uxtb	r2, r3
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	7a9b      	ldrb	r3, [r3, #10]
 8000308:	18d3      	adds	r3, r2, r3
 800030a:	b2da      	uxtb	r2, r3
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	72da      	strb	r2, [r3, #11]
}
 8000310:	46c0      	nop			; (mov r8, r8)
 8000312:	46bd      	mov	sp, r7
 8000314:	b004      	add	sp, #16
 8000316:	bd80      	pop	{r7, pc}

08000318 <_ZN7SpiPort6selectEv>:

void SpiPort::select() {
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	this->port->BRR = (1 << this->pin);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2224      	movs	r2, #36	; 0x24
 8000324:	5c9b      	ldrb	r3, [r3, r2]
 8000326:	001a      	movs	r2, r3
 8000328:	2301      	movs	r3, #1
 800032a:	4093      	lsls	r3, r2
 800032c:	001a      	movs	r2, r3
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	6a1b      	ldr	r3, [r3, #32]
 8000332:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b002      	add	sp, #8
 800033a:	bd80      	pop	{r7, pc}

0800033c <_ZN7SpiPort8unSelectEv>:

void SpiPort::unSelect() {
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	this->port->BSRR = (1 << this->pin);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2224      	movs	r2, #36	; 0x24
 8000348:	5c9b      	ldrb	r3, [r3, r2]
 800034a:	001a      	movs	r2, r3
 800034c:	2301      	movs	r3, #1
 800034e:	4093      	lsls	r3, r2
 8000350:	001a      	movs	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	6a1b      	ldr	r3, [r3, #32]
 8000356:	619a      	str	r2, [r3, #24]
}
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	b002      	add	sp, #8
 800035e:	bd80      	pop	{r7, pc}

08000360 <_ZN7SpiPort7rxCheckEv>:

uint8_t SpiPort::rxCheck() {
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	if (this->rx[0] + this->rx[1] + this->rx[2] + this->rx[3] + this->rx[4] == this->rx[5]) {
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	001a      	movs	r2, r3
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	785b      	ldrb	r3, [r3, #1]
 8000372:	18d3      	adds	r3, r2, r3
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	7892      	ldrb	r2, [r2, #2]
 8000378:	189b      	adds	r3, r3, r2
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	78d2      	ldrb	r2, [r2, #3]
 800037e:	189b      	adds	r3, r3, r2
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	7912      	ldrb	r2, [r2, #4]
 8000384:	189b      	adds	r3, r3, r2
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	7952      	ldrb	r2, [r2, #5]
 800038a:	4293      	cmp	r3, r2
 800038c:	d101      	bne.n	8000392 <_ZN7SpiPort7rxCheckEv+0x32>
		return 1;
 800038e:	2301      	movs	r3, #1
 8000390:	e000      	b.n	8000394 <_ZN7SpiPort7rxCheckEv+0x34>
	}
	return 0;
 8000392:	2300      	movs	r3, #0
}
 8000394:	0018      	movs	r0, r3
 8000396:	46bd      	mov	sp, r7
 8000398:	b002      	add	sp, #8
 800039a:	bd80      	pop	{r7, pc}

0800039c <_ZN7SpiPort9prevCheckEv>:

uint8_t SpiPort::prevCheck() {
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	if (this->txPrev[0] != this->rx[0] || this->txPrev[1] != this->rx[1]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	7b1a      	ldrb	r2, [r3, #12]
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d117      	bne.n	80003e0 <_ZN7SpiPort9prevCheckEv+0x44>
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	7b5a      	ldrb	r2, [r3, #13]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	785b      	ldrb	r3, [r3, #1]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d111      	bne.n	80003e0 <_ZN7SpiPort9prevCheckEv+0x44>
			|| this->txPrev[2] != this->rx[2] || this->txPrev[3] != this->rx[3]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	7b9a      	ldrb	r2, [r3, #14]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	789b      	ldrb	r3, [r3, #2]
 80003c4:	429a      	cmp	r2, r3
 80003c6:	d10b      	bne.n	80003e0 <_ZN7SpiPort9prevCheckEv+0x44>
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	7bda      	ldrb	r2, [r3, #15]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	78db      	ldrb	r3, [r3, #3]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d105      	bne.n	80003e0 <_ZN7SpiPort9prevCheckEv+0x44>
			|| this->txPrev[4] != this->rx[4]) {
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	7c1a      	ldrb	r2, [r3, #16]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	791b      	ldrb	r3, [r3, #4]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d015      	beq.n	800040c <_ZN7SpiPort9prevCheckEv+0x70>
		this->txPrev[0] = this->rx[0];
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	781a      	ldrb	r2, [r3, #0]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	731a      	strb	r2, [r3, #12]
		this->txPrev[1] = this->rx[1];
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	785a      	ldrb	r2, [r3, #1]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	735a      	strb	r2, [r3, #13]
		this->txPrev[2] = this->rx[2];
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	789a      	ldrb	r2, [r3, #2]
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	739a      	strb	r2, [r3, #14]
		this->txPrev[3] = this->rx[3];
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	78da      	ldrb	r2, [r3, #3]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	73da      	strb	r2, [r3, #15]
		this->txPrev[4] = this->rx[4];
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	791a      	ldrb	r2, [r3, #4]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	741a      	strb	r2, [r3, #16]
		return 1;
 8000408:	2301      	movs	r3, #1
 800040a:	e000      	b.n	800040e <_ZN7SpiPort9prevCheckEv+0x72>
	}
	return 0;
 800040c:	2300      	movs	r3, #0
}
 800040e:	0018      	movs	r0, r3
 8000410:	46bd      	mov	sp, r7
 8000412:	b002      	add	sp, #8
 8000414:	bd80      	pop	{r7, pc}

08000416 <_ZN7SpiPort5getRxEv>:

uint8_t* SpiPort::getRx() {
 8000416:	b580      	push	{r7, lr}
 8000418:	b082      	sub	sp, #8
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
	return &this->rx[0];
 800041e:	687b      	ldr	r3, [r7, #4]
}
 8000420:	0018      	movs	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	b002      	add	sp, #8
 8000426:	bd80      	pop	{r7, pc}

08000428 <_ZN7SpiPort5getTxEv>:
uint8_t* SpiPort::getTx() {
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	return &this->tx[0];
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	3306      	adds	r3, #6
}
 8000434:	0018      	movs	r0, r3
 8000436:	46bd      	mov	sp, r7
 8000438:	b002      	add	sp, #8
 800043a:	bd80      	pop	{r7, pc}

0800043c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	if (uartRxState0 = 1) {
 8000444:	4b15      	ldr	r3, [pc, #84]	; (800049c <HAL_UART_RxCpltCallback+0x60>)
 8000446:	2201      	movs	r2, #1
 8000448:	701a      	strb	r2, [r3, #0]
 800044a:	2301      	movs	r3, #1
 800044c:	2b00      	cmp	r3, #0
 800044e:	d00c      	beq.n	800046a <HAL_UART_RxCpltCallback+0x2e>
		uartRxState0 = 2;
 8000450:	4b12      	ldr	r3, [pc, #72]	; (800049c <HAL_UART_RxCpltCallback+0x60>)
 8000452:	2202      	movs	r2, #2
 8000454:	701a      	strb	r2, [r3, #0]
		uartRxState1 = 1;
 8000456:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <HAL_UART_RxCpltCallback+0x64>)
 8000458:	2201      	movs	r2, #1
 800045a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, uartRx1, 53);
 800045c:	4911      	ldr	r1, [pc, #68]	; (80004a4 <HAL_UART_RxCpltCallback+0x68>)
 800045e:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <HAL_UART_RxCpltCallback+0x6c>)
 8000460:	2235      	movs	r2, #53	; 0x35
 8000462:	0018      	movs	r0, r3
 8000464:	f002 fefe 	bl	8003264 <HAL_UART_Receive_IT>
 8000468:	e011      	b.n	800048e <HAL_UART_RxCpltCallback+0x52>

	} else if (uartRxState1 = 1) {
 800046a:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <HAL_UART_RxCpltCallback+0x64>)
 800046c:	2201      	movs	r2, #1
 800046e:	701a      	strb	r2, [r3, #0]
 8000470:	2301      	movs	r3, #1
 8000472:	2b00      	cmp	r3, #0
 8000474:	d00b      	beq.n	800048e <HAL_UART_RxCpltCallback+0x52>
		uartRxState1 = 2;
 8000476:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <HAL_UART_RxCpltCallback+0x64>)
 8000478:	2202      	movs	r2, #2
 800047a:	701a      	strb	r2, [r3, #0]
		uartRxState0 = 1;
 800047c:	4b07      	ldr	r3, [pc, #28]	; (800049c <HAL_UART_RxCpltCallback+0x60>)
 800047e:	2201      	movs	r2, #1
 8000480:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, uartRx0, 53);
 8000482:	490a      	ldr	r1, [pc, #40]	; (80004ac <HAL_UART_RxCpltCallback+0x70>)
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <HAL_UART_RxCpltCallback+0x6c>)
 8000486:	2235      	movs	r2, #53	; 0x35
 8000488:	0018      	movs	r0, r3
 800048a:	f002 feeb 	bl	8003264 <HAL_UART_Receive_IT>

	}
	uartResMs = 0;
 800048e:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <HAL_UART_RxCpltCallback+0x74>)
 8000490:	2200      	movs	r2, #0
 8000492:	701a      	strb	r2, [r3, #0]
}
 8000494:	46c0      	nop			; (mov r8, r8)
 8000496:	46bd      	mov	sp, r7
 8000498:	b002      	add	sp, #8
 800049a:	bd80      	pop	{r7, pc}
 800049c:	200002d3 	.word	0x200002d3
 80004a0:	200002d4 	.word	0x200002d4
 80004a4:	2000022c 	.word	0x2000022c
 80004a8:	20000184 	.word	0x20000184
 80004ac:	200001f4 	.word	0x200001f4
 80004b0:	20000299 	.word	0x20000299

080004b4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	uartTxState = 0;
 80004bc:	4b03      	ldr	r3, [pc, #12]	; (80004cc <HAL_UART_TxCpltCallback+0x18>)
 80004be:	2200      	movs	r2, #0
 80004c0:	701a      	strb	r2, [r3, #0]
}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b002      	add	sp, #8
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	200002d5 	.word	0x200002d5

080004d0 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback (SPI_HandleTypeDef * hspi)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	spiState = 2;
 80004d8:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <HAL_SPI_TxRxCpltCallback+0x18>)
 80004da:	2202      	movs	r2, #2
 80004dc:	701a      	strb	r2, [r3, #0]
}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	b002      	add	sp, #8
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	200004bc 	.word	0x200004bc

080004ec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	++uartResMs;
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	3301      	adds	r3, #1
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80004fe:	701a      	strb	r2, [r3, #0]
	++uartTxMs;
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	3301      	adds	r3, #1
 8000506:	b29a      	uxth	r2, r3
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800050a:	801a      	strh	r2, [r3, #0]
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000299 	.word	0x20000299
 8000518:	2000029a 	.word	0x2000029a

0800051c <_Z15calculateRxSummPh>:

void calculateRxSumm(uint8_t *uartRxBuff) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	uint16_t uartRxSumm = 0;
 8000524:	230e      	movs	r3, #14
 8000526:	18fb      	adds	r3, r7, r3
 8000528:	2200      	movs	r2, #0
 800052a:	801a      	strh	r2, [r3, #0]
	uint8_t uartRxSummArr[2] = { 0 };
 800052c:	2308      	movs	r3, #8
 800052e:	18fb      	adds	r3, r7, r3
 8000530:	2200      	movs	r2, #0
 8000532:	801a      	strh	r2, [r3, #0]

	for (uint8_t i = 0; i < 51; i++) {
 8000534:	230d      	movs	r3, #13
 8000536:	18fb      	adds	r3, r7, r3
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]
 800053c:	200d      	movs	r0, #13
 800053e:	183b      	adds	r3, r7, r0
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b32      	cmp	r3, #50	; 0x32
 8000544:	d811      	bhi.n	800056a <_Z15calculateRxSummPh+0x4e>
		uartRxSumm += *(uartRxBuff + i);
 8000546:	183b      	adds	r3, r7, r0
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	18d3      	adds	r3, r2, r3
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b299      	uxth	r1, r3
 8000552:	220e      	movs	r2, #14
 8000554:	18bb      	adds	r3, r7, r2
 8000556:	18ba      	adds	r2, r7, r2
 8000558:	8812      	ldrh	r2, [r2, #0]
 800055a:	188a      	adds	r2, r1, r2
 800055c:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < 51; i++) {
 800055e:	183b      	adds	r3, r7, r0
 8000560:	781a      	ldrb	r2, [r3, #0]
 8000562:	183b      	adds	r3, r7, r0
 8000564:	3201      	adds	r2, #1
 8000566:	701a      	strb	r2, [r3, #0]
 8000568:	e7e8      	b.n	800053c <_Z15calculateRxSummPh+0x20>
	}
	uartRxSummArr[0] = (uint8_t) uartRxSumm;
 800056a:	200e      	movs	r0, #14
 800056c:	183b      	adds	r3, r7, r0
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	b2da      	uxtb	r2, r3
 8000572:	2108      	movs	r1, #8
 8000574:	187b      	adds	r3, r7, r1
 8000576:	701a      	strb	r2, [r3, #0]
	uartRxSummArr[1] = (uint8_t) (uartRxSumm >> 8);
 8000578:	183b      	adds	r3, r7, r0
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	0a1b      	lsrs	r3, r3, #8
 800057e:	b29b      	uxth	r3, r3
 8000580:	b2da      	uxtb	r2, r3
 8000582:	187b      	adds	r3, r7, r1
 8000584:	705a      	strb	r2, [r3, #1]

	if (uartRxSummArr[0] == *(uartRxBuff + 51) && uartRxSummArr[0] == *(uartRxBuff + 51)) {
 8000586:	187b      	adds	r3, r7, r1
 8000588:	781a      	ldrb	r2, [r3, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3333      	adds	r3, #51	; 0x33
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	429a      	cmp	r2, r3
 8000592:	d11d      	bne.n	80005d0 <_Z15calculateRxSummPh+0xb4>
 8000594:	187b      	adds	r3, r7, r1
 8000596:	781a      	ldrb	r2, [r3, #0]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3333      	adds	r3, #51	; 0x33
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d116      	bne.n	80005d0 <_Z15calculateRxSummPh+0xb4>
		for (uint8_t i = 0; i < 53; i++) {
 80005a2:	230c      	movs	r3, #12
 80005a4:	18fb      	adds	r3, r7, r3
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
 80005aa:	200c      	movs	r0, #12
 80005ac:	183b      	adds	r3, r7, r0
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b34      	cmp	r3, #52	; 0x34
 80005b2:	d80d      	bhi.n	80005d0 <_Z15calculateRxSummPh+0xb4>
			uartRxSaved0[i] = uartRx0[i];
 80005b4:	183b      	adds	r3, r7, r0
 80005b6:	781a      	ldrb	r2, [r3, #0]
 80005b8:	183b      	adds	r3, r7, r0
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4906      	ldr	r1, [pc, #24]	; (80005d8 <_Z15calculateRxSummPh+0xbc>)
 80005be:	5c89      	ldrb	r1, [r1, r2]
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <_Z15calculateRxSummPh+0xc0>)
 80005c2:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 53; i++) {
 80005c4:	183b      	adds	r3, r7, r0
 80005c6:	781a      	ldrb	r2, [r3, #0]
 80005c8:	183b      	adds	r3, r7, r0
 80005ca:	3201      	adds	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
 80005ce:	e7ec      	b.n	80005aa <_Z15calculateRxSummPh+0x8e>
		}
	}
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b004      	add	sp, #16
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200001f4 	.word	0x200001f4
 80005dc:	20000264 	.word	0x20000264

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	spiPort[0].setCS(GPIOC, 9);
 80005e6:	4997      	ldr	r1, [pc, #604]	; (8000844 <main+0x264>)
 80005e8:	4b97      	ldr	r3, [pc, #604]	; (8000848 <main+0x268>)
 80005ea:	2209      	movs	r2, #9
 80005ec:	0018      	movs	r0, r3
 80005ee:	f7ff fe51 	bl	8000294 <_ZN7SpiPort5setCSEP12GPIO_TypeDefh>
	spiPort[1].setCS(GPIOC, 8);
 80005f2:	4994      	ldr	r1, [pc, #592]	; (8000844 <main+0x264>)
 80005f4:	4b95      	ldr	r3, [pc, #596]	; (800084c <main+0x26c>)
 80005f6:	2208      	movs	r2, #8
 80005f8:	0018      	movs	r0, r3
 80005fa:	f7ff fe4b 	bl	8000294 <_ZN7SpiPort5setCSEP12GPIO_TypeDefh>
	spiPort[2].setCS(GPIOC, 7);
 80005fe:	4991      	ldr	r1, [pc, #580]	; (8000844 <main+0x264>)
 8000600:	4b93      	ldr	r3, [pc, #588]	; (8000850 <main+0x270>)
 8000602:	2207      	movs	r2, #7
 8000604:	0018      	movs	r0, r3
 8000606:	f7ff fe45 	bl	8000294 <_ZN7SpiPort5setCSEP12GPIO_TypeDefh>
	spiPort[3].setCS(GPIOC, 6);
 800060a:	498e      	ldr	r1, [pc, #568]	; (8000844 <main+0x264>)
 800060c:	4b91      	ldr	r3, [pc, #580]	; (8000854 <main+0x274>)
 800060e:	2206      	movs	r2, #6
 8000610:	0018      	movs	r0, r3
 8000612:	f7ff fe3f 	bl	8000294 <_ZN7SpiPort5setCSEP12GPIO_TypeDefh>
	spiPort[4].setCS(GPIOB, 15);
 8000616:	4990      	ldr	r1, [pc, #576]	; (8000858 <main+0x278>)
 8000618:	4b90      	ldr	r3, [pc, #576]	; (800085c <main+0x27c>)
 800061a:	220f      	movs	r2, #15
 800061c:	0018      	movs	r0, r3
 800061e:	f7ff fe39 	bl	8000294 <_ZN7SpiPort5setCSEP12GPIO_TypeDefh>
	spiPort[5].setCS(GPIOB, 14);
 8000622:	498d      	ldr	r1, [pc, #564]	; (8000858 <main+0x278>)
 8000624:	4b8e      	ldr	r3, [pc, #568]	; (8000860 <main+0x280>)
 8000626:	220e      	movs	r2, #14
 8000628:	0018      	movs	r0, r3
 800062a:	f7ff fe33 	bl	8000294 <_ZN7SpiPort5setCSEP12GPIO_TypeDefh>
	spiPort[6].setCS(GPIOB, 13);
 800062e:	498a      	ldr	r1, [pc, #552]	; (8000858 <main+0x278>)
 8000630:	4b8c      	ldr	r3, [pc, #560]	; (8000864 <main+0x284>)
 8000632:	220d      	movs	r2, #13
 8000634:	0018      	movs	r0, r3
 8000636:	f7ff fe2d 	bl	8000294 <_ZN7SpiPort5setCSEP12GPIO_TypeDefh>
	spiPort[7].setCS(GPIOB, 12);
 800063a:	4987      	ldr	r1, [pc, #540]	; (8000858 <main+0x278>)
 800063c:	4b8a      	ldr	r3, [pc, #552]	; (8000868 <main+0x288>)
 800063e:	220c      	movs	r2, #12
 8000640:	0018      	movs	r0, r3
 8000642:	f7ff fe27 	bl	8000294 <_ZN7SpiPort5setCSEP12GPIO_TypeDefh>
	spiPort[8].setCS(GPIOB, 2);
 8000646:	4984      	ldr	r1, [pc, #528]	; (8000858 <main+0x278>)
 8000648:	4b88      	ldr	r3, [pc, #544]	; (800086c <main+0x28c>)
 800064a:	2202      	movs	r2, #2
 800064c:	0018      	movs	r0, r3
 800064e:	f7ff fe21 	bl	8000294 <_ZN7SpiPort5setCSEP12GPIO_TypeDefh>
	spiPort[9].setCS(GPIOB, 1);
 8000652:	4981      	ldr	r1, [pc, #516]	; (8000858 <main+0x278>)
 8000654:	4b86      	ldr	r3, [pc, #536]	; (8000870 <main+0x290>)
 8000656:	2201      	movs	r2, #1
 8000658:	0018      	movs	r0, r3
 800065a:	f7ff fe1b 	bl	8000294 <_ZN7SpiPort5setCSEP12GPIO_TypeDefh>
	spiPort[10].setCS(GPIOB, 0);
 800065e:	497e      	ldr	r1, [pc, #504]	; (8000858 <main+0x278>)
 8000660:	4b84      	ldr	r3, [pc, #528]	; (8000874 <main+0x294>)
 8000662:	2200      	movs	r2, #0
 8000664:	0018      	movs	r0, r3
 8000666:	f7ff fe15 	bl	8000294 <_ZN7SpiPort5setCSEP12GPIO_TypeDefh>
	spiPort[11].setCS(GPIOC, 5);
 800066a:	4976      	ldr	r1, [pc, #472]	; (8000844 <main+0x264>)
 800066c:	4b82      	ldr	r3, [pc, #520]	; (8000878 <main+0x298>)
 800066e:	2205      	movs	r2, #5
 8000670:	0018      	movs	r0, r3
 8000672:	f7ff fe0f 	bl	8000294 <_ZN7SpiPort5setCSEP12GPIO_TypeDefh>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 fdf9 	bl	800126c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 fa3f 	bl	8000afc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 fb49 	bl	8000d14 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000682:	f000 fb29 	bl	8000cd8 <_ZL11MX_DMA_Initv>
  MX_SPI1_Init();
 8000686:	f000 fa8b 	bl	8000ba0 <_ZL12MX_SPI1_Initv>
  MX_USART2_UART_Init();
 800068a:	f000 faf1 	bl	8000c70 <_ZL19MX_USART2_UART_Initv>
  MX_TIM6_Init();
 800068e:	f000 fac9 	bl	8000c24 <_ZL12MX_TIM6_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000692:	4b7a      	ldr	r3, [pc, #488]	; (800087c <main+0x29c>)
 8000694:	0018      	movs	r0, r3
 8000696:	f002 fb5d 	bl	8002d54 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart2, uartRx0, 53);
 800069a:	4979      	ldr	r1, [pc, #484]	; (8000880 <main+0x2a0>)
 800069c:	4b79      	ldr	r3, [pc, #484]	; (8000884 <main+0x2a4>)
 800069e:	2235      	movs	r2, #53	; 0x35
 80006a0:	0018      	movs	r0, r3
 80006a2:	f002 fddf 	bl	8003264 <HAL_UART_Receive_IT>
  uartRxState0 = 1;
 80006a6:	4b78      	ldr	r3, [pc, #480]	; (8000888 <main+0x2a8>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
  uartResMs = 0;
 80006ac:	4b77      	ldr	r3, [pc, #476]	; (800088c <main+0x2ac>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (uartRxState0 == 1 && uartResMs > 2 && huart2.RxXferCount < 0x0035 && huart2.RxXferCount > 0) {
 80006b2:	4b75      	ldr	r3, [pc, #468]	; (8000888 <main+0x2a8>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d111      	bne.n	80006de <main+0xfe>
 80006ba:	4b74      	ldr	r3, [pc, #464]	; (800088c <main+0x2ac>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b02      	cmp	r3, #2
 80006c0:	d90d      	bls.n	80006de <main+0xfe>
 80006c2:	4b70      	ldr	r3, [pc, #448]	; (8000884 <main+0x2a4>)
 80006c4:	225a      	movs	r2, #90	; 0x5a
 80006c6:	5a9b      	ldrh	r3, [r3, r2]
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	2b34      	cmp	r3, #52	; 0x34
 80006cc:	d807      	bhi.n	80006de <main+0xfe>
 80006ce:	4b6d      	ldr	r3, [pc, #436]	; (8000884 <main+0x2a4>)
 80006d0:	225a      	movs	r2, #90	; 0x5a
 80006d2:	5a9b      	ldrh	r3, [r3, r2]
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <main+0xfe>
 80006da:	2301      	movs	r3, #1
 80006dc:	e000      	b.n	80006e0 <main+0x100>
 80006de:	2300      	movs	r3, #0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d010      	beq.n	8000706 <main+0x126>
			HAL_UART_AbortReceive_IT(&huart2);
 80006e4:	4b67      	ldr	r3, [pc, #412]	; (8000884 <main+0x2a4>)
 80006e6:	0018      	movs	r0, r3
 80006e8:	f002 fe46 	bl	8003378 <HAL_UART_AbortReceive_IT>
			HAL_UART_Receive_IT(&huart2, uartRx0, 53);
 80006ec:	4964      	ldr	r1, [pc, #400]	; (8000880 <main+0x2a0>)
 80006ee:	4b65      	ldr	r3, [pc, #404]	; (8000884 <main+0x2a4>)
 80006f0:	2235      	movs	r2, #53	; 0x35
 80006f2:	0018      	movs	r0, r3
 80006f4:	f002 fdb6 	bl	8003264 <HAL_UART_Receive_IT>
			uartRxState0 = 0;
 80006f8:	4b63      	ldr	r3, [pc, #396]	; (8000888 <main+0x2a8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
			uartResMs = 0;
 80006fe:	4b63      	ldr	r3, [pc, #396]	; (800088c <main+0x2ac>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	e03a      	b.n	800077c <main+0x19c>
		} else if (uartRxState1 == 1 && uartResMs > 2 && huart2.RxXferCount < 0x0035 && huart2.RxXferCount > 0) {
 8000706:	4b62      	ldr	r3, [pc, #392]	; (8000890 <main+0x2b0>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d111      	bne.n	8000732 <main+0x152>
 800070e:	4b5f      	ldr	r3, [pc, #380]	; (800088c <main+0x2ac>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b02      	cmp	r3, #2
 8000714:	d90d      	bls.n	8000732 <main+0x152>
 8000716:	4b5b      	ldr	r3, [pc, #364]	; (8000884 <main+0x2a4>)
 8000718:	225a      	movs	r2, #90	; 0x5a
 800071a:	5a9b      	ldrh	r3, [r3, r2]
 800071c:	b29b      	uxth	r3, r3
 800071e:	2b34      	cmp	r3, #52	; 0x34
 8000720:	d807      	bhi.n	8000732 <main+0x152>
 8000722:	4b58      	ldr	r3, [pc, #352]	; (8000884 <main+0x2a4>)
 8000724:	225a      	movs	r2, #90	; 0x5a
 8000726:	5a9b      	ldrh	r3, [r3, r2]
 8000728:	b29b      	uxth	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <main+0x152>
 800072e:	2301      	movs	r3, #1
 8000730:	e000      	b.n	8000734 <main+0x154>
 8000732:	2300      	movs	r3, #0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d010      	beq.n	800075a <main+0x17a>
				HAL_UART_AbortReceive_IT(&huart2);
 8000738:	4b52      	ldr	r3, [pc, #328]	; (8000884 <main+0x2a4>)
 800073a:	0018      	movs	r0, r3
 800073c:	f002 fe1c 	bl	8003378 <HAL_UART_AbortReceive_IT>
				HAL_UART_Receive_IT(&huart2, uartRx1, 53);
 8000740:	4954      	ldr	r1, [pc, #336]	; (8000894 <main+0x2b4>)
 8000742:	4b50      	ldr	r3, [pc, #320]	; (8000884 <main+0x2a4>)
 8000744:	2235      	movs	r2, #53	; 0x35
 8000746:	0018      	movs	r0, r3
 8000748:	f002 fd8c 	bl	8003264 <HAL_UART_Receive_IT>
				uartRxState1 = 0;
 800074c:	4b50      	ldr	r3, [pc, #320]	; (8000890 <main+0x2b0>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
				uartResMs = 0;
 8000752:	4b4e      	ldr	r3, [pc, #312]	; (800088c <main+0x2ac>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
 8000758:	e010      	b.n	800077c <main+0x19c>
		} else if (uartRxState0 == 2) {
 800075a:	4b4b      	ldr	r3, [pc, #300]	; (8000888 <main+0x2a8>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b02      	cmp	r3, #2
 8000760:	d104      	bne.n	800076c <main+0x18c>
				calculateRxSumm(uartRx0);
 8000762:	4b47      	ldr	r3, [pc, #284]	; (8000880 <main+0x2a0>)
 8000764:	0018      	movs	r0, r3
 8000766:	f7ff fed9 	bl	800051c <_Z15calculateRxSummPh>
 800076a:	e007      	b.n	800077c <main+0x19c>
		} else if (uartRxState1 == 2) {
 800076c:	4b48      	ldr	r3, [pc, #288]	; (8000890 <main+0x2b0>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b02      	cmp	r3, #2
 8000772:	d103      	bne.n	800077c <main+0x19c>
				calculateRxSumm(uartRx1);
 8000774:	4b47      	ldr	r3, [pc, #284]	; (8000894 <main+0x2b4>)
 8000776:	0018      	movs	r0, r3
 8000778:	f7ff fed0 	bl	800051c <_Z15calculateRxSummPh>





		if (spiState == 0) {
 800077c:	4b46      	ldr	r3, [pc, #280]	; (8000898 <main+0x2b8>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d000      	beq.n	8000786 <main+0x1a6>
 8000784:	e092      	b.n	80008ac <main+0x2cc>
			if (port == 0) {
 8000786:	4b45      	ldr	r3, [pc, #276]	; (800089c <main+0x2bc>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d000      	beq.n	8000790 <main+0x1b0>
 800078e:	e140      	b.n	8000a12 <main+0x432>
				spiState = 1;
 8000790:	4b41      	ldr	r3, [pc, #260]	; (8000898 <main+0x2b8>)
 8000792:	2201      	movs	r2, #1
 8000794:	701a      	strb	r2, [r3, #0]
				spiPort[12].unSelect();
 8000796:	4b42      	ldr	r3, [pc, #264]	; (80008a0 <main+0x2c0>)
 8000798:	0018      	movs	r0, r3
 800079a:	f7ff fdcf 	bl	800033c <_ZN7SpiPort8unSelectEv>

				spiPort[port].setTx(&uartRxSaved0[4 * port + 3], &uartRxSaved0[4 * port + 4], &uartRxSaved0[4 * port + 5], &uartRxSaved0[4 * port + 6]);
 800079e:	4b3f      	ldr	r3, [pc, #252]	; (800089c <main+0x2bc>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	001a      	movs	r2, r3
 80007a4:	0013      	movs	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	189b      	adds	r3, r3, r2
 80007aa:	00db      	lsls	r3, r3, #3
 80007ac:	4a26      	ldr	r2, [pc, #152]	; (8000848 <main+0x268>)
 80007ae:	1898      	adds	r0, r3, r2
 80007b0:	4b3a      	ldr	r3, [pc, #232]	; (800089c <main+0x2bc>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	1cda      	adds	r2, r3, #3
 80007b8:	4b3a      	ldr	r3, [pc, #232]	; (80008a4 <main+0x2c4>)
 80007ba:	18d1      	adds	r1, r2, r3
 80007bc:	4b37      	ldr	r3, [pc, #220]	; (800089c <main+0x2bc>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	009a      	lsls	r2, r3, #2
 80007c4:	4b37      	ldr	r3, [pc, #220]	; (80008a4 <main+0x2c4>)
 80007c6:	18d4      	adds	r4, r2, r3
 80007c8:	4b34      	ldr	r3, [pc, #208]	; (800089c <main+0x2bc>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	1d5a      	adds	r2, r3, #5
 80007d0:	4b34      	ldr	r3, [pc, #208]	; (80008a4 <main+0x2c4>)
 80007d2:	18d5      	adds	r5, r2, r3
 80007d4:	4b31      	ldr	r3, [pc, #196]	; (800089c <main+0x2bc>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	1d9a      	adds	r2, r3, #6
 80007dc:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <main+0x2c4>)
 80007de:	18d3      	adds	r3, r2, r3
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	002b      	movs	r3, r5
 80007e4:	0022      	movs	r2, r4
 80007e6:	f7ff fd68 	bl	80002ba <_ZN7SpiPort5setTxEPhS0_S0_S0_>
				spiPort[port].select();
 80007ea:	4b2c      	ldr	r3, [pc, #176]	; (800089c <main+0x2bc>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	001a      	movs	r2, r3
 80007f0:	0013      	movs	r3, r2
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	189b      	adds	r3, r3, r2
 80007f6:	00db      	lsls	r3, r3, #3
 80007f8:	4a13      	ldr	r2, [pc, #76]	; (8000848 <main+0x268>)
 80007fa:	189b      	adds	r3, r3, r2
 80007fc:	0018      	movs	r0, r3
 80007fe:	f7ff fd8b 	bl	8000318 <_ZN7SpiPort6selectEv>
				HAL_SPI_TransmitReceive_IT(&hspi1, spiPort[port].getTx(), spiPort[port].getRx(), 6);
 8000802:	4b26      	ldr	r3, [pc, #152]	; (800089c <main+0x2bc>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	001a      	movs	r2, r3
 8000808:	0013      	movs	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	189b      	adds	r3, r3, r2
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <main+0x268>)
 8000812:	189b      	adds	r3, r3, r2
 8000814:	0018      	movs	r0, r3
 8000816:	f7ff fe07 	bl	8000428 <_ZN7SpiPort5getTxEv>
 800081a:	0004      	movs	r4, r0
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <main+0x2bc>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	001a      	movs	r2, r3
 8000822:	0013      	movs	r3, r2
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	189b      	adds	r3, r3, r2
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	4a07      	ldr	r2, [pc, #28]	; (8000848 <main+0x268>)
 800082c:	189b      	adds	r3, r3, r2
 800082e:	0018      	movs	r0, r3
 8000830:	f7ff fdf1 	bl	8000416 <_ZN7SpiPort5getRxEv>
 8000834:	0002      	movs	r2, r0
 8000836:	481c      	ldr	r0, [pc, #112]	; (80008a8 <main+0x2c8>)
 8000838:	2306      	movs	r3, #6
 800083a:	0021      	movs	r1, r4
 800083c:	f001 fe1a 	bl	8002474 <HAL_SPI_TransmitReceive_IT>
 8000840:	e0e7      	b.n	8000a12 <main+0x432>
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	48000800 	.word	0x48000800
 8000848:	200002dc 	.word	0x200002dc
 800084c:	20000304 	.word	0x20000304
 8000850:	2000032c 	.word	0x2000032c
 8000854:	20000354 	.word	0x20000354
 8000858:	48000400 	.word	0x48000400
 800085c:	2000037c 	.word	0x2000037c
 8000860:	200003a4 	.word	0x200003a4
 8000864:	200003cc 	.word	0x200003cc
 8000868:	200003f4 	.word	0x200003f4
 800086c:	2000041c 	.word	0x2000041c
 8000870:	20000444 	.word	0x20000444
 8000874:	2000046c 	.word	0x2000046c
 8000878:	20000494 	.word	0x20000494
 800087c:	20000144 	.word	0x20000144
 8000880:	200001f4 	.word	0x200001f4
 8000884:	20000184 	.word	0x20000184
 8000888:	200002d3 	.word	0x200002d3
 800088c:	20000299 	.word	0x20000299
 8000890:	200002d4 	.word	0x200002d4
 8000894:	2000022c 	.word	0x2000022c
 8000898:	200004bc 	.word	0x200004bc
 800089c:	200004bd 	.word	0x200004bd
 80008a0:	200004bc 	.word	0x200004bc
 80008a4:	20000264 	.word	0x20000264
 80008a8:	20000058 	.word	0x20000058
			}

		} else if (spiState == 2) {
 80008ac:	4b89      	ldr	r3, [pc, #548]	; (8000ad4 <main+0x4f4>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d000      	beq.n	80008b6 <main+0x2d6>
 80008b4:	e0ad      	b.n	8000a12 <main+0x432>
			if (port == 0) {
 80008b6:	4b88      	ldr	r3, [pc, #544]	; (8000ad8 <main+0x4f8>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d000      	beq.n	80008c0 <main+0x2e0>
 80008be:	e0a8      	b.n	8000a12 <main+0x432>
				spiState = 0;
 80008c0:	4b84      	ldr	r3, [pc, #528]	; (8000ad4 <main+0x4f4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
				if (spiPort[port].rxCheck()) {
 80008c6:	4b84      	ldr	r3, [pc, #528]	; (8000ad8 <main+0x4f8>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	001a      	movs	r2, r3
 80008cc:	0013      	movs	r3, r2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	189b      	adds	r3, r3, r2
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	4a81      	ldr	r2, [pc, #516]	; (8000adc <main+0x4fc>)
 80008d6:	189b      	adds	r3, r3, r2
 80008d8:	0018      	movs	r0, r3
 80008da:	f7ff fd41 	bl	8000360 <_ZN7SpiPort7rxCheckEv>
 80008de:	0003      	movs	r3, r0
 80008e0:	1e5a      	subs	r2, r3, #1
 80008e2:	4193      	sbcs	r3, r2
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d100      	bne.n	80008ec <main+0x30c>
 80008ea:	e092      	b.n	8000a12 <main+0x432>
					++port;
 80008ec:	4b7a      	ldr	r3, [pc, #488]	; (8000ad8 <main+0x4f8>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b78      	ldr	r3, [pc, #480]	; (8000ad8 <main+0x4f8>)
 80008f6:	701a      	strb	r2, [r3, #0]
					if (spiPort[port].prevCheck()) {
 80008f8:	4b77      	ldr	r3, [pc, #476]	; (8000ad8 <main+0x4f8>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	001a      	movs	r2, r3
 80008fe:	0013      	movs	r3, r2
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	189b      	adds	r3, r3, r2
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	4a75      	ldr	r2, [pc, #468]	; (8000adc <main+0x4fc>)
 8000908:	189b      	adds	r3, r3, r2
 800090a:	0018      	movs	r0, r3
 800090c:	f7ff fd46 	bl	800039c <_ZN7SpiPort9prevCheckEv>
 8000910:	0003      	movs	r3, r0
 8000912:	1e5a      	subs	r2, r3, #1
 8000914:	4193      	sbcs	r3, r2
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d07a      	beq.n	8000a12 <main+0x432>
						uartTxFlag = 3;
 800091c:	4b70      	ldr	r3, [pc, #448]	; (8000ae0 <main+0x500>)
 800091e:	2203      	movs	r2, #3
 8000920:	701a      	strb	r2, [r3, #0]

						uartTx[4 * port + 5] = *(spiPort[port].getRx());
 8000922:	4b6d      	ldr	r3, [pc, #436]	; (8000ad8 <main+0x4f8>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	001a      	movs	r2, r3
 8000928:	0013      	movs	r3, r2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	189b      	adds	r3, r3, r2
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	4a6a      	ldr	r2, [pc, #424]	; (8000adc <main+0x4fc>)
 8000932:	189b      	adds	r3, r3, r2
 8000934:	0018      	movs	r0, r3
 8000936:	f7ff fd6e 	bl	8000416 <_ZN7SpiPort5getRxEv>
 800093a:	0002      	movs	r2, r0
 800093c:	4b66      	ldr	r3, [pc, #408]	; (8000ad8 <main+0x4f8>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	3305      	adds	r3, #5
 8000944:	7811      	ldrb	r1, [r2, #0]
 8000946:	4a67      	ldr	r2, [pc, #412]	; (8000ae4 <main+0x504>)
 8000948:	54d1      	strb	r1, [r2, r3]
						uartTx[4 * port + 6] = *(spiPort[port].getRx() + 1);
 800094a:	4b63      	ldr	r3, [pc, #396]	; (8000ad8 <main+0x4f8>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	001a      	movs	r2, r3
 8000950:	0013      	movs	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	189b      	adds	r3, r3, r2
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	4a60      	ldr	r2, [pc, #384]	; (8000adc <main+0x4fc>)
 800095a:	189b      	adds	r3, r3, r2
 800095c:	0018      	movs	r0, r3
 800095e:	f7ff fd5a 	bl	8000416 <_ZN7SpiPort5getRxEv>
 8000962:	0002      	movs	r2, r0
 8000964:	4b5c      	ldr	r3, [pc, #368]	; (8000ad8 <main+0x4f8>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	3306      	adds	r3, #6
 800096c:	7851      	ldrb	r1, [r2, #1]
 800096e:	4a5d      	ldr	r2, [pc, #372]	; (8000ae4 <main+0x504>)
 8000970:	54d1      	strb	r1, [r2, r3]
						uartTx[4 * port + 7] = *(spiPort[port].getRx() + 2);
 8000972:	4b59      	ldr	r3, [pc, #356]	; (8000ad8 <main+0x4f8>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	001a      	movs	r2, r3
 8000978:	0013      	movs	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	189b      	adds	r3, r3, r2
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	4a56      	ldr	r2, [pc, #344]	; (8000adc <main+0x4fc>)
 8000982:	189b      	adds	r3, r3, r2
 8000984:	0018      	movs	r0, r3
 8000986:	f7ff fd46 	bl	8000416 <_ZN7SpiPort5getRxEv>
 800098a:	0002      	movs	r2, r0
 800098c:	4b52      	ldr	r3, [pc, #328]	; (8000ad8 <main+0x4f8>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	3307      	adds	r3, #7
 8000994:	7891      	ldrb	r1, [r2, #2]
 8000996:	4a53      	ldr	r2, [pc, #332]	; (8000ae4 <main+0x504>)
 8000998:	54d1      	strb	r1, [r2, r3]
						uartTx[4 * port + 8] = *(spiPort[port].getRx() + 3);
 800099a:	4b4f      	ldr	r3, [pc, #316]	; (8000ad8 <main+0x4f8>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	001a      	movs	r2, r3
 80009a0:	0013      	movs	r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	189b      	adds	r3, r3, r2
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	4a4c      	ldr	r2, [pc, #304]	; (8000adc <main+0x4fc>)
 80009aa:	189b      	adds	r3, r3, r2
 80009ac:	0018      	movs	r0, r3
 80009ae:	f7ff fd32 	bl	8000416 <_ZN7SpiPort5getRxEv>
 80009b2:	0002      	movs	r2, r0
 80009b4:	4b48      	ldr	r3, [pc, #288]	; (8000ad8 <main+0x4f8>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	3302      	adds	r3, #2
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	78d1      	ldrb	r1, [r2, #3]
 80009be:	4a49      	ldr	r2, [pc, #292]	; (8000ae4 <main+0x504>)
 80009c0:	54d1      	strb	r1, [r2, r3]
						*(spiPort[0].getRx() + 4) ? uartTx[3] &= ~(1 << port) : uartTx[3] |= (1 << port);
 80009c2:	4b46      	ldr	r3, [pc, #280]	; (8000adc <main+0x4fc>)
 80009c4:	0018      	movs	r0, r3
 80009c6:	f7ff fd26 	bl	8000416 <_ZN7SpiPort5getRxEv>
 80009ca:	0003      	movs	r3, r0
 80009cc:	3304      	adds	r3, #4
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d010      	beq.n	80009f6 <main+0x416>
 80009d4:	4b43      	ldr	r3, [pc, #268]	; (8000ae4 <main+0x504>)
 80009d6:	78db      	ldrb	r3, [r3, #3]
 80009d8:	b25b      	sxtb	r3, r3
 80009da:	4a3f      	ldr	r2, [pc, #252]	; (8000ad8 <main+0x4f8>)
 80009dc:	7812      	ldrb	r2, [r2, #0]
 80009de:	0011      	movs	r1, r2
 80009e0:	2201      	movs	r2, #1
 80009e2:	408a      	lsls	r2, r1
 80009e4:	b252      	sxtb	r2, r2
 80009e6:	43d2      	mvns	r2, r2
 80009e8:	b252      	sxtb	r2, r2
 80009ea:	4013      	ands	r3, r2
 80009ec:	b25b      	sxtb	r3, r3
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	4b3c      	ldr	r3, [pc, #240]	; (8000ae4 <main+0x504>)
 80009f2:	70da      	strb	r2, [r3, #3]
 80009f4:	e00d      	b.n	8000a12 <main+0x432>
 80009f6:	4b3b      	ldr	r3, [pc, #236]	; (8000ae4 <main+0x504>)
 80009f8:	78db      	ldrb	r3, [r3, #3]
 80009fa:	b25a      	sxtb	r2, r3
 80009fc:	4b36      	ldr	r3, [pc, #216]	; (8000ad8 <main+0x4f8>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	0019      	movs	r1, r3
 8000a02:	2301      	movs	r3, #1
 8000a04:	408b      	lsls	r3, r1
 8000a06:	b25b      	sxtb	r3, r3
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	b25b      	sxtb	r3, r3
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4b35      	ldr	r3, [pc, #212]	; (8000ae4 <main+0x504>)
 8000a10:	70da      	strb	r2, [r3, #3]





		if (uartTxMs > 300) {
 8000a12:	4b35      	ldr	r3, [pc, #212]	; (8000ae8 <main+0x508>)
 8000a14:	881a      	ldrh	r2, [r3, #0]
 8000a16:	2396      	movs	r3, #150	; 0x96
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d905      	bls.n	8000a2a <main+0x44a>
			uartTxMs = 0;
 8000a1e:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <main+0x508>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	801a      	strh	r2, [r3, #0]
			uartTxFlag = 1;
 8000a24:	4b2e      	ldr	r3, [pc, #184]	; (8000ae0 <main+0x500>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	701a      	strb	r2, [r3, #0]
		}

		if (uartTxFlag != 0 && uartTxState == 0) {
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <main+0x500>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d100      	bne.n	8000a34 <main+0x454>
 8000a32:	e63e      	b.n	80006b2 <main+0xd2>
 8000a34:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <main+0x50c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d000      	beq.n	8000a3e <main+0x45e>
 8000a3c:	e639      	b.n	80006b2 <main+0xd2>
			uartTxState = 1;
 8000a3e:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <main+0x50c>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
			--uartTxFlag;
 8000a44:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <main+0x500>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	4b24      	ldr	r3, [pc, #144]	; (8000ae0 <main+0x500>)
 8000a4e:	701a      	strb	r2, [r3, #0]

			for (int i = 0; i < 55; i++) {
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b36      	cmp	r3, #54	; 0x36
 8000a58:	dc0c      	bgt.n	8000a74 <main+0x494>
				uartTxSaved[i] = uartTx[i];
 8000a5a:	4a22      	ldr	r2, [pc, #136]	; (8000ae4 <main+0x504>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	18d3      	adds	r3, r2, r3
 8000a60:	7819      	ldrb	r1, [r3, #0]
 8000a62:	4a23      	ldr	r2, [pc, #140]	; (8000af0 <main+0x510>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	18d3      	adds	r3, r2, r3
 8000a68:	1c0a      	adds	r2, r1, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 55; i++) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	e7ef      	b.n	8000a54 <main+0x474>
			}

			uartTxSumm = 0;
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <main+0x514>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	801a      	strh	r2, [r3, #0]
			for (uint8_t i = 0; i < 53; i++) {
 8000a7a:	1cfb      	adds	r3, r7, #3
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
 8000a80:	1cfb      	adds	r3, r7, #3
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b34      	cmp	r3, #52	; 0x34
 8000a86:	d810      	bhi.n	8000aaa <main+0x4ca>
				uartTxSumm += uartTxSaved[i];
 8000a88:	1cfb      	adds	r3, r7, #3
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4a18      	ldr	r2, [pc, #96]	; (8000af0 <main+0x510>)
 8000a8e:	5cd3      	ldrb	r3, [r2, r3]
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <main+0x514>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	18d3      	adds	r3, r2, r3
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <main+0x514>)
 8000a9c:	801a      	strh	r2, [r3, #0]
			for (uint8_t i = 0; i < 53; i++) {
 8000a9e:	1cfb      	adds	r3, r7, #3
 8000aa0:	781a      	ldrb	r2, [r3, #0]
 8000aa2:	1cfb      	adds	r3, r7, #3
 8000aa4:	3201      	adds	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
 8000aa8:	e7ea      	b.n	8000a80 <main+0x4a0>
			}
			uartTxSaved[53] = (uint8_t) uartTxSumm;
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <main+0x514>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	b2d9      	uxtb	r1, r3
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <main+0x510>)
 8000ab2:	2235      	movs	r2, #53	; 0x35
 8000ab4:	5499      	strb	r1, [r3, r2]
			uartTxSaved[54] = (uint8_t) (uartTxSumm >> 8);
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <main+0x514>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	0a1b      	lsrs	r3, r3, #8
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	b2d9      	uxtb	r1, r3
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <main+0x510>)
 8000ac2:	2236      	movs	r2, #54	; 0x36
 8000ac4:	5499      	strb	r1, [r3, r2]

			HAL_UART_Transmit_IT(&huart2, (uint8_t*) uartTxSaved, 55);
 8000ac6:	490a      	ldr	r1, [pc, #40]	; (8000af0 <main+0x510>)
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <main+0x518>)
 8000aca:	2237      	movs	r2, #55	; 0x37
 8000acc:	0018      	movs	r0, r3
 8000ace:	f002 fb71 	bl	80031b4 <HAL_UART_Transmit_IT>
		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000ad2:	e5ee      	b.n	80006b2 <main+0xd2>
 8000ad4:	200004bc 	.word	0x200004bc
 8000ad8:	200004bd 	.word	0x200004bd
 8000adc:	200002dc 	.word	0x200002dc
 8000ae0:	200002d6 	.word	0x200002d6
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	2000029a 	.word	0x2000029a
 8000aec:	200002d5 	.word	0x200002d5
 8000af0:	2000029c 	.word	0x2000029c
 8000af4:	200002d8 	.word	0x200002d8
 8000af8:	20000184 	.word	0x20000184

08000afc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b091      	sub	sp, #68	; 0x44
 8000b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b02:	2410      	movs	r4, #16
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	0018      	movs	r0, r3
 8000b08:	2330      	movs	r3, #48	; 0x30
 8000b0a:	001a      	movs	r2, r3
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	f003 f941 	bl	8003d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b12:	003b      	movs	r3, r7
 8000b14:	0018      	movs	r0, r3
 8000b16:	2310      	movs	r3, #16
 8000b18:	001a      	movs	r2, r3
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	f003 f93a 	bl	8003d94 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b20:	0021      	movs	r1, r4
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	2202      	movs	r2, #2
 8000b26:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	2210      	movs	r2, #16
 8000b32:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2202      	movs	r2, #2
 8000b38:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	22a0      	movs	r2, #160	; 0xa0
 8000b44:	0392      	lsls	r2, r2, #14
 8000b46:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	0018      	movs	r0, r3
 8000b52:	f000 ff95 	bl	8001a80 <HAL_RCC_OscConfig>
 8000b56:	0003      	movs	r3, r0
 8000b58:	1e5a      	subs	r2, r3, #1
 8000b5a:	4193      	sbcs	r3, r2
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <_Z18SystemClock_Configv+0x6a>
  {
    Error_Handler();
 8000b62:	f000 f94b 	bl	8000dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b66:	003b      	movs	r3, r7
 8000b68:	2207      	movs	r2, #7
 8000b6a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6c:	003b      	movs	r3, r7
 8000b6e:	2202      	movs	r2, #2
 8000b70:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b72:	003b      	movs	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b78:	003b      	movs	r3, r7
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b7e:	003b      	movs	r3, r7
 8000b80:	2101      	movs	r1, #1
 8000b82:	0018      	movs	r0, r3
 8000b84:	f001 fa70 	bl	8002068 <HAL_RCC_ClockConfig>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	1e5a      	subs	r2, r3, #1
 8000b8c:	4193      	sbcs	r3, r2
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 8000b94:	f000 f932 	bl	8000dfc <Error_Handler>
  }
}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b011      	add	sp, #68	; 0x44
 8000b9e:	bd90      	pop	{r4, r7, pc}

08000ba0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <_ZL12MX_SPI1_Initv+0x7c>)
 8000ba6:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <_ZL12MX_SPI1_Initv+0x80>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <_ZL12MX_SPI1_Initv+0x7c>)
 8000bac:	2282      	movs	r2, #130	; 0x82
 8000bae:	0052      	lsls	r2, r2, #1
 8000bb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <_ZL12MX_SPI1_Initv+0x7c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <_ZL12MX_SPI1_Initv+0x7c>)
 8000bba:	22e0      	movs	r2, #224	; 0xe0
 8000bbc:	00d2      	lsls	r2, r2, #3
 8000bbe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <_ZL12MX_SPI1_Initv+0x7c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <_ZL12MX_SPI1_Initv+0x7c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <_ZL12MX_SPI1_Initv+0x7c>)
 8000bce:	2280      	movs	r2, #128	; 0x80
 8000bd0:	0092      	lsls	r2, r2, #2
 8000bd2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <_ZL12MX_SPI1_Initv+0x7c>)
 8000bd6:	2208      	movs	r2, #8
 8000bd8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <_ZL12MX_SPI1_Initv+0x7c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <_ZL12MX_SPI1_Initv+0x7c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <_ZL12MX_SPI1_Initv+0x7c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <_ZL12MX_SPI1_Initv+0x7c>)
 8000bee:	2207      	movs	r2, #7
 8000bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <_ZL12MX_SPI1_Initv+0x7c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <_ZL12MX_SPI1_Initv+0x7c>)
 8000bfa:	2208      	movs	r2, #8
 8000bfc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <_ZL12MX_SPI1_Initv+0x7c>)
 8000c00:	0018      	movs	r0, r3
 8000c02:	f001 fb9d 	bl	8002340 <HAL_SPI_Init>
 8000c06:	0003      	movs	r3, r0
 8000c08:	1e5a      	subs	r2, r3, #1
 8000c0a:	4193      	sbcs	r3, r2
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <_ZL12MX_SPI1_Initv+0x76>
  {
    Error_Handler();
 8000c12:	f000 f8f3 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000058 	.word	0x20000058
 8000c20:	40013000 	.word	0x40013000

08000c24 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <_ZL12MX_TIM6_Initv+0x40>)
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <_ZL12MX_TIM6_Initv+0x44>)
 8000c2c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 23999;
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <_ZL12MX_TIM6_Initv+0x40>)
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <_ZL12MX_TIM6_Initv+0x48>)
 8000c32:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <_ZL12MX_TIM6_Initv+0x40>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM_PERIOD_MS * 2 - 1;
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <_ZL12MX_TIM6_Initv+0x40>)
 8000c3c:	2209      	movs	r2, #9
 8000c3e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <_ZL12MX_TIM6_Initv+0x40>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <_ZL12MX_TIM6_Initv+0x40>)
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f002 f857 	bl	8002cfc <HAL_TIM_Base_Init>
 8000c4e:	0003      	movs	r3, r0
 8000c50:	1e5a      	subs	r2, r3, #1
 8000c52:	4193      	sbcs	r3, r2
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <_ZL12MX_TIM6_Initv+0x3a>
  {
    Error_Handler();
 8000c5a:	f000 f8cf 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000144 	.word	0x20000144
 8000c68:	40001000 	.word	0x40001000
 8000c6c:	00005dbf 	.word	0x00005dbf

08000c70 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000c76:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000c78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000c7c:	22e1      	movs	r2, #225	; 0xe1
 8000c7e:	0252      	lsls	r2, r2, #9
 8000c80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f002 fa25 	bl	8003104 <HAL_UART_Init>
 8000cba:	0003      	movs	r3, r0
 8000cbc:	1e5a      	subs	r2, r3, #1
 8000cbe:	4193      	sbcs	r3, r2
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 8000cc6:	f000 f899 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000184 	.word	0x20000184
 8000cd4:	40004400 	.word	0x40004400

08000cd8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <_ZL11MX_DMA_Initv+0x38>)
 8000ce0:	695a      	ldr	r2, [r3, #20]
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <_ZL11MX_DMA_Initv+0x38>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	615a      	str	r2, [r3, #20]
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <_ZL11MX_DMA_Initv+0x38>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	200a      	movs	r0, #10
 8000cfc:	f000 fba4 	bl	8001448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000d00:	200a      	movs	r0, #10
 8000d02:	f000 fbb6 	bl	8001472 <HAL_NVIC_EnableIRQ>

}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	40021000 	.word	0x40021000

08000d14 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b089      	sub	sp, #36	; 0x24
 8000d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	240c      	movs	r4, #12
 8000d1c:	193b      	adds	r3, r7, r4
 8000d1e:	0018      	movs	r0, r3
 8000d20:	2314      	movs	r3, #20
 8000d22:	001a      	movs	r2, r3
 8000d24:	2100      	movs	r1, #0
 8000d26:	f003 f835 	bl	8003d94 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b30      	ldr	r3, [pc, #192]	; (8000dec <_ZL12MX_GPIO_Initv+0xd8>)
 8000d2c:	695a      	ldr	r2, [r3, #20]
 8000d2e:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <_ZL12MX_GPIO_Initv+0xd8>)
 8000d30:	2180      	movs	r1, #128	; 0x80
 8000d32:	0289      	lsls	r1, r1, #10
 8000d34:	430a      	orrs	r2, r1
 8000d36:	615a      	str	r2, [r3, #20]
 8000d38:	4b2c      	ldr	r3, [pc, #176]	; (8000dec <_ZL12MX_GPIO_Initv+0xd8>)
 8000d3a:	695a      	ldr	r2, [r3, #20]
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	029b      	lsls	r3, r3, #10
 8000d40:	4013      	ands	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	4b29      	ldr	r3, [pc, #164]	; (8000dec <_ZL12MX_GPIO_Initv+0xd8>)
 8000d48:	695a      	ldr	r2, [r3, #20]
 8000d4a:	4b28      	ldr	r3, [pc, #160]	; (8000dec <_ZL12MX_GPIO_Initv+0xd8>)
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	0309      	lsls	r1, r1, #12
 8000d50:	430a      	orrs	r2, r1
 8000d52:	615a      	str	r2, [r3, #20]
 8000d54:	4b25      	ldr	r3, [pc, #148]	; (8000dec <_ZL12MX_GPIO_Initv+0xd8>)
 8000d56:	695a      	ldr	r2, [r3, #20]
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	031b      	lsls	r3, r3, #12
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	4b22      	ldr	r3, [pc, #136]	; (8000dec <_ZL12MX_GPIO_Initv+0xd8>)
 8000d64:	695a      	ldr	r2, [r3, #20]
 8000d66:	4b21      	ldr	r3, [pc, #132]	; (8000dec <_ZL12MX_GPIO_Initv+0xd8>)
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	02c9      	lsls	r1, r1, #11
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	615a      	str	r2, [r3, #20]
 8000d70:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <_ZL12MX_GPIO_Initv+0xd8>)
 8000d72:	695a      	ldr	r2, [r3, #20]
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	02db      	lsls	r3, r3, #11
 8000d78:	4013      	ands	r3, r2
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000d7e:	23f8      	movs	r3, #248	; 0xf8
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	481b      	ldr	r0, [pc, #108]	; (8000df0 <_ZL12MX_GPIO_Initv+0xdc>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	0019      	movs	r1, r3
 8000d88:	f000 fe5c 	bl	8001a44 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8000d8c:	4919      	ldr	r1, [pc, #100]	; (8000df4 <_ZL12MX_GPIO_Initv+0xe0>)
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <_ZL12MX_GPIO_Initv+0xe4>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	0018      	movs	r0, r3
 8000d94:	f000 fe56 	bl	8001a44 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);

  /*Configure GPIO pins : PC5 PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000d98:	193b      	adds	r3, r7, r4
 8000d9a:	22f8      	movs	r2, #248	; 0xf8
 8000d9c:	0092      	lsls	r2, r2, #2
 8000d9e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	193b      	adds	r3, r7, r4
 8000da2:	2201      	movs	r2, #1
 8000da4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	2203      	movs	r2, #3
 8000db0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <_ZL12MX_GPIO_Initv+0xdc>)
 8000db6:	0019      	movs	r1, r3
 8000db8:	0010      	movs	r0, r2
 8000dba:	f000 fccf 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8000dbe:	0021      	movs	r1, r4
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <_ZL12MX_GPIO_Initv+0xe0>)
 8000dc4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2201      	movs	r2, #1
 8000dca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <_ZL12MX_GPIO_Initv+0xe4>)
 8000ddc:	0019      	movs	r1, r3
 8000dde:	0010      	movs	r0, r2
 8000de0:	f000 fcbc 	bl	800175c <HAL_GPIO_Init>

}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b009      	add	sp, #36	; 0x24
 8000dea:	bd90      	pop	{r4, r7, pc}
 8000dec:	40021000 	.word	0x40021000
 8000df0:	48000800 	.word	0x48000800
 8000df4:	0000f007 	.word	0x0000f007
 8000df8:	48000400 	.word	0x48000400

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <_Z41__static_initialization_and_destruction_0ii>:
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d10e      	bne.n	8000e36 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	4a09      	ldr	r2, [pc, #36]	; (8000e40 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d10a      	bne.n	8000e36 <_Z41__static_initialization_and_destruction_0ii+0x2e>
SpiPort spiPort[12];
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8000e22:	240b      	movs	r4, #11
 8000e24:	001d      	movs	r5, r3
 8000e26:	2c00      	cmp	r4, #0
 8000e28:	db05      	blt.n	8000e36 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8000e2a:	0028      	movs	r0, r5
 8000e2c:	f7ff f9f8 	bl	8000220 <_ZN7SpiPortC1Ev>
 8000e30:	3528      	adds	r5, #40	; 0x28
 8000e32:	3c01      	subs	r4, #1
 8000e34:	e7f7      	b.n	8000e26 <_Z41__static_initialization_and_destruction_0ii+0x1e>
}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b002      	add	sp, #8
 8000e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	0000ffff 	.word	0x0000ffff
 8000e44:	200002dc 	.word	0x200002dc

08000e48 <_GLOBAL__sub_I_hspi1>:
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <_GLOBAL__sub_I_hspi1+0x14>)
 8000e4e:	0019      	movs	r1, r3
 8000e50:	2001      	movs	r0, #1
 8000e52:	f7ff ffd9 	bl	8000e08 <_Z41__static_initialization_and_destruction_0ii>
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	0000ffff 	.word	0x0000ffff

08000e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <HAL_MspInit+0x44>)
 8000e68:	699a      	ldr	r2, [r3, #24]
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_MspInit+0x44>)
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	619a      	str	r2, [r3, #24]
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <HAL_MspInit+0x44>)
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	2201      	movs	r2, #1
 8000e78:	4013      	ands	r3, r2
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <HAL_MspInit+0x44>)
 8000e80:	69da      	ldr	r2, [r3, #28]
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <HAL_MspInit+0x44>)
 8000e84:	2180      	movs	r1, #128	; 0x80
 8000e86:	0549      	lsls	r1, r1, #21
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	61da      	str	r2, [r3, #28]
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_MspInit+0x44>)
 8000e8e:	69da      	ldr	r2, [r3, #28]
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	055b      	lsls	r3, r3, #21
 8000e94:	4013      	ands	r3, r2
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b002      	add	sp, #8
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b08b      	sub	sp, #44	; 0x2c
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	2414      	movs	r4, #20
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	2314      	movs	r3, #20
 8000eb8:	001a      	movs	r2, r3
 8000eba:	2100      	movs	r1, #0
 8000ebc:	f002 ff6a 	bl	8003d94 <memset>
  if(hspi->Instance==SPI1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a47      	ldr	r2, [pc, #284]	; (8000fe4 <HAL_SPI_MspInit+0x13c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d000      	beq.n	8000ecc <HAL_SPI_MspInit+0x24>
 8000eca:	e086      	b.n	8000fda <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ecc:	4b46      	ldr	r3, [pc, #280]	; (8000fe8 <HAL_SPI_MspInit+0x140>)
 8000ece:	699a      	ldr	r2, [r3, #24]
 8000ed0:	4b45      	ldr	r3, [pc, #276]	; (8000fe8 <HAL_SPI_MspInit+0x140>)
 8000ed2:	2180      	movs	r1, #128	; 0x80
 8000ed4:	0149      	lsls	r1, r1, #5
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	619a      	str	r2, [r3, #24]
 8000eda:	4b43      	ldr	r3, [pc, #268]	; (8000fe8 <HAL_SPI_MspInit+0x140>)
 8000edc:	699a      	ldr	r2, [r3, #24]
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	015b      	lsls	r3, r3, #5
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b3f      	ldr	r3, [pc, #252]	; (8000fe8 <HAL_SPI_MspInit+0x140>)
 8000eea:	695a      	ldr	r2, [r3, #20]
 8000eec:	4b3e      	ldr	r3, [pc, #248]	; (8000fe8 <HAL_SPI_MspInit+0x140>)
 8000eee:	2180      	movs	r1, #128	; 0x80
 8000ef0:	0289      	lsls	r1, r1, #10
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	615a      	str	r2, [r3, #20]
 8000ef6:	4b3c      	ldr	r3, [pc, #240]	; (8000fe8 <HAL_SPI_MspInit+0x140>)
 8000ef8:	695a      	ldr	r2, [r3, #20]
 8000efa:	2380      	movs	r3, #128	; 0x80
 8000efc:	029b      	lsls	r3, r3, #10
 8000efe:	4013      	ands	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f04:	0021      	movs	r1, r4
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	22e0      	movs	r2, #224	; 0xe0
 8000f0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	2202      	movs	r2, #2
 8000f10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	187a      	adds	r2, r7, r1
 8000f26:	2390      	movs	r3, #144	; 0x90
 8000f28:	05db      	lsls	r3, r3, #23
 8000f2a:	0011      	movs	r1, r2
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f000 fc15 	bl	800175c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000f32:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <HAL_SPI_MspInit+0x144>)
 8000f34:	4a2e      	ldr	r2, [pc, #184]	; (8000ff0 <HAL_SPI_MspInit+0x148>)
 8000f36:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f38:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <HAL_SPI_MspInit+0x144>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f3e:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <HAL_SPI_MspInit+0x144>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f44:	4b29      	ldr	r3, [pc, #164]	; (8000fec <HAL_SPI_MspInit+0x144>)
 8000f46:	2280      	movs	r2, #128	; 0x80
 8000f48:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f4a:	4b28      	ldr	r3, [pc, #160]	; (8000fec <HAL_SPI_MspInit+0x144>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f50:	4b26      	ldr	r3, [pc, #152]	; (8000fec <HAL_SPI_MspInit+0x144>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000f56:	4b25      	ldr	r3, [pc, #148]	; (8000fec <HAL_SPI_MspInit+0x144>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f5c:	4b23      	ldr	r3, [pc, #140]	; (8000fec <HAL_SPI_MspInit+0x144>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <HAL_SPI_MspInit+0x144>)
 8000f64:	0018      	movs	r0, r3
 8000f66:	f000 faa1 	bl	80014ac <HAL_DMA_Init>
 8000f6a:	1e03      	subs	r3, r0, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000f6e:	f7ff ff45 	bl	8000dfc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <HAL_SPI_MspInit+0x144>)
 8000f76:	659a      	str	r2, [r3, #88]	; 0x58
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <HAL_SPI_MspInit+0x144>)
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <HAL_SPI_MspInit+0x14c>)
 8000f80:	4a1d      	ldr	r2, [pc, #116]	; (8000ff8 <HAL_SPI_MspInit+0x150>)
 8000f82:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <HAL_SPI_MspInit+0x14c>)
 8000f86:	2210      	movs	r2, #16
 8000f88:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <HAL_SPI_MspInit+0x14c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_SPI_MspInit+0x14c>)
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <HAL_SPI_MspInit+0x14c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_SPI_MspInit+0x14c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HAL_SPI_MspInit+0x14c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_SPI_MspInit+0x14c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_SPI_MspInit+0x14c>)
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f000 fa7b 	bl	80014ac <HAL_DMA_Init>
 8000fb6:	1e03      	subs	r3, r0, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_SPI_MspInit+0x116>
    {
      Error_Handler();
 8000fba:	f7ff ff1f 	bl	8000dfc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a0c      	ldr	r2, [pc, #48]	; (8000ff4 <HAL_SPI_MspInit+0x14c>)
 8000fc2:	655a      	str	r2, [r3, #84]	; 0x54
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_SPI_MspInit+0x14c>)
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2019      	movs	r0, #25
 8000fd0:	f000 fa3a 	bl	8001448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000fd4:	2019      	movs	r0, #25
 8000fd6:	f000 fa4c 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b00b      	add	sp, #44	; 0x2c
 8000fe0:	bd90      	pop	{r4, r7, pc}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	40013000 	.word	0x40013000
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	200000bc 	.word	0x200000bc
 8000ff0:	4002001c 	.word	0x4002001c
 8000ff4:	20000100 	.word	0x20000100
 8000ff8:	40020030 	.word	0x40020030

08000ffc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <HAL_TIM_Base_MspInit+0x44>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d113      	bne.n	8001036 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <HAL_TIM_Base_MspInit+0x48>)
 8001010:	69da      	ldr	r2, [r3, #28]
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <HAL_TIM_Base_MspInit+0x48>)
 8001014:	2110      	movs	r1, #16
 8001016:	430a      	orrs	r2, r1
 8001018:	61da      	str	r2, [r3, #28]
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_TIM_Base_MspInit+0x48>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	2210      	movs	r2, #16
 8001020:	4013      	ands	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	2011      	movs	r0, #17
 800102c:	f000 fa0c 	bl	8001448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001030:	2011      	movs	r0, #17
 8001032:	f000 fa1e 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b004      	add	sp, #16
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	40001000 	.word	0x40001000
 8001044:	40021000 	.word	0x40021000

08001048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b08b      	sub	sp, #44	; 0x2c
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	2414      	movs	r4, #20
 8001052:	193b      	adds	r3, r7, r4
 8001054:	0018      	movs	r0, r3
 8001056:	2314      	movs	r3, #20
 8001058:	001a      	movs	r2, r3
 800105a:	2100      	movs	r1, #0
 800105c:	f002 fe9a 	bl	8003d94 <memset>
  if(huart->Instance==USART2)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a20      	ldr	r2, [pc, #128]	; (80010e8 <HAL_UART_MspInit+0xa0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d13a      	bne.n	80010e0 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800106a:	4b20      	ldr	r3, [pc, #128]	; (80010ec <HAL_UART_MspInit+0xa4>)
 800106c:	69da      	ldr	r2, [r3, #28]
 800106e:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <HAL_UART_MspInit+0xa4>)
 8001070:	2180      	movs	r1, #128	; 0x80
 8001072:	0289      	lsls	r1, r1, #10
 8001074:	430a      	orrs	r2, r1
 8001076:	61da      	str	r2, [r3, #28]
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <HAL_UART_MspInit+0xa4>)
 800107a:	69da      	ldr	r2, [r3, #28]
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	029b      	lsls	r3, r3, #10
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <HAL_UART_MspInit+0xa4>)
 8001088:	695a      	ldr	r2, [r3, #20]
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <HAL_UART_MspInit+0xa4>)
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	0289      	lsls	r1, r1, #10
 8001090:	430a      	orrs	r2, r1
 8001092:	615a      	str	r2, [r3, #20]
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_UART_MspInit+0xa4>)
 8001096:	695a      	ldr	r2, [r3, #20]
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	029b      	lsls	r3, r3, #10
 800109c:	4013      	ands	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010a2:	0021      	movs	r1, r4
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	220c      	movs	r2, #12
 80010a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2202      	movs	r2, #2
 80010ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2203      	movs	r2, #3
 80010ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2201      	movs	r2, #1
 80010c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	187a      	adds	r2, r7, r1
 80010c4:	2390      	movs	r3, #144	; 0x90
 80010c6:	05db      	lsls	r3, r3, #23
 80010c8:	0011      	movs	r1, r2
 80010ca:	0018      	movs	r0, r3
 80010cc:	f000 fb46 	bl	800175c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2100      	movs	r1, #0
 80010d4:	201c      	movs	r0, #28
 80010d6:	f000 f9b7 	bl	8001448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010da:	201c      	movs	r0, #28
 80010dc:	f000 f9c9 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b00b      	add	sp, #44	; 0x2c
 80010e6:	bd90      	pop	{r4, r7, pc}
 80010e8:	40004400 	.word	0x40004400
 80010ec:	40021000 	.word	0x40021000

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <HardFault_Handler+0x4>

08001100 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001104:	46c0      	nop			; (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001118:	f000 f8d8 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800111c:	46c0      	nop			; (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800112a:	0018      	movs	r0, r3
 800112c:	f000 fa57 	bl	80015de <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <DMA1_Channel2_3_IRQHandler+0x20>)
 8001132:	0018      	movs	r0, r3
 8001134:	f000 fa53 	bl	80015de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	200000bc 	.word	0x200000bc
 8001144:	20000100 	.word	0x20000100

08001148 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <TIM6_IRQHandler+0x14>)
 800114e:	0018      	movs	r0, r3
 8001150:	f001 fe19 	bl	8002d86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001154:	46c0      	nop			; (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	20000144 	.word	0x20000144

08001160 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <SPI1_IRQHandler+0x14>)
 8001166:	0018      	movs	r0, r3
 8001168:	f001 fa50 	bl	800260c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800116c:	46c0      	nop			; (mov r8, r8)
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	20000058 	.word	0x20000058

08001178 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <USART2_IRQHandler+0x14>)
 800117e:	0018      	movs	r0, r3
 8001180:	f002 f95e 	bl	8003440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001184:	46c0      	nop			; (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	20000184 	.word	0x20000184

08001190 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <SystemInit+0x70>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <SystemInit+0x70>)
 800119a:	2101      	movs	r1, #1
 800119c:	430a      	orrs	r2, r1
 800119e:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <SystemInit+0x70>)
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <SystemInit+0x70>)
 80011a6:	4917      	ldr	r1, [pc, #92]	; (8001204 <SystemInit+0x74>)
 80011a8:	400a      	ands	r2, r1
 80011aa:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <SystemInit+0x70>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <SystemInit+0x70>)
 80011b2:	4915      	ldr	r1, [pc, #84]	; (8001208 <SystemInit+0x78>)
 80011b4:	400a      	ands	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <SystemInit+0x70>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <SystemInit+0x70>)
 80011be:	4913      	ldr	r1, [pc, #76]	; (800120c <SystemInit+0x7c>)
 80011c0:	400a      	ands	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <SystemInit+0x70>)
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <SystemInit+0x70>)
 80011ca:	4911      	ldr	r1, [pc, #68]	; (8001210 <SystemInit+0x80>)
 80011cc:	400a      	ands	r2, r1
 80011ce:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <SystemInit+0x70>)
 80011d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <SystemInit+0x70>)
 80011d6:	210f      	movs	r1, #15
 80011d8:	438a      	bics	r2, r1
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <SystemInit+0x70>)
 80011de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <SystemInit+0x70>)
 80011e2:	490c      	ldr	r1, [pc, #48]	; (8001214 <SystemInit+0x84>)
 80011e4:	400a      	ands	r2, r1
 80011e6:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <SystemInit+0x70>)
 80011ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <SystemInit+0x70>)
 80011ee:	2101      	movs	r1, #1
 80011f0:	438a      	bics	r2, r1
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80011f4:	4b02      	ldr	r3, [pc, #8]	; (8001200 <SystemInit+0x70>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]

}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021000 	.word	0x40021000
 8001204:	08ffb80c 	.word	0x08ffb80c
 8001208:	fef6ffff 	.word	0xfef6ffff
 800120c:	fffbffff 	.word	0xfffbffff
 8001210:	ffc0ffff 	.word	0xffc0ffff
 8001214:	fffffeec 	.word	0xfffffeec

08001218 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001218:	480d      	ldr	r0, [pc, #52]	; (8001250 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800121a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800121c:	480d      	ldr	r0, [pc, #52]	; (8001254 <LoopForever+0x6>)
  ldr r1, =_edata
 800121e:	490e      	ldr	r1, [pc, #56]	; (8001258 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001220:	4a0e      	ldr	r2, [pc, #56]	; (800125c <LoopForever+0xe>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001224:	e002      	b.n	800122c <LoopCopyDataInit>

08001226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122a:	3304      	adds	r3, #4

0800122c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800122c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001230:	d3f9      	bcc.n	8001226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001232:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001234:	4c0b      	ldr	r4, [pc, #44]	; (8001264 <LoopForever+0x16>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001238:	e001      	b.n	800123e <LoopFillZerobss>

0800123a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800123c:	3204      	adds	r2, #4

0800123e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001240:	d3fb      	bcc.n	800123a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001242:	f7ff ffa5 	bl	8001190 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001246:	f002 fd81 	bl	8003d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800124a:	f7ff f9c9 	bl	80005e0 <main>

0800124e <LoopForever>:

LoopForever:
    b LoopForever
 800124e:	e7fe      	b.n	800124e <LoopForever>
  ldr   r0, =_estack
 8001250:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001258:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 800125c:	08003e00 	.word	0x08003e00
  ldr r2, =_sbss
 8001260:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001264:	200004c4 	.word	0x200004c4

08001268 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC1_IRQHandler>
	...

0800126c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <HAL_Init+0x24>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_Init+0x24>)
 8001276:	2110      	movs	r1, #16
 8001278:	430a      	orrs	r2, r1
 800127a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800127c:	2000      	movs	r0, #0
 800127e:	f000 f809 	bl	8001294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001282:	f7ff fded 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	40022000 	.word	0x40022000

08001294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800129c:	f001 f830 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 80012a0:	0002      	movs	r2, r0
 80012a2:	23fa      	movs	r3, #250	; 0xfa
 80012a4:	0099      	lsls	r1, r3, #2
 80012a6:	0010      	movs	r0, r2
 80012a8:	f7fe ff2e 	bl	8000108 <__udivsi3>
 80012ac:	0003      	movs	r3, r0
 80012ae:	0018      	movs	r0, r3
 80012b0:	f000 f8ef 	bl	8001492 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	2301      	movs	r3, #1
 80012b8:	425b      	negs	r3, r3
 80012ba:	2200      	movs	r2, #0
 80012bc:	0018      	movs	r0, r3
 80012be:	f000 f8c3 	bl	8001448 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	0018      	movs	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b002      	add	sp, #8
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  uwTick++;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <HAL_IncTick+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	4b02      	ldr	r3, [pc, #8]	; (80012e0 <HAL_IncTick+0x14>)
 80012d8:	601a      	str	r2, [r3, #0]
}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200004c0 	.word	0x200004c0

080012e4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b02      	ldr	r3, [pc, #8]	; (80012f4 <HAL_GetTick+0x10>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	0018      	movs	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	200004c0 	.word	0x200004c0

080012f8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	0002      	movs	r2, r0
 8001300:	1dfb      	adds	r3, r7, #7
 8001302:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001304:	1dfb      	adds	r3, r7, #7
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	001a      	movs	r2, r3
 800130a:	231f      	movs	r3, #31
 800130c:	401a      	ands	r2, r3
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <NVIC_EnableIRQ+0x28>)
 8001310:	2101      	movs	r1, #1
 8001312:	4091      	lsls	r1, r2
 8001314:	000a      	movs	r2, r1
 8001316:	601a      	str	r2, [r3, #0]
}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	b002      	add	sp, #8
 800131e:	bd80      	pop	{r7, pc}
 8001320:	e000e100 	.word	0xe000e100

08001324 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	0002      	movs	r2, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	1dfb      	adds	r3, r7, #7
 8001330:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8001332:	1dfb      	adds	r3, r7, #7
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b7f      	cmp	r3, #127	; 0x7f
 8001338:	d932      	bls.n	80013a0 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800133a:	4a2f      	ldr	r2, [pc, #188]	; (80013f8 <NVIC_SetPriority+0xd4>)
 800133c:	1dfb      	adds	r3, r7, #7
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	0019      	movs	r1, r3
 8001342:	230f      	movs	r3, #15
 8001344:	400b      	ands	r3, r1
 8001346:	3b08      	subs	r3, #8
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	3306      	adds	r3, #6
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	18d3      	adds	r3, r2, r3
 8001350:	3304      	adds	r3, #4
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	1dfa      	adds	r2, r7, #7
 8001356:	7812      	ldrb	r2, [r2, #0]
 8001358:	0011      	movs	r1, r2
 800135a:	2203      	movs	r2, #3
 800135c:	400a      	ands	r2, r1
 800135e:	00d2      	lsls	r2, r2, #3
 8001360:	21ff      	movs	r1, #255	; 0xff
 8001362:	4091      	lsls	r1, r2
 8001364:	000a      	movs	r2, r1
 8001366:	43d2      	mvns	r2, r2
 8001368:	401a      	ands	r2, r3
 800136a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	019b      	lsls	r3, r3, #6
 8001370:	22ff      	movs	r2, #255	; 0xff
 8001372:	401a      	ands	r2, r3
 8001374:	1dfb      	adds	r3, r7, #7
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	0018      	movs	r0, r3
 800137a:	2303      	movs	r3, #3
 800137c:	4003      	ands	r3, r0
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001382:	481d      	ldr	r0, [pc, #116]	; (80013f8 <NVIC_SetPriority+0xd4>)
 8001384:	1dfb      	adds	r3, r7, #7
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	001c      	movs	r4, r3
 800138a:	230f      	movs	r3, #15
 800138c:	4023      	ands	r3, r4
 800138e:	3b08      	subs	r3, #8
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	430a      	orrs	r2, r1
 8001394:	3306      	adds	r3, #6
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	18c3      	adds	r3, r0, r3
 800139a:	3304      	adds	r3, #4
 800139c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800139e:	e027      	b.n	80013f0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013a0:	4a16      	ldr	r2, [pc, #88]	; (80013fc <NVIC_SetPriority+0xd8>)
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	33c0      	adds	r3, #192	; 0xc0
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	589b      	ldr	r3, [r3, r2]
 80013b0:	1dfa      	adds	r2, r7, #7
 80013b2:	7812      	ldrb	r2, [r2, #0]
 80013b4:	0011      	movs	r1, r2
 80013b6:	2203      	movs	r2, #3
 80013b8:	400a      	ands	r2, r1
 80013ba:	00d2      	lsls	r2, r2, #3
 80013bc:	21ff      	movs	r1, #255	; 0xff
 80013be:	4091      	lsls	r1, r2
 80013c0:	000a      	movs	r2, r1
 80013c2:	43d2      	mvns	r2, r2
 80013c4:	401a      	ands	r2, r3
 80013c6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	019b      	lsls	r3, r3, #6
 80013cc:	22ff      	movs	r2, #255	; 0xff
 80013ce:	401a      	ands	r2, r3
 80013d0:	1dfb      	adds	r3, r7, #7
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	0018      	movs	r0, r3
 80013d6:	2303      	movs	r3, #3
 80013d8:	4003      	ands	r3, r0
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013de:	4807      	ldr	r0, [pc, #28]	; (80013fc <NVIC_SetPriority+0xd8>)
 80013e0:	1dfb      	adds	r3, r7, #7
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	089b      	lsrs	r3, r3, #2
 80013e8:	430a      	orrs	r2, r1
 80013ea:	33c0      	adds	r3, #192	; 0xc0
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	501a      	str	r2, [r3, r0]
}
 80013f0:	46c0      	nop			; (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b003      	add	sp, #12
 80013f6:	bd90      	pop	{r4, r7, pc}
 80013f8:	e000ed00 	.word	0xe000ed00
 80013fc:	e000e100 	.word	0xe000e100

08001400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	1e5a      	subs	r2, r3, #1
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	045b      	lsls	r3, r3, #17
 8001410:	429a      	cmp	r2, r3
 8001412:	d301      	bcc.n	8001418 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001414:	2301      	movs	r3, #1
 8001416:	e010      	b.n	800143a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <SysTick_Config+0x44>)
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	3a01      	subs	r2, #1
 800141e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001420:	2301      	movs	r3, #1
 8001422:	425b      	negs	r3, r3
 8001424:	2103      	movs	r1, #3
 8001426:	0018      	movs	r0, r3
 8001428:	f7ff ff7c 	bl	8001324 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <SysTick_Config+0x44>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <SysTick_Config+0x44>)
 8001434:	2207      	movs	r2, #7
 8001436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001438:	2300      	movs	r3, #0
}
 800143a:	0018      	movs	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	b002      	add	sp, #8
 8001440:	bd80      	pop	{r7, pc}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	e000e010 	.word	0xe000e010

08001448 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	210f      	movs	r1, #15
 8001454:	187b      	adds	r3, r7, r1
 8001456:	1c02      	adds	r2, r0, #0
 8001458:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	187b      	adds	r3, r7, r1
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	b25b      	sxtb	r3, r3
 8001462:	0011      	movs	r1, r2
 8001464:	0018      	movs	r0, r3
 8001466:	f7ff ff5d 	bl	8001324 <NVIC_SetPriority>
}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	b004      	add	sp, #16
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	0002      	movs	r2, r0
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b25b      	sxtb	r3, r3
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff ff37 	bl	80012f8 <NVIC_EnableIRQ>
}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	46bd      	mov	sp, r7
 800148e:	b002      	add	sp, #8
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff ffaf 	bl	8001400 <SysTick_Config>
 80014a2:	0003      	movs	r3, r0
}
 80014a4:	0018      	movs	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b002      	add	sp, #8
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e042      	b.n	8001548 <HAL_DMA_Init+0x9c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2221      	movs	r2, #33	; 0x21
 80014c6:	2102      	movs	r1, #2
 80014c8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4a1e      	ldr	r2, [pc, #120]	; (8001550 <HAL_DMA_Init+0xa4>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80014e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	695b      	ldr	r3, [r3, #20]
 80014f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	4313      	orrs	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	0018      	movs	r0, r3
 8001514:	f000 f906 	bl	8001724 <DMA_CalcBaseAndBitshift>
  
  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2221      	movs	r2, #33	; 0x21
 800153a:	2101      	movs	r1, #1
 800153c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2220      	movs	r2, #32
 8001542:	2100      	movs	r1, #0
 8001544:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}  
 8001548:	0018      	movs	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	b004      	add	sp, #16
 800154e:	bd80      	pop	{r7, pc}
 8001550:	ffffc00f 	.word	0xffffc00f

08001554 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800155c:	210f      	movs	r1, #15
 800155e:	187b      	adds	r3, r7, r1
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2221      	movs	r2, #33	; 0x21
 8001568:	5c9b      	ldrb	r3, [r3, r2]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d006      	beq.n	800157e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2204      	movs	r2, #4
 8001574:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001576:	187b      	adds	r3, r7, r1
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	e028      	b.n	80015d0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	210e      	movs	r1, #14
 800158a:	438a      	bics	r2, r1
 800158c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2101      	movs	r1, #1
 800159a:	438a      	bics	r2, r1
 800159c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a6:	2101      	movs	r1, #1
 80015a8:	4091      	lsls	r1, r2
 80015aa:	000a      	movs	r2, r1
 80015ac:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2221      	movs	r2, #33	; 0x21
 80015b2:	2101      	movs	r1, #1
 80015b4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2220      	movs	r2, #32
 80015ba:	2100      	movs	r1, #0
 80015bc:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d004      	beq.n	80015d0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	0010      	movs	r0, r2
 80015ce:	4798      	blx	r3
    } 
  }
  return status;
 80015d0:	230f      	movs	r3, #15
 80015d2:	18fb      	adds	r3, r7, r3
 80015d4:	781b      	ldrb	r3, [r3, #0]
}
 80015d6:	0018      	movs	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	b004      	add	sp, #16
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b084      	sub	sp, #16
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	2204      	movs	r2, #4
 80015fc:	409a      	lsls	r2, r3
 80015fe:	0013      	movs	r3, r2
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	4013      	ands	r3, r2
 8001604:	d024      	beq.n	8001650 <HAL_DMA_IRQHandler+0x72>
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	2204      	movs	r2, #4
 800160a:	4013      	ands	r3, r2
 800160c:	d020      	beq.n	8001650 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2220      	movs	r2, #32
 8001616:	4013      	ands	r3, r2
 8001618:	d107      	bne.n	800162a <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2104      	movs	r1, #4
 8001626:	438a      	bics	r2, r1
 8001628:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001632:	2104      	movs	r1, #4
 8001634:	4091      	lsls	r1, r2
 8001636:	000a      	movs	r2, r1
 8001638:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	2b00      	cmp	r3, #0
 8001640:	d100      	bne.n	8001644 <HAL_DMA_IRQHandler+0x66>
 8001642:	e06a      	b.n	800171a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	0010      	movs	r0, r2
 800164c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800164e:	e064      	b.n	800171a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	2202      	movs	r2, #2
 8001656:	409a      	lsls	r2, r3
 8001658:	0013      	movs	r3, r2
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4013      	ands	r3, r2
 800165e:	d02b      	beq.n	80016b8 <HAL_DMA_IRQHandler+0xda>
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	2202      	movs	r2, #2
 8001664:	4013      	ands	r3, r2
 8001666:	d027      	beq.n	80016b8 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2220      	movs	r2, #32
 8001670:	4013      	ands	r3, r2
 8001672:	d10b      	bne.n	800168c <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	210a      	movs	r1, #10
 8001680:	438a      	bics	r2, r1
 8001682:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2221      	movs	r2, #33	; 0x21
 8001688:	2101      	movs	r1, #1
 800168a:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001694:	2102      	movs	r1, #2
 8001696:	4091      	lsls	r1, r2
 8001698:	000a      	movs	r2, r1
 800169a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2220      	movs	r2, #32
 80016a0:	2100      	movs	r1, #0
 80016a2:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d036      	beq.n	800171a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	0010      	movs	r0, r2
 80016b4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80016b6:	e030      	b.n	800171a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	2208      	movs	r2, #8
 80016be:	409a      	lsls	r2, r3
 80016c0:	0013      	movs	r3, r2
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	4013      	ands	r3, r2
 80016c6:	d028      	beq.n	800171a <HAL_DMA_IRQHandler+0x13c>
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2208      	movs	r2, #8
 80016cc:	4013      	ands	r3, r2
 80016ce:	d024      	beq.n	800171a <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	210e      	movs	r1, #14
 80016dc:	438a      	bics	r2, r1
 80016de:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e8:	2101      	movs	r1, #1
 80016ea:	4091      	lsls	r1, r2
 80016ec:	000a      	movs	r2, r1
 80016ee:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2221      	movs	r2, #33	; 0x21
 80016fa:	2101      	movs	r1, #1
 80016fc:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2220      	movs	r2, #32
 8001702:	2100      	movs	r1, #0
 8001704:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	2b00      	cmp	r3, #0
 800170c:	d005      	beq.n	800171a <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	0010      	movs	r0, r2
 8001716:	4798      	blx	r3
    }
   }
}  
 8001718:	e7ff      	b.n	800171a <HAL_DMA_IRQHandler+0x13c>
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	46bd      	mov	sp, r7
 800171e:	b004      	add	sp, #16
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a08      	ldr	r2, [pc, #32]	; (8001754 <DMA_CalcBaseAndBitshift+0x30>)
 8001732:	4694      	mov	ip, r2
 8001734:	4463      	add	r3, ip
 8001736:	2114      	movs	r1, #20
 8001738:	0018      	movs	r0, r3
 800173a:	f7fe fce5 	bl	8000108 <__udivsi3>
 800173e:	0003      	movs	r3, r0
 8001740:	009a      	lsls	r2, r3, #2
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a03      	ldr	r2, [pc, #12]	; (8001758 <DMA_CalcBaseAndBitshift+0x34>)
 800174a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b002      	add	sp, #8
 8001752:	bd80      	pop	{r7, pc}
 8001754:	bffdfff8 	.word	0xbffdfff8
 8001758:	40020000 	.word	0x40020000

0800175c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001772:	e14f      	b.n	8001a14 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2101      	movs	r1, #1
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	4091      	lsls	r1, r2
 800177e:	000a      	movs	r2, r1
 8001780:	4013      	ands	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d100      	bne.n	800178c <HAL_GPIO_Init+0x30>
 800178a:	e140      	b.n	8001a0e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x40>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b12      	cmp	r3, #18
 800179a:	d123      	bne.n	80017e4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	08da      	lsrs	r2, r3, #3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3208      	adds	r2, #8
 80017a4:	0092      	lsls	r2, r2, #2
 80017a6:	58d3      	ldr	r3, [r2, r3]
 80017a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	2207      	movs	r2, #7
 80017ae:	4013      	ands	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	220f      	movs	r2, #15
 80017b4:	409a      	lsls	r2, r3
 80017b6:	0013      	movs	r3, r2
 80017b8:	43da      	mvns	r2, r3
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	691a      	ldr	r2, [r3, #16]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	2107      	movs	r1, #7
 80017c8:	400b      	ands	r3, r1
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	409a      	lsls	r2, r3
 80017ce:	0013      	movs	r3, r2
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	08da      	lsrs	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3208      	adds	r2, #8
 80017de:	0092      	lsls	r2, r2, #2
 80017e0:	6939      	ldr	r1, [r7, #16]
 80017e2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	409a      	lsls	r2, r3
 80017f2:	0013      	movs	r3, r2
 80017f4:	43da      	mvns	r2, r3
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2203      	movs	r2, #3
 8001802:	401a      	ands	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	409a      	lsls	r2, r3
 800180a:	0013      	movs	r3, r2
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d00b      	beq.n	8001838 <HAL_GPIO_Init+0xdc>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d007      	beq.n	8001838 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800182c:	2b11      	cmp	r3, #17
 800182e:	d003      	beq.n	8001838 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b12      	cmp	r3, #18
 8001836:	d130      	bne.n	800189a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	409a      	lsls	r2, r3
 8001846:	0013      	movs	r3, r2
 8001848:	43da      	mvns	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	409a      	lsls	r2, r3
 800185a:	0013      	movs	r3, r2
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800186e:	2201      	movs	r2, #1
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	409a      	lsls	r2, r3
 8001874:	0013      	movs	r3, r2
 8001876:	43da      	mvns	r2, r3
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	2201      	movs	r2, #1
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
 800188c:	0013      	movs	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	2203      	movs	r2, #3
 80018a6:	409a      	lsls	r2, r3
 80018a8:	0013      	movs	r3, r2
 80018aa:	43da      	mvns	r2, r3
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	409a      	lsls	r2, r3
 80018bc:	0013      	movs	r3, r2
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	055b      	lsls	r3, r3, #21
 80018d2:	4013      	ands	r3, r2
 80018d4:	d100      	bne.n	80018d8 <HAL_GPIO_Init+0x17c>
 80018d6:	e09a      	b.n	8001a0e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d8:	4b54      	ldr	r3, [pc, #336]	; (8001a2c <HAL_GPIO_Init+0x2d0>)
 80018da:	699a      	ldr	r2, [r3, #24]
 80018dc:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <HAL_GPIO_Init+0x2d0>)
 80018de:	2101      	movs	r1, #1
 80018e0:	430a      	orrs	r2, r1
 80018e2:	619a      	str	r2, [r3, #24]
 80018e4:	4b51      	ldr	r3, [pc, #324]	; (8001a2c <HAL_GPIO_Init+0x2d0>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2201      	movs	r2, #1
 80018ea:	4013      	ands	r3, r2
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80018f0:	4a4f      	ldr	r2, [pc, #316]	; (8001a30 <HAL_GPIO_Init+0x2d4>)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	089b      	lsrs	r3, r3, #2
 80018f6:	3302      	adds	r3, #2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	589b      	ldr	r3, [r3, r2]
 80018fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2203      	movs	r2, #3
 8001902:	4013      	ands	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	220f      	movs	r2, #15
 8001908:	409a      	lsls	r2, r3
 800190a:	0013      	movs	r3, r2
 800190c:	43da      	mvns	r2, r3
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	2390      	movs	r3, #144	; 0x90
 8001918:	05db      	lsls	r3, r3, #23
 800191a:	429a      	cmp	r2, r3
 800191c:	d013      	beq.n	8001946 <HAL_GPIO_Init+0x1ea>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a44      	ldr	r2, [pc, #272]	; (8001a34 <HAL_GPIO_Init+0x2d8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d00d      	beq.n	8001942 <HAL_GPIO_Init+0x1e6>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a43      	ldr	r2, [pc, #268]	; (8001a38 <HAL_GPIO_Init+0x2dc>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d007      	beq.n	800193e <HAL_GPIO_Init+0x1e2>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a42      	ldr	r2, [pc, #264]	; (8001a3c <HAL_GPIO_Init+0x2e0>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d101      	bne.n	800193a <HAL_GPIO_Init+0x1de>
 8001936:	2303      	movs	r3, #3
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x1ec>
 800193a:	2305      	movs	r3, #5
 800193c:	e004      	b.n	8001948 <HAL_GPIO_Init+0x1ec>
 800193e:	2302      	movs	r3, #2
 8001940:	e002      	b.n	8001948 <HAL_GPIO_Init+0x1ec>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_GPIO_Init+0x1ec>
 8001946:	2300      	movs	r3, #0
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	2103      	movs	r1, #3
 800194c:	400a      	ands	r2, r1
 800194e:	0092      	lsls	r2, r2, #2
 8001950:	4093      	lsls	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001958:	4935      	ldr	r1, [pc, #212]	; (8001a30 <HAL_GPIO_Init+0x2d4>)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	3302      	adds	r3, #2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001966:	4b36      	ldr	r3, [pc, #216]	; (8001a40 <HAL_GPIO_Init+0x2e4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	43da      	mvns	r2, r3
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	025b      	lsls	r3, r3, #9
 800197e:	4013      	ands	r3, r2
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800198a:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <HAL_GPIO_Init+0x2e4>)
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001990:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <HAL_GPIO_Init+0x2e4>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	43da      	mvns	r2, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	029b      	lsls	r3, r3, #10
 80019a8:	4013      	ands	r3, r2
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019b4:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <HAL_GPIO_Init+0x2e4>)
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ba:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <HAL_GPIO_Init+0x2e4>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	43da      	mvns	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	035b      	lsls	r3, r3, #13
 80019d2:	4013      	ands	r3, r2
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019de:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_GPIO_Init+0x2e4>)
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019e4:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_GPIO_Init+0x2e4>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	43da      	mvns	r2, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	039b      	lsls	r3, r3, #14
 80019fc:	4013      	ands	r3, r2
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a08:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <HAL_GPIO_Init+0x2e4>)
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3301      	adds	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	40da      	lsrs	r2, r3
 8001a1c:	1e13      	subs	r3, r2, #0
 8001a1e:	d000      	beq.n	8001a22 <HAL_GPIO_Init+0x2c6>
 8001a20:	e6a8      	b.n	8001774 <HAL_GPIO_Init+0x18>
  } 
}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	46c0      	nop			; (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b006      	add	sp, #24
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010000 	.word	0x40010000
 8001a34:	48000400 	.word	0x48000400
 8001a38:	48000800 	.word	0x48000800
 8001a3c:	48000c00 	.word	0x48000c00
 8001a40:	40010400 	.word	0x40010400

08001a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	0008      	movs	r0, r1
 8001a4e:	0011      	movs	r1, r2
 8001a50:	1cbb      	adds	r3, r7, #2
 8001a52:	1c02      	adds	r2, r0, #0
 8001a54:	801a      	strh	r2, [r3, #0]
 8001a56:	1c7b      	adds	r3, r7, #1
 8001a58:	1c0a      	adds	r2, r1, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a5c:	1c7b      	adds	r3, r7, #1
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d004      	beq.n	8001a6e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a64:	1cbb      	adds	r3, r7, #2
 8001a66:	881a      	ldrh	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a6c:	e003      	b.n	8001a76 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a6e:	1cbb      	adds	r3, r7, #2
 8001a70:	881a      	ldrh	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	b002      	add	sp, #8
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2201      	movs	r2, #1
 8001a92:	4013      	ands	r3, r2
 8001a94:	d100      	bne.n	8001a98 <HAL_RCC_OscConfig+0x18>
 8001a96:	e08d      	b.n	8001bb4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a98:	4bc3      	ldr	r3, [pc, #780]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	220c      	movs	r2, #12
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d00e      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aa4:	4bc0      	ldr	r3, [pc, #768]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	220c      	movs	r2, #12
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d116      	bne.n	8001ade <HAL_RCC_OscConfig+0x5e>
 8001ab0:	4bbd      	ldr	r3, [pc, #756]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	025b      	lsls	r3, r3, #9
 8001ab8:	401a      	ands	r2, r3
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	025b      	lsls	r3, r3, #9
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d10d      	bne.n	8001ade <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac2:	4bb9      	ldr	r3, [pc, #740]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	029b      	lsls	r3, r3, #10
 8001aca:	4013      	ands	r3, r2
 8001acc:	d100      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x50>
 8001ace:	e070      	b.n	8001bb2 <HAL_RCC_OscConfig+0x132>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d000      	beq.n	8001ada <HAL_RCC_OscConfig+0x5a>
 8001ad8:	e06b      	b.n	8001bb2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e2b6      	b.n	800204c <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_OscConfig+0x76>
 8001ae6:	4bb0      	ldr	r3, [pc, #704]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4baf      	ldr	r3, [pc, #700]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001aec:	2180      	movs	r1, #128	; 0x80
 8001aee:	0249      	lsls	r1, r1, #9
 8001af0:	430a      	orrs	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e02f      	b.n	8001b56 <HAL_RCC_OscConfig+0xd6>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x98>
 8001afe:	4baa      	ldr	r3, [pc, #680]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4ba9      	ldr	r3, [pc, #676]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001b04:	49a9      	ldr	r1, [pc, #676]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b06:	400a      	ands	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	4ba7      	ldr	r3, [pc, #668]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4ba6      	ldr	r3, [pc, #664]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001b10:	49a7      	ldr	r1, [pc, #668]	; (8001db0 <HAL_RCC_OscConfig+0x330>)
 8001b12:	400a      	ands	r2, r1
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	e01e      	b.n	8001b56 <HAL_RCC_OscConfig+0xd6>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	d10e      	bne.n	8001b3e <HAL_RCC_OscConfig+0xbe>
 8001b20:	4ba1      	ldr	r3, [pc, #644]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4ba0      	ldr	r3, [pc, #640]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	02c9      	lsls	r1, r1, #11
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	4b9e      	ldr	r3, [pc, #632]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4b9d      	ldr	r3, [pc, #628]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001b34:	2180      	movs	r1, #128	; 0x80
 8001b36:	0249      	lsls	r1, r1, #9
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	e00b      	b.n	8001b56 <HAL_RCC_OscConfig+0xd6>
 8001b3e:	4b9a      	ldr	r3, [pc, #616]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4b99      	ldr	r3, [pc, #612]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001b44:	4999      	ldr	r1, [pc, #612]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b46:	400a      	ands	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	4b97      	ldr	r3, [pc, #604]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4b96      	ldr	r3, [pc, #600]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001b50:	4997      	ldr	r1, [pc, #604]	; (8001db0 <HAL_RCC_OscConfig+0x330>)
 8001b52:	400a      	ands	r2, r1
 8001b54:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d014      	beq.n	8001b88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7ff fbc1 	bl	80012e4 <HAL_GetTick>
 8001b62:	0003      	movs	r3, r0
 8001b64:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b68:	f7ff fbbc 	bl	80012e4 <HAL_GetTick>
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	; 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e268      	b.n	800204c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	4b8b      	ldr	r3, [pc, #556]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	029b      	lsls	r3, r3, #10
 8001b82:	4013      	ands	r3, r2
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0xe8>
 8001b86:	e015      	b.n	8001bb4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff fbac 	bl	80012e4 <HAL_GetTick>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b92:	f7ff fba7 	bl	80012e4 <HAL_GetTick>
 8001b96:	0002      	movs	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b64      	cmp	r3, #100	; 0x64
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e253      	b.n	800204c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba4:	4b80      	ldr	r3, [pc, #512]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	029b      	lsls	r3, r3, #10
 8001bac:	4013      	ands	r3, r2
 8001bae:	d1f0      	bne.n	8001b92 <HAL_RCC_OscConfig+0x112>
 8001bb0:	e000      	b.n	8001bb4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d100      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x140>
 8001bbe:	e069      	b.n	8001c94 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bc0:	4b79      	ldr	r3, [pc, #484]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	220c      	movs	r2, #12
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d00b      	beq.n	8001be2 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bca:	4b77      	ldr	r3, [pc, #476]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	220c      	movs	r2, #12
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d11c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x190>
 8001bd6:	4b74      	ldr	r3, [pc, #464]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	2380      	movs	r3, #128	; 0x80
 8001bdc:	025b      	lsls	r3, r3, #9
 8001bde:	4013      	ands	r3, r2
 8001be0:	d116      	bne.n	8001c10 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be2:	4b71      	ldr	r3, [pc, #452]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2202      	movs	r2, #2
 8001be8:	4013      	ands	r3, r2
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x178>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e229      	b.n	800204c <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf8:	4b6b      	ldr	r3, [pc, #428]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	22f8      	movs	r2, #248	; 0xf8
 8001bfe:	4393      	bics	r3, r2
 8001c00:	0019      	movs	r1, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	00da      	lsls	r2, r3, #3
 8001c08:	4b67      	ldr	r3, [pc, #412]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0e:	e041      	b.n	8001c94 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d024      	beq.n	8001c62 <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c18:	4b63      	ldr	r3, [pc, #396]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b62      	ldr	r3, [pc, #392]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001c1e:	2101      	movs	r1, #1
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fb5e 	bl	80012e4 <HAL_GetTick>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c2e:	f7ff fb59 	bl	80012e4 <HAL_GetTick>
 8001c32:	0002      	movs	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e205      	b.n	800204c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c40:	4b59      	ldr	r3, [pc, #356]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2202      	movs	r2, #2
 8001c46:	4013      	ands	r3, r2
 8001c48:	d0f1      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4a:	4b57      	ldr	r3, [pc, #348]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	22f8      	movs	r2, #248	; 0xf8
 8001c50:	4393      	bics	r3, r2
 8001c52:	0019      	movs	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	00da      	lsls	r2, r3, #3
 8001c5a:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	e018      	b.n	8001c94 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c62:	4b51      	ldr	r3, [pc, #324]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	4b50      	ldr	r3, [pc, #320]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001c68:	2101      	movs	r1, #1
 8001c6a:	438a      	bics	r2, r1
 8001c6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6e:	f7ff fb39 	bl	80012e4 <HAL_GetTick>
 8001c72:	0003      	movs	r3, r0
 8001c74:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c78:	f7ff fb34 	bl	80012e4 <HAL_GetTick>
 8001c7c:	0002      	movs	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e1e0      	b.n	800204c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8a:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	4013      	ands	r3, r2
 8001c92:	d1f1      	bne.n	8001c78 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2208      	movs	r2, #8
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d036      	beq.n	8001d0c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d019      	beq.n	8001cda <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca6:	4b40      	ldr	r3, [pc, #256]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001caa:	4b3f      	ldr	r3, [pc, #252]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001cac:	2101      	movs	r1, #1
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb2:	f7ff fb17 	bl	80012e4 <HAL_GetTick>
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7ff fb12 	bl	80012e4 <HAL_GetTick>
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e1be      	b.n	800204c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cce:	4b36      	ldr	r3, [pc, #216]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d0f1      	beq.n	8001cbc <HAL_RCC_OscConfig+0x23c>
 8001cd8:	e018      	b.n	8001d0c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cda:	4b33      	ldr	r3, [pc, #204]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cde:	4b32      	ldr	r3, [pc, #200]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	438a      	bics	r2, r1
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce6:	f7ff fafd 	bl	80012e4 <HAL_GetTick>
 8001cea:	0003      	movs	r3, r0
 8001cec:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf0:	f7ff faf8 	bl	80012e4 <HAL_GetTick>
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e1a4      	b.n	800204c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d02:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	2202      	movs	r2, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d1f1      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2204      	movs	r2, #4
 8001d12:	4013      	ands	r3, r2
 8001d14:	d100      	bne.n	8001d18 <HAL_RCC_OscConfig+0x298>
 8001d16:	e0b5      	b.n	8001e84 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d18:	2017      	movs	r0, #23
 8001d1a:	183b      	adds	r3, r7, r0
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d20:	4b21      	ldr	r3, [pc, #132]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001d22:	69da      	ldr	r2, [r3, #28]
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	055b      	lsls	r3, r3, #21
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d110      	bne.n	8001d4e <HAL_RCC_OscConfig+0x2ce>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001d2e:	69da      	ldr	r2, [r3, #28]
 8001d30:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001d32:	2180      	movs	r1, #128	; 0x80
 8001d34:	0549      	lsls	r1, r1, #21
 8001d36:	430a      	orrs	r2, r1
 8001d38:	61da      	str	r2, [r3, #28]
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001d3c:	69da      	ldr	r2, [r3, #28]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	055b      	lsls	r3, r3, #21
 8001d42:	4013      	ands	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d48:	183b      	adds	r3, r7, r0
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4e:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_RCC_OscConfig+0x334>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4013      	ands	r3, r2
 8001d58:	d11a      	bne.n	8001d90 <HAL_RCC_OscConfig+0x310>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <HAL_RCC_OscConfig+0x334>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_RCC_OscConfig+0x334>)
 8001d60:	2180      	movs	r1, #128	; 0x80
 8001d62:	0049      	lsls	r1, r1, #1
 8001d64:	430a      	orrs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d68:	f7ff fabc 	bl	80012e4 <HAL_GetTick>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x304>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d72:	f7ff fab7 	bl	80012e4 <HAL_GetTick>
 8001d76:	0002      	movs	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b64      	cmp	r3, #100	; 0x64
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e163      	b.n	800204c <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_OscConfig+0x334>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d10f      	bne.n	8001db8 <HAL_RCC_OscConfig+0x338>
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001d9a:	6a1a      	ldr	r2, [r3, #32]
 8001d9c:	4b02      	ldr	r3, [pc, #8]	; (8001da8 <HAL_RCC_OscConfig+0x328>)
 8001d9e:	2101      	movs	r1, #1
 8001da0:	430a      	orrs	r2, r1
 8001da2:	621a      	str	r2, [r3, #32]
 8001da4:	e036      	b.n	8001e14 <HAL_RCC_OscConfig+0x394>
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	40021000 	.word	0x40021000
 8001dac:	fffeffff 	.word	0xfffeffff
 8001db0:	fffbffff 	.word	0xfffbffff
 8001db4:	40007000 	.word	0x40007000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10c      	bne.n	8001dda <HAL_RCC_OscConfig+0x35a>
 8001dc0:	4ba4      	ldr	r3, [pc, #656]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001dc2:	6a1a      	ldr	r2, [r3, #32]
 8001dc4:	4ba3      	ldr	r3, [pc, #652]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	438a      	bics	r2, r1
 8001dca:	621a      	str	r2, [r3, #32]
 8001dcc:	4ba1      	ldr	r3, [pc, #644]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001dce:	6a1a      	ldr	r2, [r3, #32]
 8001dd0:	4ba0      	ldr	r3, [pc, #640]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	438a      	bics	r2, r1
 8001dd6:	621a      	str	r2, [r3, #32]
 8001dd8:	e01c      	b.n	8001e14 <HAL_RCC_OscConfig+0x394>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b05      	cmp	r3, #5
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x37c>
 8001de2:	4b9c      	ldr	r3, [pc, #624]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001de4:	6a1a      	ldr	r2, [r3, #32]
 8001de6:	4b9b      	ldr	r3, [pc, #620]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001de8:	2104      	movs	r1, #4
 8001dea:	430a      	orrs	r2, r1
 8001dec:	621a      	str	r2, [r3, #32]
 8001dee:	4b99      	ldr	r3, [pc, #612]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001df0:	6a1a      	ldr	r2, [r3, #32]
 8001df2:	4b98      	ldr	r3, [pc, #608]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001df4:	2101      	movs	r1, #1
 8001df6:	430a      	orrs	r2, r1
 8001df8:	621a      	str	r2, [r3, #32]
 8001dfa:	e00b      	b.n	8001e14 <HAL_RCC_OscConfig+0x394>
 8001dfc:	4b95      	ldr	r3, [pc, #596]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001dfe:	6a1a      	ldr	r2, [r3, #32]
 8001e00:	4b94      	ldr	r3, [pc, #592]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	438a      	bics	r2, r1
 8001e06:	621a      	str	r2, [r3, #32]
 8001e08:	4b92      	ldr	r3, [pc, #584]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001e0a:	6a1a      	ldr	r2, [r3, #32]
 8001e0c:	4b91      	ldr	r3, [pc, #580]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001e0e:	2104      	movs	r1, #4
 8001e10:	438a      	bics	r2, r1
 8001e12:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d014      	beq.n	8001e46 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1c:	f7ff fa62 	bl	80012e4 <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e24:	e009      	b.n	8001e3a <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e26:	f7ff fa5d 	bl	80012e4 <HAL_GetTick>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	4a89      	ldr	r2, [pc, #548]	; (8002058 <HAL_RCC_OscConfig+0x5d8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e108      	b.n	800204c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3a:	4b86      	ldr	r3, [pc, #536]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	4013      	ands	r3, r2
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x3a6>
 8001e44:	e013      	b.n	8001e6e <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e46:	f7ff fa4d 	bl	80012e4 <HAL_GetTick>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4e:	e009      	b.n	8001e64 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e50:	f7ff fa48 	bl	80012e4 <HAL_GetTick>
 8001e54:	0002      	movs	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	4a7f      	ldr	r2, [pc, #508]	; (8002058 <HAL_RCC_OscConfig+0x5d8>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e0f3      	b.n	800204c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e64:	4b7b      	ldr	r3, [pc, #492]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	2202      	movs	r2, #2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e6e:	2317      	movs	r3, #23
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d105      	bne.n	8001e84 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e78:	4b76      	ldr	r3, [pc, #472]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001e7a:	69da      	ldr	r2, [r3, #28]
 8001e7c:	4b75      	ldr	r3, [pc, #468]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001e7e:	4977      	ldr	r1, [pc, #476]	; (800205c <HAL_RCC_OscConfig+0x5dc>)
 8001e80:	400a      	ands	r2, r1
 8001e82:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2210      	movs	r2, #16
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d063      	beq.n	8001f56 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d12a      	bne.n	8001eec <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e96:	4b6f      	ldr	r3, [pc, #444]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e9a:	4b6e      	ldr	r3, [pc, #440]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001e9c:	2104      	movs	r1, #4
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ea2:	4b6c      	ldr	r3, [pc, #432]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea6:	4b6b      	ldr	r3, [pc, #428]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eae:	f7ff fa19 	bl	80012e4 <HAL_GetTick>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001eb8:	f7ff fa14 	bl	80012e4 <HAL_GetTick>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e0c0      	b.n	800204c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001eca:	4b62      	ldr	r3, [pc, #392]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ece:	2202      	movs	r2, #2
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d0f1      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ed4:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed8:	22f8      	movs	r2, #248	; 0xf8
 8001eda:	4393      	bics	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	00da      	lsls	r2, r3, #3
 8001ee4:	4b5b      	ldr	r3, [pc, #364]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eea:	e034      	b.n	8001f56 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	3305      	adds	r3, #5
 8001ef2:	d111      	bne.n	8001f18 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ef4:	4b57      	ldr	r3, [pc, #348]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef8:	4b56      	ldr	r3, [pc, #344]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001efa:	2104      	movs	r1, #4
 8001efc:	438a      	bics	r2, r1
 8001efe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f00:	4b54      	ldr	r3, [pc, #336]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f04:	22f8      	movs	r2, #248	; 0xf8
 8001f06:	4393      	bics	r3, r2
 8001f08:	0019      	movs	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	00da      	lsls	r2, r3, #3
 8001f10:	4b50      	ldr	r3, [pc, #320]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001f12:	430a      	orrs	r2, r1
 8001f14:	635a      	str	r2, [r3, #52]	; 0x34
 8001f16:	e01e      	b.n	8001f56 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f18:	4b4e      	ldr	r3, [pc, #312]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f1c:	4b4d      	ldr	r3, [pc, #308]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001f1e:	2104      	movs	r1, #4
 8001f20:	430a      	orrs	r2, r1
 8001f22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001f24:	4b4b      	ldr	r3, [pc, #300]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f28:	4b4a      	ldr	r3, [pc, #296]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	438a      	bics	r2, r1
 8001f2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f30:	f7ff f9d8 	bl	80012e4 <HAL_GetTick>
 8001f34:	0003      	movs	r3, r0
 8001f36:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f3a:	f7ff f9d3 	bl	80012e4 <HAL_GetTick>
 8001f3e:	0002      	movs	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e07f      	b.n	800204c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f4c:	4b41      	ldr	r3, [pc, #260]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f50:	2202      	movs	r2, #2
 8001f52:	4013      	ands	r3, r2
 8001f54:	d1f1      	bne.n	8001f3a <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d100      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4e0>
 8001f5e:	e074      	b.n	800204a <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f60:	4b3c      	ldr	r3, [pc, #240]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	220c      	movs	r2, #12
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d100      	bne.n	8001f6e <HAL_RCC_OscConfig+0x4ee>
 8001f6c:	e06b      	b.n	8002046 <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d14c      	bne.n	8002010 <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f76:	4b37      	ldr	r3, [pc, #220]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	4b36      	ldr	r3, [pc, #216]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001f7c:	4938      	ldr	r1, [pc, #224]	; (8002060 <HAL_RCC_OscConfig+0x5e0>)
 8001f7e:	400a      	ands	r2, r1
 8001f80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7ff f9af 	bl	80012e4 <HAL_GetTick>
 8001f86:	0003      	movs	r3, r0
 8001f88:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7ff f9aa 	bl	80012e4 <HAL_GetTick>
 8001f90:	0002      	movs	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e056      	b.n	800204c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9e:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	049b      	lsls	r3, r3, #18
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001faa:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	220f      	movs	r2, #15
 8001fb0:	4393      	bics	r3, r2
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb8:	4b26      	ldr	r3, [pc, #152]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fbe:	4b25      	ldr	r3, [pc, #148]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4a28      	ldr	r2, [pc, #160]	; (8002064 <HAL_RCC_OscConfig+0x5e4>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	4b20      	ldr	r3, [pc, #128]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd8:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8001fde:	2180      	movs	r1, #128	; 0x80
 8001fe0:	0449      	lsls	r1, r1, #17
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7ff f97d 	bl	80012e4 <HAL_GetTick>
 8001fea:	0003      	movs	r3, r0
 8001fec:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7ff f978 	bl	80012e4 <HAL_GetTick>
 8001ff4:	0002      	movs	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e024      	b.n	800204c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	049b      	lsls	r3, r3, #18
 800200a:	4013      	ands	r3, r2
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x570>
 800200e:	e01c      	b.n	800204a <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002010:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 8002016:	4912      	ldr	r1, [pc, #72]	; (8002060 <HAL_RCC_OscConfig+0x5e0>)
 8002018:	400a      	ands	r2, r1
 800201a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7ff f962 	bl	80012e4 <HAL_GetTick>
 8002020:	0003      	movs	r3, r0
 8002022:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002026:	f7ff f95d 	bl	80012e4 <HAL_GetTick>
 800202a:	0002      	movs	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e009      	b.n	800204c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_RCC_OscConfig+0x5d4>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	049b      	lsls	r3, r3, #18
 8002040:	4013      	ands	r3, r2
 8002042:	d1f0      	bne.n	8002026 <HAL_RCC_OscConfig+0x5a6>
 8002044:	e001      	b.n	800204a <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	b006      	add	sp, #24
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021000 	.word	0x40021000
 8002058:	00001388 	.word	0x00001388
 800205c:	efffffff 	.word	0xefffffff
 8002060:	feffffff 	.word	0xfeffffff
 8002064:	ffc2ffff 	.word	0xffc2ffff

08002068 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002076:	4b6a      	ldr	r3, [pc, #424]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2201      	movs	r2, #1
 800207c:	4013      	ands	r3, r2
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d911      	bls.n	80020a8 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002084:	4b66      	ldr	r3, [pc, #408]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2201      	movs	r2, #1
 800208a:	4393      	bics	r3, r2
 800208c:	0019      	movs	r1, r3
 800208e:	4b64      	ldr	r3, [pc, #400]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002096:	4b62      	ldr	r3, [pc, #392]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2201      	movs	r2, #1
 800209c:	4013      	ands	r3, r2
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d001      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0b6      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2202      	movs	r2, #2
 80020ae:	4013      	ands	r3, r2
 80020b0:	d009      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b2:	4b5c      	ldr	r3, [pc, #368]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	22f0      	movs	r2, #240	; 0xf0
 80020b8:	4393      	bics	r3, r2
 80020ba:	0019      	movs	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	4b58      	ldr	r3, [pc, #352]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	430a      	orrs	r2, r1
 80020c4:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2201      	movs	r2, #1
 80020cc:	4013      	ands	r3, r2
 80020ce:	d100      	bne.n	80020d2 <HAL_RCC_ClockConfig+0x6a>
 80020d0:	e067      	b.n	80021a2 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d107      	bne.n	80020ea <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	4b52      	ldr	r3, [pc, #328]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	2380      	movs	r3, #128	; 0x80
 80020e0:	029b      	lsls	r3, r3, #10
 80020e2:	4013      	ands	r3, r2
 80020e4:	d114      	bne.n	8002110 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e095      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d107      	bne.n	8002102 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f2:	4b4c      	ldr	r3, [pc, #304]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	049b      	lsls	r3, r3, #18
 80020fa:	4013      	ands	r3, r2
 80020fc:	d108      	bne.n	8002110 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e089      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002102:	4b48      	ldr	r3, [pc, #288]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2202      	movs	r2, #2
 8002108:	4013      	ands	r3, r2
 800210a:	d101      	bne.n	8002110 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e082      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002110:	4b44      	ldr	r3, [pc, #272]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2203      	movs	r2, #3
 8002116:	4393      	bics	r3, r2
 8002118:	0019      	movs	r1, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	4b41      	ldr	r3, [pc, #260]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	430a      	orrs	r2, r1
 8002122:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002124:	f7ff f8de 	bl	80012e4 <HAL_GetTick>
 8002128:	0003      	movs	r3, r0
 800212a:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d111      	bne.n	8002158 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002134:	e009      	b.n	800214a <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002136:	f7ff f8d5 	bl	80012e4 <HAL_GetTick>
 800213a:	0002      	movs	r2, r0
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	4a39      	ldr	r2, [pc, #228]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e065      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800214a:	4b36      	ldr	r3, [pc, #216]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	220c      	movs	r2, #12
 8002150:	4013      	ands	r3, r2
 8002152:	2b04      	cmp	r3, #4
 8002154:	d1ef      	bne.n	8002136 <HAL_RCC_ClockConfig+0xce>
 8002156:	e024      	b.n	80021a2 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d11b      	bne.n	8002198 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002160:	e009      	b.n	8002176 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002162:	f7ff f8bf 	bl	80012e4 <HAL_GetTick>
 8002166:	0002      	movs	r2, r0
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	4a2e      	ldr	r2, [pc, #184]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e04f      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002176:	4b2b      	ldr	r3, [pc, #172]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	220c      	movs	r2, #12
 800217c:	4013      	ands	r3, r2
 800217e:	2b08      	cmp	r3, #8
 8002180:	d1ef      	bne.n	8002162 <HAL_RCC_ClockConfig+0xfa>
 8002182:	e00e      	b.n	80021a2 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002184:	f7ff f8ae 	bl	80012e4 <HAL_GetTick>
 8002188:	0002      	movs	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	4a26      	ldr	r2, [pc, #152]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e03e      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002198:	4b22      	ldr	r3, [pc, #136]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	220c      	movs	r2, #12
 800219e:	4013      	ands	r3, r2
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80021a2:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2201      	movs	r2, #1
 80021a8:	4013      	ands	r3, r2
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d211      	bcs.n	80021d4 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2201      	movs	r2, #1
 80021b6:	4393      	bics	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021c2:	4b17      	ldr	r3, [pc, #92]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2201      	movs	r2, #1
 80021c8:	4013      	ands	r3, r2
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e020      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2204      	movs	r2, #4
 80021da:	4013      	ands	r3, r2
 80021dc:	d009      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4a12      	ldr	r2, [pc, #72]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	0019      	movs	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	430a      	orrs	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021f2:	f000 f821 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 80021f6:	0001      	movs	r1, r0
 80021f8:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	220f      	movs	r2, #15
 8002200:	4013      	ands	r3, r2
 8002202:	4a0b      	ldr	r2, [pc, #44]	; (8002230 <HAL_RCC_ClockConfig+0x1c8>)
 8002204:	5cd3      	ldrb	r3, [r2, r3]
 8002206:	000a      	movs	r2, r1
 8002208:	40da      	lsrs	r2, r3
 800220a:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <HAL_RCC_ClockConfig+0x1cc>)
 800220c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800220e:	2000      	movs	r0, #0
 8002210:	f7ff f840 	bl	8001294 <HAL_InitTick>
  
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	0018      	movs	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	b004      	add	sp, #16
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	40022000 	.word	0x40022000
 8002224:	40021000 	.word	0x40021000
 8002228:	00001388 	.word	0x00001388
 800222c:	fffff8ff 	.word	0xfffff8ff
 8002230:	08003ddc 	.word	0x08003ddc
 8002234:	20000038 	.word	0x20000038

08002238 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002238:	b590      	push	{r4, r7, lr}
 800223a:	b08f      	sub	sp, #60	; 0x3c
 800223c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800223e:	2314      	movs	r3, #20
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	4a2b      	ldr	r2, [pc, #172]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002244:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002246:	c313      	stmia	r3!, {r0, r1, r4}
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	4a29      	ldr	r2, [pc, #164]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002250:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002252:	c313      	stmia	r3!, {r0, r1, r4}
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800225c:	2300      	movs	r3, #0
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002260:	2300      	movs	r3, #0
 8002262:	637b      	str	r3, [r7, #52]	; 0x34
 8002264:	2300      	movs	r3, #0
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800226c:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002274:	220c      	movs	r2, #12
 8002276:	4013      	ands	r3, r2
 8002278:	2b04      	cmp	r3, #4
 800227a:	d002      	beq.n	8002282 <HAL_RCC_GetSysClockFreq+0x4a>
 800227c:	2b08      	cmp	r3, #8
 800227e:	d003      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x50>
 8002280:	e02d      	b.n	80022de <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002282:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002284:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002286:	e02d      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228a:	0c9b      	lsrs	r3, r3, #18
 800228c:	220f      	movs	r2, #15
 800228e:	4013      	ands	r3, r2
 8002290:	2214      	movs	r2, #20
 8002292:	18ba      	adds	r2, r7, r2
 8002294:	5cd3      	ldrb	r3, [r2, r3]
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002298:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	220f      	movs	r2, #15
 800229e:	4013      	ands	r3, r2
 80022a0:	1d3a      	adds	r2, r7, #4
 80022a2:	5cd3      	ldrb	r3, [r2, r3]
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80022a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	025b      	lsls	r3, r3, #9
 80022ac:	4013      	ands	r3, r2
 80022ae:	d009      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80022b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022b2:	4812      	ldr	r0, [pc, #72]	; (80022fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80022b4:	f7fd ff28 	bl	8000108 <__udivsi3>
 80022b8:	0003      	movs	r3, r0
 80022ba:	001a      	movs	r2, r3
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	4353      	muls	r3, r2
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
 80022c2:	e009      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80022c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022c6:	000a      	movs	r2, r1
 80022c8:	0152      	lsls	r2, r2, #5
 80022ca:	1a52      	subs	r2, r2, r1
 80022cc:	0193      	lsls	r3, r2, #6
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	185b      	adds	r3, r3, r1
 80022d4:	021b      	lsls	r3, r3, #8
 80022d6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80022d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022dc:	e002      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80022e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022e2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80022e6:	0018      	movs	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b00f      	add	sp, #60	; 0x3c
 80022ec:	bd90      	pop	{r4, r7, pc}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	08003dbc 	.word	0x08003dbc
 80022f4:	08003dcc 	.word	0x08003dcc
 80022f8:	40021000 	.word	0x40021000
 80022fc:	007a1200 	.word	0x007a1200

08002300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002304:	4b02      	ldr	r3, [pc, #8]	; (8002310 <HAL_RCC_GetHCLKFreq+0x10>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	0018      	movs	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	20000038 	.word	0x20000038

08002314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002318:	f7ff fff2 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 800231c:	0001      	movs	r1, r0
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	2207      	movs	r2, #7
 8002326:	4013      	ands	r3, r2
 8002328:	4a04      	ldr	r2, [pc, #16]	; (800233c <HAL_RCC_GetPCLK1Freq+0x28>)
 800232a:	5cd3      	ldrb	r3, [r2, r3]
 800232c:	40d9      	lsrs	r1, r3
 800232e:	000b      	movs	r3, r1
}    
 8002330:	0018      	movs	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	40021000 	.word	0x40021000
 800233c:	08003dec 	.word	0x08003dec

08002340 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e08a      	b.n	8002468 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	225d      	movs	r2, #93	; 0x5d
 800235c:	5c9b      	ldrb	r3, [r3, r2]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d107      	bne.n	8002374 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	225c      	movs	r2, #92	; 0x5c
 8002368:	2100      	movs	r1, #0
 800236a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	0018      	movs	r0, r3
 8002370:	f7fe fd9a 	bl	8000ea8 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	225d      	movs	r2, #93	; 0x5d
 8002378:	2102      	movs	r1, #2
 800237a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2140      	movs	r1, #64	; 0x40
 8002388:	438a      	bics	r2, r1
 800238a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	23e0      	movs	r3, #224	; 0xe0
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	429a      	cmp	r2, r3
 8002396:	d902      	bls.n	800239e <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	e002      	b.n	80023a4 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	015b      	lsls	r3, r3, #5
 80023a2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	23f0      	movs	r3, #240	; 0xf0
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d008      	beq.n	80023c2 <HAL_SPI_Init+0x82>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	23e0      	movs	r3, #224	; 0xe0
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d002      	beq.n	80023c2 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10c      	bne.n	80023e4 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	23e0      	movs	r3, #224	; 0xe0
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d903      	bls.n	80023de <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2202      	movs	r2, #2
 80023da:	631a      	str	r2, [r3, #48]	; 0x30
 80023dc:	e002      	b.n	80023e4 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6999      	ldr	r1, [r3, #24]
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	400b      	ands	r3, r1
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	431a      	orrs	r2, r3
 8002412:	0011      	movs	r1, r2
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	0c1b      	lsrs	r3, r3, #16
 8002426:	2204      	movs	r2, #4
 8002428:	401a      	ands	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	431a      	orrs	r2, r3
 800243c:	0011      	movs	r1, r2
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	430a      	orrs	r2, r1
 8002446:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	69da      	ldr	r2, [r3, #28]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4907      	ldr	r1, [pc, #28]	; (8002470 <HAL_SPI_Init+0x130>)
 8002454:	400a      	ands	r2, r1
 8002456:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	225d      	movs	r2, #93	; 0x5d
 8002462:	2101      	movs	r1, #1
 8002464:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	0018      	movs	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	b004      	add	sp, #16
 800246e:	bd80      	pop	{r7, pc}
 8002470:	fffff7ff 	.word	0xfffff7ff

08002474 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	001a      	movs	r2, r3
 8002482:	1cbb      	adds	r3, r7, #2
 8002484:	801a      	strh	r2, [r3, #0]
  uint32_t tmp = 0U, tmp1 = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	61bb      	str	r3, [r7, #24]
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800248e:	231f      	movs	r3, #31
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	225c      	movs	r2, #92	; 0x5c
 800249a:	5c9b      	ldrb	r3, [r3, r2]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_SPI_TransmitReceive_IT+0x30>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e0a4      	b.n	80025ee <HAL_SPI_TransmitReceive_IT+0x17a>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	225c      	movs	r2, #92	; 0x5c
 80024a8:	2101      	movs	r1, #1
 80024aa:	5499      	strb	r1, [r3, r2]

  tmp  = hspi->State;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	225d      	movs	r2, #93	; 0x5d
 80024b0:	5c9b      	ldrb	r3, [r3, r2]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	61bb      	str	r3, [r7, #24]
  tmp1 = hspi->Init.Mode;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	617b      	str	r3, [r7, #20]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d010      	beq.n	80024e4 <HAL_SPI_TransmitReceive_IT+0x70>
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	2382      	movs	r3, #130	; 0x82
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d106      	bne.n	80024da <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d102      	bne.n	80024da <HAL_SPI_TransmitReceive_IT+0x66>
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d004      	beq.n	80024e4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 80024da:	231f      	movs	r3, #31
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	2202      	movs	r2, #2
 80024e0:	701a      	strb	r2, [r3, #0]
    goto error;
 80024e2:	e07d      	b.n	80025e0 <HAL_SPI_TransmitReceive_IT+0x16c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d006      	beq.n	80024f8 <HAL_SPI_TransmitReceive_IT+0x84>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_SPI_TransmitReceive_IT+0x84>
 80024f0:	1cbb      	adds	r3, r7, #2
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d104      	bne.n	8002502 <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 80024f8:	231f      	movs	r3, #31
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	2201      	movs	r2, #1
 80024fe:	701a      	strb	r2, [r3, #0]
    goto error;
 8002500:	e06e      	b.n	80025e0 <HAL_SPI_TransmitReceive_IT+0x16c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	225d      	movs	r2, #93	; 0x5d
 8002506:	5c9b      	ldrb	r3, [r3, r2]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b04      	cmp	r3, #4
 800250c:	d003      	beq.n	8002516 <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	225d      	movs	r2, #93	; 0x5d
 8002512:	2105      	movs	r1, #5
 8002514:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1cba      	adds	r2, r7, #2
 8002526:	8812      	ldrh	r2, [r2, #0]
 8002528:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1cba      	adds	r2, r7, #2
 800252e:	8812      	ldrh	r2, [r2, #0]
 8002530:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1cba      	adds	r2, r7, #2
 800253c:	2144      	movs	r1, #68	; 0x44
 800253e:	8812      	ldrh	r2, [r2, #0]
 8002540:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1cba      	adds	r2, r7, #2
 8002546:	2146      	movs	r1, #70	; 0x46
 8002548:	8812      	ldrh	r2, [r2, #0]
 800254a:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	23e0      	movs	r3, #224	; 0xe0
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	429a      	cmp	r2, r3
 8002556:	d906      	bls.n	8002566 <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4a27      	ldr	r2, [pc, #156]	; (80025f8 <HAL_SPI_TransmitReceive_IT+0x184>)
 800255c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4a26      	ldr	r2, [pc, #152]	; (80025fc <HAL_SPI_TransmitReceive_IT+0x188>)
 8002562:	651a      	str	r2, [r3, #80]	; 0x50
 8002564:	e005      	b.n	8002572 <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4a25      	ldr	r2, [pc, #148]	; (8002600 <HAL_SPI_TransmitReceive_IT+0x18c>)
 800256a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4a25      	ldr	r2, [pc, #148]	; (8002604 <HAL_SPI_TransmitReceive_IT+0x190>)
 8002570:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount >= 2U))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	23e0      	movs	r3, #224	; 0xe0
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	429a      	cmp	r2, r3
 800257c:	d805      	bhi.n	800258a <HAL_SPI_TransmitReceive_IT+0x116>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2246      	movs	r2, #70	; 0x46
 8002582:	5a9b      	ldrh	r3, [r3, r2]
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b01      	cmp	r3, #1
 8002588:	d908      	bls.n	800259c <HAL_SPI_TransmitReceive_IT+0x128>
  {
    /* Set fiforxthresold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	491c      	ldr	r1, [pc, #112]	; (8002608 <HAL_SPI_TransmitReceive_IT+0x194>)
 8002596:	400a      	ands	r2, r1
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	e008      	b.n	80025ae <HAL_SPI_TransmitReceive_IT+0x13a>
  }
  else
  {
    /* Set fiforxthresold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2180      	movs	r1, #128	; 0x80
 80025a8:	0149      	lsls	r1, r1, #5
 80025aa:	430a      	orrs	r2, r1
 80025ac:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	21e0      	movs	r1, #224	; 0xe0
 80025ba:	430a      	orrs	r2, r1
 80025bc:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2240      	movs	r2, #64	; 0x40
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b40      	cmp	r3, #64	; 0x40
 80025ca:	d008      	beq.n	80025de <HAL_SPI_TransmitReceive_IT+0x16a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2140      	movs	r1, #64	; 0x40
 80025d8:	430a      	orrs	r2, r1
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	e000      	b.n	80025e0 <HAL_SPI_TransmitReceive_IT+0x16c>
  }

error :
 80025de:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	225c      	movs	r2, #92	; 0x5c
 80025e4:	2100      	movs	r1, #0
 80025e6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80025e8:	231f      	movs	r3, #31
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	781b      	ldrb	r3, [r3, #0]
}
 80025ee:	0018      	movs	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b008      	add	sp, #32
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	08002947 	.word	0x08002947
 80025fc:	080029af 	.word	0x080029af
 8002600:	080027f9 	.word	0x080027f9
 8002604:	080028b7 	.word	0x080028b7
 8002608:	ffffefff 	.word	0xffffefff

0800260c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2240      	movs	r2, #64	; 0x40
 8002628:	4013      	ands	r3, r2
 800262a:	d10d      	bne.n	8002648 <HAL_SPI_IRQHandler+0x3c>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2201      	movs	r2, #1
 8002630:	4013      	ands	r3, r2
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8002632:	d009      	beq.n	8002648 <HAL_SPI_IRQHandler+0x3c>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	2240      	movs	r2, #64	; 0x40
 8002638:	4013      	ands	r3, r2
 800263a:	d005      	beq.n	8002648 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	0010      	movs	r0, r2
 8002644:	4798      	blx	r3
    return;
 8002646:	e0ac      	b.n	80027a2 <HAL_SPI_IRQHandler+0x196>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	2202      	movs	r2, #2
 800264c:	4013      	ands	r3, r2
 800264e:	d009      	beq.n	8002664 <HAL_SPI_IRQHandler+0x58>
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	2280      	movs	r2, #128	; 0x80
 8002654:	4013      	ands	r3, r2
 8002656:	d005      	beq.n	8002664 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	0010      	movs	r0, r2
 8002660:	4798      	blx	r3
    return;
 8002662:	e09e      	b.n	80027a2 <HAL_SPI_IRQHandler+0x196>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	23b0      	movs	r3, #176	; 0xb0
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	4013      	ands	r3, r2
 800266c:	d100      	bne.n	8002670 <HAL_SPI_IRQHandler+0x64>
 800266e:	e098      	b.n	80027a2 <HAL_SPI_IRQHandler+0x196>
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	2220      	movs	r2, #32
 8002674:	4013      	ands	r3, r2
 8002676:	d100      	bne.n	800267a <HAL_SPI_IRQHandler+0x6e>
 8002678:	e093      	b.n	80027a2 <HAL_SPI_IRQHandler+0x196>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((itflag & SPI_FLAG_OVR) != RESET)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	2240      	movs	r2, #64	; 0x40
 800267e:	4013      	ands	r3, r2
 8002680:	d023      	beq.n	80026ca <HAL_SPI_IRQHandler+0xbe>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	225d      	movs	r2, #93	; 0x5d
 8002686:	5c9b      	ldrb	r3, [r3, r2]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b03      	cmp	r3, #3
 800268c:	d011      	beq.n	80026b2 <HAL_SPI_IRQHandler+0xa6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002692:	2204      	movs	r2, #4
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	e00b      	b.n	80026ca <HAL_SPI_IRQHandler+0xbe>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	693b      	ldr	r3, [r7, #16]
        return;
 80026c8:	e06b      	b.n	80027a2 <HAL_SPI_IRQHandler+0x196>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((itflag & SPI_FLAG_MODF) != RESET)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2220      	movs	r2, #32
 80026ce:	4013      	ands	r3, r2
 80026d0:	d014      	beq.n	80026fc <HAL_SPI_IRQHandler+0xf0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d6:	2201      	movs	r2, #1
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2140      	movs	r1, #64	; 0x40
 80026f6:	438a      	bics	r2, r1
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((itflag & SPI_FLAG_FRE) != RESET)
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4013      	ands	r3, r2
 8002704:	d00c      	beq.n	8002720 <HAL_SPI_IRQHandler+0x114>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270a:	2208      	movs	r2, #8
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002724:	2b00      	cmp	r3, #0
 8002726:	d03b      	beq.n	80027a0 <HAL_SPI_IRQHandler+0x194>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	21e0      	movs	r1, #224	; 0xe0
 8002734:	438a      	bics	r2, r1
 8002736:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	225d      	movs	r2, #93	; 0x5d
 800273c:	2101      	movs	r1, #1
 800273e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	2202      	movs	r2, #2
 8002744:	4013      	ands	r3, r2
 8002746:	d103      	bne.n	8002750 <HAL_SPI_IRQHandler+0x144>
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	2201      	movs	r2, #1
 800274c:	4013      	ands	r3, r2
 800274e:	d022      	beq.n	8002796 <HAL_SPI_IRQHandler+0x18a>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2103      	movs	r1, #3
 800275c:	438a      	bics	r2, r1
 800275e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_SPI_IRQHandler+0x16e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276c:	4a0e      	ldr	r2, [pc, #56]	; (80027a8 <HAL_SPI_IRQHandler+0x19c>)
 800276e:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002774:	0018      	movs	r0, r3
 8002776:	f7fe feed 	bl	8001554 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00e      	beq.n	80027a0 <HAL_SPI_IRQHandler+0x194>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	4a08      	ldr	r2, [pc, #32]	; (80027a8 <HAL_SPI_IRQHandler+0x19c>)
 8002788:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278e:	0018      	movs	r0, r3
 8002790:	f7fe fee0 	bl	8001554 <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 8002794:	e004      	b.n	80027a0 <HAL_SPI_IRQHandler+0x194>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	0018      	movs	r0, r3
 800279a:	f000 f80f 	bl	80027bc <HAL_SPI_ErrorCallback>
      }
    }
    return;
 800279e:	e7ff      	b.n	80027a0 <HAL_SPI_IRQHandler+0x194>
 80027a0:	46c0      	nop			; (mov r8, r8)
  }
}
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b008      	add	sp, #32
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	080027cd 	.word	0x080027cd

080027ac <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80027b4:	46c0      	nop			; (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b002      	add	sp, #8
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80027c4:	46c0      	nop			; (mov r8, r8)
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b002      	add	sp, #8
 80027ca:	bd80      	pop	{r7, pc}

080027cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2246      	movs	r2, #70	; 0x46
 80027de:	2100      	movs	r1, #0
 80027e0:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	0018      	movs	r0, r3
 80027ec:	f7ff ffe6 	bl	80027bc <HAL_SPI_ErrorCallback>
}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b004      	add	sp, #16
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2246      	movs	r2, #70	; 0x46
 8002804:	5a9b      	ldrh	r3, [r3, r2]
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b01      	cmp	r3, #1
 800280a:	d924      	bls.n	8002856 <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	b292      	uxth	r2, r2
 8002818:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	1c9a      	adds	r2, r3, #2
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2246      	movs	r2, #70	; 0x46
 8002828:	5a9b      	ldrh	r3, [r3, r2]
 800282a:	b29b      	uxth	r3, r3
 800282c:	3b02      	subs	r3, #2
 800282e:	b299      	uxth	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2246      	movs	r2, #70	; 0x46
 8002834:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2246      	movs	r2, #70	; 0x46
 800283a:	5a9b      	ldrh	r3, [r3, r2]
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d11e      	bne.n	8002880 <SPI_2linesRxISR_8BIT+0x88>
    {
      /* set fiforxthresold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2180      	movs	r1, #128	; 0x80
 800284e:	0149      	lsls	r1, r1, #5
 8002850:	430a      	orrs	r2, r1
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	e014      	b.n	8002880 <SPI_2linesRxISR_8BIT+0x88>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr++ = *((__IO uint8_t *)&hspi->Instance->DR);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	330c      	adds	r3, #12
 800285c:	0019      	movs	r1, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	1c58      	adds	r0, r3, #1
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6410      	str	r0, [r2, #64]	; 0x40
 8002868:	780a      	ldrb	r2, [r1, #0]
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]
    hspi->RxXferCount--;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2246      	movs	r2, #70	; 0x46
 8002872:	5a9b      	ldrh	r3, [r3, r2]
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	b299      	uxth	r1, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2246      	movs	r2, #70	; 0x46
 800287e:	5299      	strh	r1, [r3, r2]
  }

  /* check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2246      	movs	r2, #70	; 0x46
 8002884:	5a9b      	ldrh	r3, [r3, r2]
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d110      	bne.n	80028ae <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2160      	movs	r1, #96	; 0x60
 8002898:	438a      	bics	r2, r1
 800289a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d103      	bne.n	80028ae <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f000 f9df 	bl	8002c6c <SPI_CloseRxTx_ISR>
    }
  }
}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b002      	add	sp, #8
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d912      	bls.n	80028ee <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	881a      	ldrh	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d8:	1c9a      	adds	r2, r3, #2
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b02      	subs	r3, #2
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028ec:	e010      	b.n	8002910 <SPI_2linesTxISR_8BIT+0x5a>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	1c59      	adds	r1, r3, #1
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6391      	str	r1, [r2, #56]	; 0x38
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	320c      	adds	r2, #12
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	7013      	strb	r3, [r2, #0]
    hspi->TxXferCount--;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d111      	bne.n	800293e <SPI_2linesTxISR_8BIT+0x88>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2180      	movs	r1, #128	; 0x80
 8002926:	438a      	bics	r2, r1
 8002928:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2246      	movs	r2, #70	; 0x46
 800292e:	5a9b      	ldrh	r3, [r3, r2]
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d103      	bne.n	800293e <SPI_2linesTxISR_8BIT+0x88>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	0018      	movs	r0, r3
 800293a:	f000 f997 	bl	8002c6c <SPI_CloseRxTx_ISR>
    }
  }
}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	46bd      	mov	sp, r7
 8002942:	b002      	add	sp, #8
 8002944:	bd80      	pop	{r7, pc}

08002946 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	b292      	uxth	r2, r2
 800295a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	1c9a      	adds	r2, r3, #2
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2246      	movs	r2, #70	; 0x46
 800296a:	5a9b      	ldrh	r3, [r3, r2]
 800296c:	b29b      	uxth	r3, r3
 800296e:	3b01      	subs	r3, #1
 8002970:	b299      	uxth	r1, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2246      	movs	r2, #70	; 0x46
 8002976:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2246      	movs	r2, #70	; 0x46
 800297c:	5a9b      	ldrh	r3, [r3, r2]
 800297e:	b29b      	uxth	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d110      	bne.n	80029a6 <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2140      	movs	r1, #64	; 0x40
 8002990:	438a      	bics	r2, r1
 8002992:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d103      	bne.n	80029a6 <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	0018      	movs	r0, r3
 80029a2:	f000 f963 	bl	8002c6c <SPI_CloseRxTx_ISR>
    }
  }
}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b002      	add	sp, #8
 80029ac:	bd80      	pop	{r7, pc}

080029ae <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ba:	881a      	ldrh	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c6:	1c9a      	adds	r2, r3, #2
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d111      	bne.n	8002a08 <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2180      	movs	r1, #128	; 0x80
 80029f0:	438a      	bics	r2, r1
 80029f2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2246      	movs	r2, #70	; 0x46
 80029f8:	5a9b      	ldrh	r3, [r3, r2]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d103      	bne.n	8002a08 <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	0018      	movs	r0, r3
 8002a04:	f000 f932 	bl	8002c6c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002a08:	46c0      	nop			; (mov r8, r8)
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b002      	add	sp, #8
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a1e:	e050      	b.n	8002ac2 <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	3301      	adds	r3, #1
 8002a24:	d04d      	beq.n	8002ac2 <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d007      	beq.n	8002a3c <SPI_WaitFlagStateUntilTimeout+0x2c>
 8002a2c:	f7fe fc5a 	bl	80012e4 <HAL_GetTick>
 8002a30:	0002      	movs	r2, r0
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d842      	bhi.n	8002ac2 <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	21e0      	movs	r1, #224	; 0xe0
 8002a48:	438a      	bics	r2, r1
 8002a4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	2382      	movs	r3, #130	; 0x82
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d113      	bne.n	8002a80 <SPI_WaitFlagStateUntilTimeout+0x70>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d005      	beq.n	8002a70 <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	2380      	movs	r3, #128	; 0x80
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d107      	bne.n	8002a80 <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2140      	movs	r1, #64	; 0x40
 8002a7c:	438a      	bics	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	019b      	lsls	r3, r3, #6
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d110      	bne.n	8002aae <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4914      	ldr	r1, [pc, #80]	; (8002ae8 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 8002a98:	400a      	ands	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2180      	movs	r1, #128	; 0x80
 8002aa8:	0189      	lsls	r1, r1, #6
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	225d      	movs	r2, #93	; 0x5d
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	225c      	movs	r2, #92	; 0x5c
 8002aba:	2100      	movs	r1, #0
 8002abc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e00e      	b.n	8002ae0 <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	4013      	ands	r3, r2
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d101      	bne.n	8002ad6 <SPI_WaitFlagStateUntilTimeout+0xc6>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <SPI_WaitFlagStateUntilTimeout+0xc8>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d1a0      	bne.n	8002a20 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b004      	add	sp, #16
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	ffffdfff 	.word	0xffffdfff

08002aec <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8002afa:	e062      	b.n	8002bc2 <SPI_WaitFifoStateUntilTimeout+0xd6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	23c0      	movs	r3, #192	; 0xc0
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d10c      	bne.n	8002b20 <SPI_WaitFifoStateUntilTimeout+0x34>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d109      	bne.n	8002b20 <SPI_WaitFifoStateUntilTimeout+0x34>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	330c      	adds	r3, #12
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	2117      	movs	r1, #23
 8002b18:	187b      	adds	r3, r7, r1
 8002b1a:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002b1c:	187b      	adds	r3, r7, r1
 8002b1e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	3301      	adds	r3, #1
 8002b24:	d04d      	beq.n	8002bc2 <SPI_WaitFifoStateUntilTimeout+0xd6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d007      	beq.n	8002b3c <SPI_WaitFifoStateUntilTimeout+0x50>
 8002b2c:	f7fe fbda 	bl	80012e4 <HAL_GetTick>
 8002b30:	0002      	movs	r2, r0
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d842      	bhi.n	8002bc2 <SPI_WaitFifoStateUntilTimeout+0xd6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	21e0      	movs	r1, #224	; 0xe0
 8002b48:	438a      	bics	r2, r1
 8002b4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	2382      	movs	r3, #130	; 0x82
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d113      	bne.n	8002b80 <SPI_WaitFifoStateUntilTimeout+0x94>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	2380      	movs	r3, #128	; 0x80
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d005      	beq.n	8002b70 <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	2380      	movs	r3, #128	; 0x80
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d107      	bne.n	8002b80 <SPI_WaitFifoStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2140      	movs	r1, #64	; 0x40
 8002b7c:	438a      	bics	r2, r1
 8002b7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	019b      	lsls	r3, r3, #6
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d110      	bne.n	8002bae <SPI_WaitFifoStateUntilTimeout+0xc2>
        {
          SPI_RESET_CRC(hspi);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4911      	ldr	r1, [pc, #68]	; (8002bdc <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8002b98:	400a      	ands	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2180      	movs	r1, #128	; 0x80
 8002ba8:	0189      	lsls	r1, r1, #6
 8002baa:	430a      	orrs	r2, r1
 8002bac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	225d      	movs	r2, #93	; 0x5d
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	225c      	movs	r2, #92	; 0x5c
 8002bba:	2100      	movs	r1, #0
 8002bbc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e008      	b.n	8002bd4 <SPI_WaitFifoStateUntilTimeout+0xe8>
  while ((hspi->Instance->SR & Fifo) != State)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d194      	bne.n	8002afc <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b006      	add	sp, #24
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	ffffdfff 	.word	0xffffdfff

08002be0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	23c0      	movs	r3, #192	; 0xc0
 8002bf0:	0159      	lsls	r1, r3, #5
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	0013      	movs	r3, r2
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f7ff ff76 	bl	8002aec <SPI_WaitFifoStateUntilTimeout>
 8002c00:	1e03      	subs	r3, r0, #0
 8002c02:	d007      	beq.n	8002c14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c08:	2220      	movs	r2, #32
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e027      	b.n	8002c64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	0013      	movs	r3, r2
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2180      	movs	r1, #128	; 0x80
 8002c22:	f7ff fef5 	bl	8002a10 <SPI_WaitFlagStateUntilTimeout>
 8002c26:	1e03      	subs	r3, r0, #0
 8002c28:	d007      	beq.n	8002c3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c2e:	2220      	movs	r2, #32
 8002c30:	431a      	orrs	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e014      	b.n	8002c64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	23c0      	movs	r3, #192	; 0xc0
 8002c3e:	00d9      	lsls	r1, r3, #3
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	0013      	movs	r3, r2
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f7ff ff4f 	bl	8002aec <SPI_WaitFifoStateUntilTimeout>
 8002c4e:	1e03      	subs	r3, r0, #0
 8002c50:	d007      	beq.n	8002c62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c56:	2220      	movs	r2, #32
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e000      	b.n	8002c64 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	0018      	movs	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b004      	add	sp, #16
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002c78:	f7fe fb34 	bl	80012e4 <HAL_GetTick>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2120      	movs	r1, #32
 8002c8c:	438a      	bics	r2, r1
 8002c8e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2164      	movs	r1, #100	; 0x64
 8002c96:	0018      	movs	r0, r3
 8002c98:	f7ff ffa2 	bl	8002be0 <SPI_EndRxTxTransaction>
 8002c9c:	1e03      	subs	r3, r0, #0
 8002c9e:	d005      	beq.n	8002cac <SPI_CloseRxTx_ISR+0x40>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	661a      	str	r2, [r3, #96]	; 0x60
    HAL_SPI_ErrorCallback(hspi);
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d117      	bne.n	8002ce4 <SPI_CloseRxTx_ISR+0x78>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	225d      	movs	r2, #93	; 0x5d
 8002cb8:	5c9b      	ldrb	r3, [r3, r2]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d108      	bne.n	8002cd2 <SPI_CloseRxTx_ISR+0x66>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	225d      	movs	r2, #93	; 0x5d
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	5499      	strb	r1, [r3, r2]
        HAL_SPI_RxCpltCallback(hspi);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f7ff fd6e 	bl	80027ac <HAL_SPI_RxCpltCallback>
      HAL_SPI_ErrorCallback(hspi);
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002cd0:	e010      	b.n	8002cf4 <SPI_CloseRxTx_ISR+0x88>
        hspi->State = HAL_SPI_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	225d      	movs	r2, #93	; 0x5d
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f7fd fbf7 	bl	80004d0 <HAL_SPI_TxRxCpltCallback>
}
 8002ce2:	e007      	b.n	8002cf4 <SPI_CloseRxTx_ISR+0x88>
      hspi->State = HAL_SPI_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	225d      	movs	r2, #93	; 0x5d
 8002ce8:	2101      	movs	r1, #1
 8002cea:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f7ff fd64 	bl	80027bc <HAL_SPI_ErrorCallback>
}
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b004      	add	sp, #16
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e01e      	b.n	8002d4c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	223d      	movs	r2, #61	; 0x3d
 8002d12:	5c9b      	ldrb	r3, [r3, r2]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d107      	bne.n	8002d2a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	223c      	movs	r2, #60	; 0x3c
 8002d1e:	2100      	movs	r1, #0
 8002d20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	0018      	movs	r0, r3
 8002d26:	f7fe f969 	bl	8000ffc <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	223d      	movs	r2, #61	; 0x3d
 8002d2e:	2102      	movs	r1, #2
 8002d30:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	0010      	movs	r0, r2
 8002d3e:	f000 f959 	bl	8002ff4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	223d      	movs	r2, #61	; 0x3d
 8002d46:	2101      	movs	r1, #1
 8002d48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b002      	add	sp, #8
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2101      	movs	r1, #1
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2101      	movs	r1, #1
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	0018      	movs	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b002      	add	sp, #8
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	2202      	movs	r2, #2
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d124      	bne.n	8002de6 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2202      	movs	r2, #2
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d11d      	bne.n	8002de6 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2203      	movs	r2, #3
 8002db0:	4252      	negs	r2, r2
 8002db2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f000 f8fa 	bl	8002fc2 <HAL_TIM_IC_CaptureCallback>
 8002dce:	e007      	b.n	8002de0 <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f000 f8ed 	bl	8002fb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f000 f8f9 	bl	8002fd2 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	2204      	movs	r2, #4
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d125      	bne.n	8002e40 <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d11e      	bne.n	8002e40 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2205      	movs	r2, #5
 8002e08:	4252      	negs	r2, r2
 8002e0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699a      	ldr	r2, [r3, #24]
 8002e18:	23c0      	movs	r3, #192	; 0xc0
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d004      	beq.n	8002e2a <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	0018      	movs	r0, r3
 8002e24:	f000 f8cd 	bl	8002fc2 <HAL_TIM_IC_CaptureCallback>
 8002e28:	e007      	b.n	8002e3a <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f000 f8c0 	bl	8002fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f000 f8cc 	bl	8002fd2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	2208      	movs	r2, #8
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d124      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2208      	movs	r2, #8
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d11d      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2209      	movs	r2, #9
 8002e62:	4252      	negs	r2, r2
 8002e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2204      	movs	r2, #4
 8002e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	2203      	movs	r2, #3
 8002e74:	4013      	ands	r3, r2
 8002e76:	d004      	beq.n	8002e82 <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 f8a1 	bl	8002fc2 <HAL_TIM_IC_CaptureCallback>
 8002e80:	e007      	b.n	8002e92 <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	0018      	movs	r0, r3
 8002e86:	f000 f894 	bl	8002fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f000 f8a0 	bl	8002fd2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2210      	movs	r2, #16
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b10      	cmp	r3, #16
 8002ea4:	d125      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2210      	movs	r2, #16
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b10      	cmp	r3, #16
 8002eb2:	d11e      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2211      	movs	r2, #17
 8002eba:	4252      	negs	r2, r2
 8002ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2208      	movs	r2, #8
 8002ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	23c0      	movs	r3, #192	; 0xc0
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d004      	beq.n	8002edc <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f000 f874 	bl	8002fc2 <HAL_TIM_IC_CaptureCallback>
 8002eda:	e007      	b.n	8002eec <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f000 f867 	bl	8002fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f000 f873 	bl	8002fd2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d10f      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d108      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2202      	movs	r2, #2
 8002f14:	4252      	negs	r2, r2
 8002f16:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f7fd fae6 	bl	80004ec <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2280      	movs	r2, #128	; 0x80
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b80      	cmp	r3, #128	; 0x80
 8002f2c:	d10f      	bne.n	8002f4e <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2280      	movs	r2, #128	; 0x80
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b80      	cmp	r3, #128	; 0x80
 8002f3a:	d108      	bne.n	8002f4e <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2281      	movs	r2, #129	; 0x81
 8002f42:	4252      	negs	r2, r2
 8002f44:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f000 f8d3 	bl	80030f4 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2240      	movs	r2, #64	; 0x40
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b40      	cmp	r3, #64	; 0x40
 8002f5a:	d10f      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2240      	movs	r2, #64	; 0x40
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b40      	cmp	r3, #64	; 0x40
 8002f68:	d108      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2241      	movs	r2, #65	; 0x41
 8002f70:	4252      	negs	r2, r2
 8002f72:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	0018      	movs	r0, r3
 8002f78:	f000 f833 	bl	8002fe2 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2220      	movs	r2, #32
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	d10f      	bne.n	8002faa <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	d108      	bne.n	8002faa <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2221      	movs	r2, #33	; 0x21
 8002f9e:	4252      	negs	r2, r2
 8002fa0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f000 f89d 	bl	80030e4 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b002      	add	sp, #8
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b002      	add	sp, #8
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b002      	add	sp, #8
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b002      	add	sp, #8
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b002      	add	sp, #8
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a2f      	ldr	r2, [pc, #188]	; (80030c8 <TIM_Base_SetConfig+0xd4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d003      	beq.n	8003018 <TIM_Base_SetConfig+0x24>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a2e      	ldr	r2, [pc, #184]	; (80030cc <TIM_Base_SetConfig+0xd8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d108      	bne.n	800302a <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2270      	movs	r2, #112	; 0x70
 800301c:	4393      	bics	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a26      	ldr	r2, [pc, #152]	; (80030c8 <TIM_Base_SetConfig+0xd4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d013      	beq.n	800305a <TIM_Base_SetConfig+0x66>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a25      	ldr	r2, [pc, #148]	; (80030cc <TIM_Base_SetConfig+0xd8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00f      	beq.n	800305a <TIM_Base_SetConfig+0x66>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a24      	ldr	r2, [pc, #144]	; (80030d0 <TIM_Base_SetConfig+0xdc>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00b      	beq.n	800305a <TIM_Base_SetConfig+0x66>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a23      	ldr	r2, [pc, #140]	; (80030d4 <TIM_Base_SetConfig+0xe0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d007      	beq.n	800305a <TIM_Base_SetConfig+0x66>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a22      	ldr	r2, [pc, #136]	; (80030d8 <TIM_Base_SetConfig+0xe4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d003      	beq.n	800305a <TIM_Base_SetConfig+0x66>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a21      	ldr	r2, [pc, #132]	; (80030dc <TIM_Base_SetConfig+0xe8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d108      	bne.n	800306c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4a20      	ldr	r2, [pc, #128]	; (80030e0 <TIM_Base_SetConfig+0xec>)
 800305e:	4013      	ands	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4313      	orrs	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2280      	movs	r2, #128	; 0x80
 8003070:	4393      	bics	r3, r2
 8003072:	001a      	movs	r2, r3
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a0c      	ldr	r2, [pc, #48]	; (80030c8 <TIM_Base_SetConfig+0xd4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00b      	beq.n	80030b2 <TIM_Base_SetConfig+0xbe>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a0d      	ldr	r2, [pc, #52]	; (80030d4 <TIM_Base_SetConfig+0xe0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d007      	beq.n	80030b2 <TIM_Base_SetConfig+0xbe>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a0c      	ldr	r2, [pc, #48]	; (80030d8 <TIM_Base_SetConfig+0xe4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d003      	beq.n	80030b2 <TIM_Base_SetConfig+0xbe>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a0b      	ldr	r2, [pc, #44]	; (80030dc <TIM_Base_SetConfig+0xe8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d103      	bne.n	80030ba <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	615a      	str	r2, [r3, #20]
}
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b004      	add	sp, #16
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40000400 	.word	0x40000400
 80030d0:	40002000 	.word	0x40002000
 80030d4:	40014000 	.word	0x40014000
 80030d8:	40014400 	.word	0x40014400
 80030dc:	40014800 	.word	0x40014800
 80030e0:	fffffcff 	.word	0xfffffcff

080030e4 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b002      	add	sp, #8
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030fc:	46c0      	nop			; (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e047      	b.n	80031a6 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2269      	movs	r2, #105	; 0x69
 800311a:	5c9b      	ldrb	r3, [r3, r2]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d107      	bne.n	8003132 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2268      	movs	r2, #104	; 0x68
 8003126:	2100      	movs	r1, #0
 8003128:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	0018      	movs	r0, r3
 800312e:	f7fd ff8b 	bl	8001048 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2269      	movs	r2, #105	; 0x69
 8003136:	2124      	movs	r1, #36	; 0x24
 8003138:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2101      	movs	r1, #1
 8003146:	438a      	bics	r2, r1
 8003148:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	0018      	movs	r0, r3
 800314e:	f000 fa7f 	bl	8003650 <UART_SetConfig>
 8003152:	0003      	movs	r3, r0
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e024      	b.n	80031a6 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	0018      	movs	r0, r3
 8003168:	f000 fbea 	bl	8003940 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	490e      	ldr	r1, [pc, #56]	; (80031b0 <HAL_UART_Init+0xac>)
 8003178:	400a      	ands	r2, r1
 800317a:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2108      	movs	r1, #8
 8003188:	438a      	bics	r2, r1
 800318a:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2101      	movs	r1, #1
 8003198:	430a      	orrs	r2, r1
 800319a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	0018      	movs	r0, r3
 80031a0:	f000 fc82 	bl	8003aa8 <UART_CheckIdleState>
 80031a4:	0003      	movs	r3, r0
}
 80031a6:	0018      	movs	r0, r3
 80031a8:	46bd      	mov	sp, r7
 80031aa:	b002      	add	sp, #8
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	fffff7ff 	.word	0xfffff7ff

080031b4 <HAL_UART_Transmit_IT>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	1dbb      	adds	r3, r7, #6
 80031c0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2269      	movs	r2, #105	; 0x69
 80031c6:	5c9b      	ldrb	r3, [r3, r2]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	d145      	bne.n	800325a <HAL_UART_Transmit_IT+0xa6>
  {
    if((pData == NULL ) || (Size == 0U))
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_UART_Transmit_IT+0x28>
 80031d4:	1dbb      	adds	r3, r7, #6
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e03d      	b.n	800325c <HAL_UART_Transmit_IT+0xa8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	2380      	movs	r3, #128	; 0x80
 80031e6:	015b      	lsls	r3, r3, #5
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d109      	bne.n	8003200 <HAL_UART_Transmit_IT+0x4c>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d105      	bne.n	8003200 <HAL_UART_Transmit_IT+0x4c>
    {
      if((((uint32_t)pData)&1U) != 0U)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2201      	movs	r2, #1
 80031f8:	4013      	ands	r3, r2
 80031fa:	d001      	beq.n	8003200 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e02d      	b.n	800325c <HAL_UART_Transmit_IT+0xa8>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2268      	movs	r2, #104	; 0x68
 8003204:	5c9b      	ldrb	r3, [r3, r2]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_UART_Transmit_IT+0x5a>
 800320a:	2302      	movs	r3, #2
 800320c:	e026      	b.n	800325c <HAL_UART_Transmit_IT+0xa8>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2268      	movs	r2, #104	; 0x68
 8003212:	2101      	movs	r1, #1
 8003214:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr = pData;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1dba      	adds	r2, r7, #6
 8003220:	2150      	movs	r1, #80	; 0x50
 8003222:	8812      	ldrh	r2, [r2, #0]
 8003224:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1dba      	adds	r2, r7, #6
 800322a:	2152      	movs	r1, #82	; 0x52
 800322c:	8812      	ldrh	r2, [r2, #0]
 800322e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2269      	movs	r2, #105	; 0x69
 800323a:	2121      	movs	r1, #33	; 0x21
 800323c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2268      	movs	r2, #104	; 0x68
 8003242:	2100      	movs	r1, #0
 8003244:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2180      	movs	r1, #128	; 0x80
 8003252:	430a      	orrs	r2, r1
 8003254:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	e000      	b.n	800325c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800325a:	2302      	movs	r3, #2
  }
}
 800325c:	0018      	movs	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	b004      	add	sp, #16
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_UART_Receive_IT>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	1dbb      	adds	r3, r7, #6
 8003270:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	226a      	movs	r2, #106	; 0x6a
 8003276:	5c9b      	ldrb	r3, [r3, r2]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b20      	cmp	r3, #32
 800327c:	d000      	beq.n	8003280 <HAL_UART_Receive_IT+0x1c>
 800327e:	e073      	b.n	8003368 <HAL_UART_Receive_IT+0x104>
  {
    if((pData == NULL ) || (Size == 0U))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_UART_Receive_IT+0x2a>
 8003286:	1dbb      	adds	r3, r7, #6
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_UART_Receive_IT+0x2e>
    {
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e06b      	b.n	800336a <HAL_UART_Receive_IT+0x106>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	015b      	lsls	r3, r3, #5
 800329a:	429a      	cmp	r2, r3
 800329c:	d109      	bne.n	80032b2 <HAL_UART_Receive_IT+0x4e>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d105      	bne.n	80032b2 <HAL_UART_Receive_IT+0x4e>
    {
      if((((uint32_t)pData)&1U) != 0U)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2201      	movs	r2, #1
 80032aa:	4013      	ands	r3, r2
 80032ac:	d001      	beq.n	80032b2 <HAL_UART_Receive_IT+0x4e>
      {
        return  HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e05b      	b.n	800336a <HAL_UART_Receive_IT+0x106>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2268      	movs	r2, #104	; 0x68
 80032b6:	5c9b      	ldrb	r3, [r3, r2]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_UART_Receive_IT+0x5c>
 80032bc:	2302      	movs	r3, #2
 80032be:	e054      	b.n	800336a <HAL_UART_Receive_IT+0x106>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2268      	movs	r2, #104	; 0x68
 80032c4:	2101      	movs	r1, #1
 80032c6:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1dba      	adds	r2, r7, #6
 80032d2:	2158      	movs	r1, #88	; 0x58
 80032d4:	8812      	ldrh	r2, [r2, #0]
 80032d6:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1dba      	adds	r2, r7, #6
 80032dc:	215a      	movs	r1, #90	; 0x5a
 80032de:	8812      	ldrh	r2, [r2, #0]
 80032e0:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	015b      	lsls	r3, r3, #5
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d10d      	bne.n	800330a <HAL_UART_Receive_IT+0xa6>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d104      	bne.n	8003300 <HAL_UART_Receive_IT+0x9c>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	225c      	movs	r2, #92	; 0x5c
 80032fa:	491e      	ldr	r1, [pc, #120]	; (8003374 <HAL_UART_Receive_IT+0x110>)
 80032fc:	5299      	strh	r1, [r3, r2]
 80032fe:	e015      	b.n	800332c <HAL_UART_Receive_IT+0xc8>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	225c      	movs	r2, #92	; 0x5c
 8003304:	21ff      	movs	r1, #255	; 0xff
 8003306:	5299      	strh	r1, [r3, r2]
 8003308:	e010      	b.n	800332c <HAL_UART_Receive_IT+0xc8>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10c      	bne.n	800332c <HAL_UART_Receive_IT+0xc8>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d104      	bne.n	8003324 <HAL_UART_Receive_IT+0xc0>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	225c      	movs	r2, #92	; 0x5c
 800331e:	21ff      	movs	r1, #255	; 0xff
 8003320:	5299      	strh	r1, [r3, r2]
 8003322:	e003      	b.n	800332c <HAL_UART_Receive_IT+0xc8>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	225c      	movs	r2, #92	; 0x5c
 8003328:	217f      	movs	r1, #127	; 0x7f
 800332a:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	226a      	movs	r2, #106	; 0x6a
 8003336:	2122      	movs	r1, #34	; 0x22
 8003338:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2268      	movs	r2, #104	; 0x68
 800333e:	2100      	movs	r1, #0
 8003340:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2101      	movs	r1, #1
 800334e:	430a      	orrs	r2, r1
 8003350:	609a      	str	r2, [r3, #8]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2190      	movs	r1, #144	; 0x90
 800335e:	0049      	lsls	r1, r1, #1
 8003360:	430a      	orrs	r2, r1
 8003362:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	e000      	b.n	800336a <HAL_UART_Receive_IT+0x106>
  }
  else
  {
    return HAL_BUSY;
 8003368:	2302      	movs	r3, #2
  }
}
 800336a:	0018      	movs	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	b004      	add	sp, #16
 8003370:	bd80      	pop	{r7, pc}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	000001ff 	.word	0x000001ff

08003378 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	492b      	ldr	r1, [pc, #172]	; (8003438 <HAL_UART_AbortReceive_IT+0xc0>)
 800338c:	400a      	ands	r2, r1
 800338e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2101      	movs	r1, #1
 800339c:	438a      	bics	r2, r1
 800339e:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2240      	movs	r2, #64	; 0x40
 80033a8:	4013      	ands	r3, r2
 80033aa:	d02f      	beq.n	800340c <HAL_UART_AbortReceive_IT+0x94>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2140      	movs	r1, #64	; 0x40
 80033b8:	438a      	bics	r2, r1
 80033ba:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if(huart->hdmarx != NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d012      	beq.n	80033ea <HAL_UART_AbortReceive_IT+0x72>
    {
      /* Set the UART DMA Abort callback : 
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033c8:	4a1c      	ldr	r2, [pc, #112]	; (800343c <HAL_UART_AbortReceive_IT+0xc4>)
 80033ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033d0:	0018      	movs	r0, r3
 80033d2:	f7fe f8bf 	bl	8001554 <HAL_DMA_Abort_IT>
 80033d6:	1e03      	subs	r3, r0, #0
 80033d8:	d028      	beq.n	800342c <HAL_UART_AbortReceive_IT+0xb4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033e4:	0018      	movs	r0, r3
 80033e6:	4790      	blx	r2
 80033e8:	e020      	b.n	800342c <HAL_UART_AbortReceive_IT+0xb4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U; 
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	225a      	movs	r2, #90	; 0x5a
 80033ee:	2100      	movs	r1, #0
 80033f0:	5299      	strh	r1, [r3, r2]

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	220f      	movs	r2, #15
 80033f8:	621a      	str	r2, [r3, #32]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	226a      	movs	r2, #106	; 0x6a
 80033fe:	2120      	movs	r1, #32
 8003400:	5499      	strb	r1, [r3, r2]

      /* As no DMA to be aborted, call directly user Abort complete callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	0018      	movs	r0, r3
 8003406:	f000 f91b 	bl	8003640 <HAL_UART_AbortReceiveCpltCallback>
 800340a:	e00f      	b.n	800342c <HAL_UART_AbortReceive_IT+0xb4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U; 
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	225a      	movs	r2, #90	; 0x5a
 8003410:	2100      	movs	r1, #0
 8003412:	5299      	strh	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	220f      	movs	r2, #15
 800341a:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	226a      	movs	r2, #106	; 0x6a
 8003420:	2120      	movs	r1, #32
 8003422:	5499      	strb	r1, [r3, r2]

    /* As no DMA to be aborted, call directly user Abort complete callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	0018      	movs	r0, r3
 8003428:	f000 f90a 	bl	8003640 <HAL_UART_AbortReceiveCpltCallback>
  }

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	0018      	movs	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	b002      	add	sp, #8
 8003434:	bd80      	pop	{r7, pc}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	fffffedf 	.word	0xfffffedf
 800343c:	08003b43 	.word	0x08003b43

08003440 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	220f      	movs	r2, #15
 800345c:	4013      	ands	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10c      	bne.n	8003480 <HAL_UART_IRQHandler+0x40>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2220      	movs	r2, #32
 800346a:	4013      	ands	r3, r2
 800346c:	d008      	beq.n	8003480 <HAL_UART_IRQHandler+0x40>
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	2220      	movs	r2, #32
 8003472:	4013      	ands	r3, r2
 8003474:	d004      	beq.n	8003480 <HAL_UART_IRQHandler+0x40>
    {
      UART_Receive_IT(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	0018      	movs	r0, r3
 800347a:	f000 fbed 	bl	8003c58 <UART_Receive_IT>
      return;
 800347e:	e0d2      	b.n	8003626 <HAL_UART_IRQHandler+0x1e6>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d100      	bne.n	8003490 <HAL_UART_IRQHandler+0x50>
 800348e:	e0af      	b.n	80035f0 <HAL_UART_IRQHandler+0x1b0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2201      	movs	r2, #1
 8003494:	4013      	ands	r3, r2
 8003496:	d105      	bne.n	80034a4 <HAL_UART_IRQHandler+0x64>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	2390      	movs	r3, #144	; 0x90
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	4013      	ands	r3, r2
 80034a0:	d100      	bne.n	80034a4 <HAL_UART_IRQHandler+0x64>
 80034a2:	e0a5      	b.n	80035f0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2201      	movs	r2, #1
 80034a8:	4013      	ands	r3, r2
 80034aa:	d00e      	beq.n	80034ca <HAL_UART_IRQHandler+0x8a>
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	4013      	ands	r3, r2
 80034b4:	d009      	beq.n	80034ca <HAL_UART_IRQHandler+0x8a>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2201      	movs	r2, #1
 80034bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034c2:	2201      	movs	r2, #1
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2202      	movs	r2, #2
 80034ce:	4013      	ands	r3, r2
 80034d0:	d00d      	beq.n	80034ee <HAL_UART_IRQHandler+0xae>
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2201      	movs	r2, #1
 80034d6:	4013      	ands	r3, r2
 80034d8:	d009      	beq.n	80034ee <HAL_UART_IRQHandler+0xae>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2202      	movs	r2, #2
 80034e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e6:	2204      	movs	r2, #4
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2204      	movs	r2, #4
 80034f2:	4013      	ands	r3, r2
 80034f4:	d00d      	beq.n	8003512 <HAL_UART_IRQHandler+0xd2>
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2201      	movs	r2, #1
 80034fa:	4013      	ands	r3, r2
 80034fc:	d009      	beq.n	8003512 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2204      	movs	r2, #4
 8003504:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800350a:	2202      	movs	r2, #2
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2208      	movs	r2, #8
 8003516:	4013      	ands	r3, r2
 8003518:	d011      	beq.n	800353e <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	2220      	movs	r2, #32
 800351e:	4013      	ands	r3, r2
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003520:	d103      	bne.n	800352a <HAL_UART_IRQHandler+0xea>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2201      	movs	r2, #1
 8003526:	4013      	ands	r3, r2
 8003528:	d009      	beq.n	800353e <HAL_UART_IRQHandler+0xfe>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2208      	movs	r2, #8
 8003530:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003536:	2208      	movs	r2, #8
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003542:	2b00      	cmp	r3, #0
 8003544:	d100      	bne.n	8003548 <HAL_UART_IRQHandler+0x108>
 8003546:	e06d      	b.n	8003624 <HAL_UART_IRQHandler+0x1e4>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	2220      	movs	r2, #32
 800354c:	4013      	ands	r3, r2
 800354e:	d007      	beq.n	8003560 <HAL_UART_IRQHandler+0x120>
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	2220      	movs	r2, #32
 8003554:	4013      	ands	r3, r2
 8003556:	d003      	beq.n	8003560 <HAL_UART_IRQHandler+0x120>
      {
        UART_Receive_IT(huart);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	0018      	movs	r0, r3
 800355c:	f000 fb7c 	bl	8003c58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003564:	2208      	movs	r2, #8
 8003566:	4013      	ands	r3, r2
 8003568:	d105      	bne.n	8003576 <HAL_UART_IRQHandler+0x136>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2240      	movs	r2, #64	; 0x40
 8003572:	4013      	ands	r3, r2
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003574:	d032      	beq.n	80035dc <HAL_UART_IRQHandler+0x19c>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	0018      	movs	r0, r3
 800357a:	f000 faad 	bl	8003ad8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2240      	movs	r2, #64	; 0x40
 8003586:	4013      	ands	r3, r2
 8003588:	d023      	beq.n	80035d2 <HAL_UART_IRQHandler+0x192>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2140      	movs	r1, #64	; 0x40
 8003596:	438a      	bics	r2, r1
 8003598:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d012      	beq.n	80035c8 <HAL_UART_IRQHandler+0x188>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035a6:	4a21      	ldr	r2, [pc, #132]	; (800362c <HAL_UART_IRQHandler+0x1ec>)
 80035a8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ae:	0018      	movs	r0, r3
 80035b0:	f7fd ffd0 	bl	8001554 <HAL_DMA_Abort_IT>
 80035b4:	1e03      	subs	r3, r0, #0
 80035b6:	d019      	beq.n	80035ec <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c2:	0018      	movs	r0, r3
 80035c4:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c6:	e011      	b.n	80035ec <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	0018      	movs	r0, r3
 80035cc:	f000 f830 	bl	8003630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d0:	e00c      	b.n	80035ec <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	0018      	movs	r0, r3
 80035d6:	f000 f82b 	bl	8003630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035da:	e007      	b.n	80035ec <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	0018      	movs	r0, r3
 80035e0:	f000 f826 	bl	8003630 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 80035ea:	e01b      	b.n	8003624 <HAL_UART_IRQHandler+0x1e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ec:	46c0      	nop			; (mov r8, r8)
    return;
 80035ee:	e019      	b.n	8003624 <HAL_UART_IRQHandler+0x1e4>
    return;
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2280      	movs	r2, #128	; 0x80
 80035f4:	4013      	ands	r3, r2
 80035f6:	d008      	beq.n	800360a <HAL_UART_IRQHandler+0x1ca>
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	4013      	ands	r3, r2
 80035fe:	d004      	beq.n	800360a <HAL_UART_IRQHandler+0x1ca>
  {
    UART_Transmit_IT(huart);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	0018      	movs	r0, r3
 8003604:	f000 fab8 	bl	8003b78 <UART_Transmit_IT>
    return;
 8003608:	e00d      	b.n	8003626 <HAL_UART_IRQHandler+0x1e6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2240      	movs	r2, #64	; 0x40
 800360e:	4013      	ands	r3, r2
 8003610:	d009      	beq.n	8003626 <HAL_UART_IRQHandler+0x1e6>
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	2240      	movs	r2, #64	; 0x40
 8003616:	4013      	ands	r3, r2
 8003618:	d005      	beq.n	8003626 <HAL_UART_IRQHandler+0x1e6>
  {
    UART_EndTransmit_IT(huart);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	0018      	movs	r0, r3
 800361e:	f000 fb02 	bl	8003c26 <UART_EndTransmit_IT>
    return;
 8003622:	e000      	b.n	8003626 <HAL_UART_IRQHandler+0x1e6>
    return;
 8003624:	46c0      	nop			; (mov r8, r8)
  }

}
 8003626:	46bd      	mov	sp, r7
 8003628:	b006      	add	sp, #24
 800362a:	bd80      	pop	{r7, pc}
 800362c:	08003b15 	.word	0x08003b15

08003630 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003638:	46c0      	nop			; (mov r8, r8)
 800363a:	46bd      	mov	sp, r7
 800363c:	b002      	add	sp, #8
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback (UART_HandleTypeDef *huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003648:	46c0      	nop			; (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	b002      	add	sp, #8
 800364e:	bd80      	pop	{r7, pc}

08003650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800365c:	2317      	movs	r3, #23
 800365e:	18fb      	adds	r3, r7, r3
 8003660:	2210      	movs	r2, #16
 8003662:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8003664:	230a      	movs	r3, #10
 8003666:	18fb      	adds	r3, r7, r3
 8003668:	2200      	movs	r2, #0
 800366a:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 800366c:	2314      	movs	r3, #20
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	2200      	movs	r2, #0
 8003672:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003674:	2313      	movs	r3, #19
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	4313      	orrs	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4aa1      	ldr	r2, [pc, #644]	; (8003920 <UART_SetConfig+0x2d0>)
 800369c:	4013      	ands	r3, r2
 800369e:	0019      	movs	r1, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4a9c      	ldr	r2, [pc, #624]	; (8003924 <UART_SetConfig+0x2d4>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	0019      	movs	r1, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	4a94      	ldr	r2, [pc, #592]	; (8003928 <UART_SetConfig+0x2d8>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	0019      	movs	r1, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a90      	ldr	r2, [pc, #576]	; (800392c <UART_SetConfig+0x2dc>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d127      	bne.n	800373e <UART_SetConfig+0xee>
 80036ee:	4b90      	ldr	r3, [pc, #576]	; (8003930 <UART_SetConfig+0x2e0>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	2203      	movs	r2, #3
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d00d      	beq.n	8003716 <UART_SetConfig+0xc6>
 80036fa:	d81b      	bhi.n	8003734 <UART_SetConfig+0xe4>
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d014      	beq.n	800372a <UART_SetConfig+0xda>
 8003700:	d818      	bhi.n	8003734 <UART_SetConfig+0xe4>
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <UART_SetConfig+0xbc>
 8003706:	2b01      	cmp	r3, #1
 8003708:	d00a      	beq.n	8003720 <UART_SetConfig+0xd0>
 800370a:	e013      	b.n	8003734 <UART_SetConfig+0xe4>
 800370c:	2317      	movs	r3, #23
 800370e:	18fb      	adds	r3, r7, r3
 8003710:	2200      	movs	r2, #0
 8003712:	701a      	strb	r2, [r3, #0]
 8003714:	e021      	b.n	800375a <UART_SetConfig+0x10a>
 8003716:	2317      	movs	r3, #23
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	2202      	movs	r2, #2
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	e01c      	b.n	800375a <UART_SetConfig+0x10a>
 8003720:	2317      	movs	r3, #23
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	2204      	movs	r2, #4
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	e017      	b.n	800375a <UART_SetConfig+0x10a>
 800372a:	2317      	movs	r3, #23
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	2208      	movs	r2, #8
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	e012      	b.n	800375a <UART_SetConfig+0x10a>
 8003734:	2317      	movs	r3, #23
 8003736:	18fb      	adds	r3, r7, r3
 8003738:	2210      	movs	r2, #16
 800373a:	701a      	strb	r2, [r3, #0]
 800373c:	e00d      	b.n	800375a <UART_SetConfig+0x10a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a7c      	ldr	r2, [pc, #496]	; (8003934 <UART_SetConfig+0x2e4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d104      	bne.n	8003752 <UART_SetConfig+0x102>
 8003748:	2317      	movs	r3, #23
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]
 8003750:	e003      	b.n	800375a <UART_SetConfig+0x10a>
 8003752:	2317      	movs	r3, #23
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	2210      	movs	r2, #16
 8003758:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	2380      	movs	r3, #128	; 0x80
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	429a      	cmp	r2, r3
 8003764:	d000      	beq.n	8003768 <UART_SetConfig+0x118>
 8003766:	e077      	b.n	8003858 <UART_SetConfig+0x208>
  {
    switch (clocksource)
 8003768:	2317      	movs	r3, #23
 800376a:	18fb      	adds	r3, r7, r3
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b08      	cmp	r3, #8
 8003770:	d041      	beq.n	80037f6 <UART_SetConfig+0x1a6>
 8003772:	dc52      	bgt.n	800381a <UART_SetConfig+0x1ca>
 8003774:	2b04      	cmp	r3, #4
 8003776:	d02a      	beq.n	80037ce <UART_SetConfig+0x17e>
 8003778:	dc4f      	bgt.n	800381a <UART_SetConfig+0x1ca>
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <UART_SetConfig+0x134>
 800377e:	2b02      	cmp	r3, #2
 8003780:	d014      	beq.n	80037ac <UART_SetConfig+0x15c>
 8003782:	e04a      	b.n	800381a <UART_SetConfig+0x1ca>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003784:	f7fe fdc6 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 8003788:	0003      	movs	r3, r0
 800378a:	005a      	lsls	r2, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	085b      	lsrs	r3, r3, #1
 8003792:	18d2      	adds	r2, r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	0019      	movs	r1, r3
 800379a:	0010      	movs	r0, r2
 800379c:	f7fc fcb4 	bl	8000108 <__udivsi3>
 80037a0:	0003      	movs	r3, r0
 80037a2:	001a      	movs	r2, r3
 80037a4:	2314      	movs	r3, #20
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	801a      	strh	r2, [r3, #0]
        break;
 80037aa:	e03b      	b.n	8003824 <UART_SetConfig+0x1d4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	4a61      	ldr	r2, [pc, #388]	; (8003938 <UART_SetConfig+0x2e8>)
 80037b4:	189a      	adds	r2, r3, r2
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	0019      	movs	r1, r3
 80037bc:	0010      	movs	r0, r2
 80037be:	f7fc fca3 	bl	8000108 <__udivsi3>
 80037c2:	0003      	movs	r3, r0
 80037c4:	001a      	movs	r2, r3
 80037c6:	2314      	movs	r3, #20
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	801a      	strh	r2, [r3, #0]
        break;
 80037cc:	e02a      	b.n	8003824 <UART_SetConfig+0x1d4>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80037ce:	f7fe fd33 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 80037d2:	0003      	movs	r3, r0
 80037d4:	005a      	lsls	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	18d2      	adds	r2, r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	0019      	movs	r1, r3
 80037e4:	0010      	movs	r0, r2
 80037e6:	f7fc fc8f 	bl	8000108 <__udivsi3>
 80037ea:	0003      	movs	r3, r0
 80037ec:	001a      	movs	r2, r3
 80037ee:	2314      	movs	r3, #20
 80037f0:	18fb      	adds	r3, r7, r3
 80037f2:	801a      	strh	r2, [r3, #0]
        break;
 80037f4:	e016      	b.n	8003824 <UART_SetConfig+0x1d4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	085b      	lsrs	r3, r3, #1
 80037fc:	2280      	movs	r2, #128	; 0x80
 80037fe:	0252      	lsls	r2, r2, #9
 8003800:	189a      	adds	r2, r3, r2
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	0019      	movs	r1, r3
 8003808:	0010      	movs	r0, r2
 800380a:	f7fc fc7d 	bl	8000108 <__udivsi3>
 800380e:	0003      	movs	r3, r0
 8003810:	001a      	movs	r2, r3
 8003812:	2314      	movs	r3, #20
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	801a      	strh	r2, [r3, #0]
        break;
 8003818:	e004      	b.n	8003824 <UART_SetConfig+0x1d4>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800381a:	2313      	movs	r3, #19
 800381c:	18fb      	adds	r3, r7, r3
 800381e:	2201      	movs	r2, #1
 8003820:	701a      	strb	r2, [r3, #0]
        break;
 8003822:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003824:	200a      	movs	r0, #10
 8003826:	183b      	adds	r3, r7, r0
 8003828:	2414      	movs	r4, #20
 800382a:	193a      	adds	r2, r7, r4
 800382c:	8812      	ldrh	r2, [r2, #0]
 800382e:	210f      	movs	r1, #15
 8003830:	438a      	bics	r2, r1
 8003832:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003834:	193b      	adds	r3, r7, r4
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	105b      	asrs	r3, r3, #1
 800383a:	b29b      	uxth	r3, r3
 800383c:	2207      	movs	r2, #7
 800383e:	4013      	ands	r3, r2
 8003840:	b299      	uxth	r1, r3
 8003842:	183b      	adds	r3, r7, r0
 8003844:	183a      	adds	r2, r7, r0
 8003846:	8812      	ldrh	r2, [r2, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	183a      	adds	r2, r7, r0
 8003852:	8812      	ldrh	r2, [r2, #0]
 8003854:	60da      	str	r2, [r3, #12]
 8003856:	e05b      	b.n	8003910 <UART_SetConfig+0x2c0>
  }
  else
  {
    switch (clocksource)
 8003858:	2317      	movs	r3, #23
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b08      	cmp	r3, #8
 8003860:	d03f      	beq.n	80038e2 <UART_SetConfig+0x292>
 8003862:	dc50      	bgt.n	8003906 <UART_SetConfig+0x2b6>
 8003864:	2b04      	cmp	r3, #4
 8003866:	d029      	beq.n	80038bc <UART_SetConfig+0x26c>
 8003868:	dc4d      	bgt.n	8003906 <UART_SetConfig+0x2b6>
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <UART_SetConfig+0x224>
 800386e:	2b02      	cmp	r3, #2
 8003870:	d013      	beq.n	800389a <UART_SetConfig+0x24a>
 8003872:	e048      	b.n	8003906 <UART_SetConfig+0x2b6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003874:	f7fe fd4e 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 8003878:	0002      	movs	r2, r0
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	085b      	lsrs	r3, r3, #1
 8003880:	18d2      	adds	r2, r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	0019      	movs	r1, r3
 8003888:	0010      	movs	r0, r2
 800388a:	f7fc fc3d 	bl	8000108 <__udivsi3>
 800388e:	0003      	movs	r3, r0
 8003890:	b29a      	uxth	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	60da      	str	r2, [r3, #12]
        break;
 8003898:	e03a      	b.n	8003910 <UART_SetConfig+0x2c0>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	085b      	lsrs	r3, r3, #1
 80038a0:	4a26      	ldr	r2, [pc, #152]	; (800393c <UART_SetConfig+0x2ec>)
 80038a2:	189a      	adds	r2, r3, r2
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	0019      	movs	r1, r3
 80038aa:	0010      	movs	r0, r2
 80038ac:	f7fc fc2c 	bl	8000108 <__udivsi3>
 80038b0:	0003      	movs	r3, r0
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60da      	str	r2, [r3, #12]
        break;
 80038ba:	e029      	b.n	8003910 <UART_SetConfig+0x2c0>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80038bc:	f7fe fcbc 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 80038c0:	0002      	movs	r2, r0
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	085b      	lsrs	r3, r3, #1
 80038c8:	18d2      	adds	r2, r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	0019      	movs	r1, r3
 80038d0:	0010      	movs	r0, r2
 80038d2:	f7fc fc19 	bl	8000108 <__udivsi3>
 80038d6:	0003      	movs	r3, r0
 80038d8:	b29a      	uxth	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60da      	str	r2, [r3, #12]
        break;
 80038e0:	e016      	b.n	8003910 <UART_SetConfig+0x2c0>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	2280      	movs	r2, #128	; 0x80
 80038ea:	0212      	lsls	r2, r2, #8
 80038ec:	189a      	adds	r2, r3, r2
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	0019      	movs	r1, r3
 80038f4:	0010      	movs	r0, r2
 80038f6:	f7fc fc07 	bl	8000108 <__udivsi3>
 80038fa:	0003      	movs	r3, r0
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60da      	str	r2, [r3, #12]
        break;
 8003904:	e004      	b.n	8003910 <UART_SetConfig+0x2c0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003906:	2313      	movs	r3, #19
 8003908:	18fb      	adds	r3, r7, r3
 800390a:	2201      	movs	r2, #1
 800390c:	701a      	strb	r2, [r3, #0]
        break;
 800390e:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8003910:	2313      	movs	r3, #19
 8003912:	18fb      	adds	r3, r7, r3
 8003914:	781b      	ldrb	r3, [r3, #0]

}
 8003916:	0018      	movs	r0, r3
 8003918:	46bd      	mov	sp, r7
 800391a:	b007      	add	sp, #28
 800391c:	bd90      	pop	{r4, r7, pc}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	ffff69f3 	.word	0xffff69f3
 8003924:	ffffcfff 	.word	0xffffcfff
 8003928:	fffff4ff 	.word	0xfffff4ff
 800392c:	40013800 	.word	0x40013800
 8003930:	40021000 	.word	0x40021000
 8003934:	40004400 	.word	0x40004400
 8003938:	00f42400 	.word	0x00f42400
 800393c:	007a1200 	.word	0x007a1200

08003940 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	2201      	movs	r2, #1
 800394e:	4013      	ands	r3, r2
 8003950:	d00b      	beq.n	800396a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4a4a      	ldr	r2, [pc, #296]	; (8003a84 <UART_AdvFeatureConfig+0x144>)
 800395a:	4013      	ands	r3, r2
 800395c:	0019      	movs	r1, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	2202      	movs	r2, #2
 8003970:	4013      	ands	r3, r2
 8003972:	d00b      	beq.n	800398c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	4a43      	ldr	r2, [pc, #268]	; (8003a88 <UART_AdvFeatureConfig+0x148>)
 800397c:	4013      	ands	r3, r2
 800397e:	0019      	movs	r1, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	2204      	movs	r2, #4
 8003992:	4013      	ands	r3, r2
 8003994:	d00b      	beq.n	80039ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4a3b      	ldr	r2, [pc, #236]	; (8003a8c <UART_AdvFeatureConfig+0x14c>)
 800399e:	4013      	ands	r3, r2
 80039a0:	0019      	movs	r1, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	2208      	movs	r2, #8
 80039b4:	4013      	ands	r3, r2
 80039b6:	d00b      	beq.n	80039d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4a34      	ldr	r2, [pc, #208]	; (8003a90 <UART_AdvFeatureConfig+0x150>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	0019      	movs	r1, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	2210      	movs	r2, #16
 80039d6:	4013      	ands	r3, r2
 80039d8:	d00b      	beq.n	80039f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4a2c      	ldr	r2, [pc, #176]	; (8003a94 <UART_AdvFeatureConfig+0x154>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	0019      	movs	r1, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	2220      	movs	r2, #32
 80039f8:	4013      	ands	r3, r2
 80039fa:	d00b      	beq.n	8003a14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	4a25      	ldr	r2, [pc, #148]	; (8003a98 <UART_AdvFeatureConfig+0x158>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	0019      	movs	r1, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	2240      	movs	r2, #64	; 0x40
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d01d      	beq.n	8003a5a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4a1d      	ldr	r2, [pc, #116]	; (8003a9c <UART_AdvFeatureConfig+0x15c>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	0019      	movs	r1, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a3a:	2380      	movs	r3, #128	; 0x80
 8003a3c:	035b      	lsls	r3, r3, #13
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d10b      	bne.n	8003a5a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	4a15      	ldr	r2, [pc, #84]	; (8003aa0 <UART_AdvFeatureConfig+0x160>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	0019      	movs	r1, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	2280      	movs	r2, #128	; 0x80
 8003a60:	4013      	ands	r3, r2
 8003a62:	d00b      	beq.n	8003a7c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	4a0e      	ldr	r2, [pc, #56]	; (8003aa4 <UART_AdvFeatureConfig+0x164>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	0019      	movs	r1, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	605a      	str	r2, [r3, #4]
  }
}
 8003a7c:	46c0      	nop			; (mov r8, r8)
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b002      	add	sp, #8
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	fffdffff 	.word	0xfffdffff
 8003a88:	fffeffff 	.word	0xfffeffff
 8003a8c:	fffbffff 	.word	0xfffbffff
 8003a90:	ffff7fff 	.word	0xffff7fff
 8003a94:	ffffefff 	.word	0xffffefff
 8003a98:	ffffdfff 	.word	0xffffdfff
 8003a9c:	ffefffff 	.word	0xffefffff
 8003aa0:	ff9fffff 	.word	0xff9fffff
 8003aa4:	fff7ffff 	.word	0xfff7ffff

08003aa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2269      	movs	r2, #105	; 0x69
 8003aba:	2120      	movs	r1, #32
 8003abc:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	226a      	movs	r2, #106	; 0x6a
 8003ac2:	2120      	movs	r1, #32
 8003ac4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2268      	movs	r2, #104	; 0x68
 8003aca:	2100      	movs	r1, #0
 8003acc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b002      	add	sp, #8
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4909      	ldr	r1, [pc, #36]	; (8003b10 <UART_EndRxTransfer+0x38>)
 8003aec:	400a      	ands	r2, r1
 8003aee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2101      	movs	r1, #1
 8003afc:	438a      	bics	r2, r1
 8003afe:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	226a      	movs	r2, #106	; 0x6a
 8003b04:	2120      	movs	r1, #32
 8003b06:	5499      	strb	r1, [r3, r2]
}
 8003b08:	46c0      	nop			; (mov r8, r8)
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b002      	add	sp, #8
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	fffffedf 	.word	0xfffffedf

08003b14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	225a      	movs	r2, #90	; 0x5a
 8003b26:	2100      	movs	r1, #0
 8003b28:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2252      	movs	r2, #82	; 0x52
 8003b2e:	2100      	movs	r1, #0
 8003b30:	5299      	strh	r1, [r3, r2]

  HAL_UART_ErrorCallback(huart);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	0018      	movs	r0, r3
 8003b36:	f7ff fd7b 	bl	8003630 <HAL_UART_ErrorCallback>
}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b004      	add	sp, #16
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	225a      	movs	r2, #90	; 0x5a
 8003b54:	2100      	movs	r1, #0
 8003b56:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	220f      	movs	r2, #15
 8003b5e:	621a      	str	r2, [r3, #32]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	226a      	movs	r2, #106	; 0x6a
 8003b64:	2120      	movs	r1, #32
 8003b66:	5499      	strb	r1, [r3, r2]

  /* Call user Abort complete callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f7ff fd68 	bl	8003640 <HAL_UART_AbortReceiveCpltCallback>
}
 8003b70:	46c0      	nop			; (mov r8, r8)
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b004      	add	sp, #16
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2269      	movs	r2, #105	; 0x69
 8003b84:	5c9b      	ldrb	r3, [r3, r2]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b21      	cmp	r3, #33	; 0x21
 8003b8a:	d147      	bne.n	8003c1c <UART_Transmit_IT+0xa4>
  {
    if(huart->TxXferCount == 0U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2252      	movs	r2, #82	; 0x52
 8003b90:	5a9b      	ldrh	r3, [r3, r2]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d111      	bne.n	8003bbc <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2180      	movs	r1, #128	; 0x80
 8003ba4:	438a      	bics	r2, r1
 8003ba6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2140      	movs	r1, #64	; 0x40
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e030      	b.n	8003c1e <UART_Transmit_IT+0xa6>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	2380      	movs	r3, #128	; 0x80
 8003bc2:	015b      	lsls	r3, r3, #5
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d114      	bne.n	8003bf2 <UART_Transmit_IT+0x7a>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d110      	bne.n	8003bf2 <UART_Transmit_IT+0x7a>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd4:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	881a      	ldrh	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	05d2      	lsls	r2, r2, #23
 8003be0:	0dd2      	lsrs	r2, r2, #23
 8003be2:	b292      	uxth	r2, r2
 8003be4:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bea:	1c9a      	adds	r2, r3, #2
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	64da      	str	r2, [r3, #76]	; 0x4c
 8003bf0:	e009      	b.n	8003c06 <UART_Transmit_IT+0x8e>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf6:	1c59      	adds	r1, r3, #1
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	64d1      	str	r1, [r2, #76]	; 0x4c
 8003bfc:	781a      	ldrb	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	b292      	uxth	r2, r2
 8003c04:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2252      	movs	r2, #82	; 0x52
 8003c0a:	5a9b      	ldrh	r3, [r3, r2]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b299      	uxth	r1, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2252      	movs	r2, #82	; 0x52
 8003c16:	5299      	strh	r1, [r3, r2]

      return HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	e000      	b.n	8003c1e <UART_Transmit_IT+0xa6>
    }
  }
  else
  {
    return HAL_BUSY;
 8003c1c:	2302      	movs	r3, #2
  }
}
 8003c1e:	0018      	movs	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	b004      	add	sp, #16
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b082      	sub	sp, #8
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2140      	movs	r1, #64	; 0x40
 8003c3a:	438a      	bics	r2, r1
 8003c3c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2269      	movs	r2, #105	; 0x69
 8003c42:	2120      	movs	r1, #32
 8003c44:	5499      	strb	r1, [r3, r2]

  HAL_UART_TxCpltCallback(huart);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f7fc fc33 	bl	80004b4 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	0018      	movs	r0, r3
 8003c52:	46bd      	mov	sp, r7
 8003c54:	b002      	add	sp, #8
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c58:	b590      	push	{r4, r7, lr}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8003c60:	200e      	movs	r0, #14
 8003c62:	183b      	adds	r3, r7, r0
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	215c      	movs	r1, #92	; 0x5c
 8003c68:	5a52      	ldrh	r2, [r2, r1]
 8003c6a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	226a      	movs	r2, #106	; 0x6a
 8003c70:	5c9b      	ldrb	r3, [r3, r2]
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b22      	cmp	r3, #34	; 0x22
 8003c76:	d159      	bne.n	8003d2c <UART_Receive_IT+0xd4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	210c      	movs	r1, #12
 8003c7e:	187b      	adds	r3, r7, r1
 8003c80:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003c82:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	2380      	movs	r3, #128	; 0x80
 8003c8a:	015b      	lsls	r3, r3, #5
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d114      	bne.n	8003cba <UART_Receive_IT+0x62>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d110      	bne.n	8003cba <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9c:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 8003c9e:	187b      	adds	r3, r7, r1
 8003ca0:	183a      	adds	r2, r7, r0
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	8812      	ldrh	r2, [r2, #0]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb2:	1c9a      	adds	r2, r3, #2
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54
 8003cb8:	e010      	b.n	8003cdc <UART_Receive_IT+0x84>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003cba:	230c      	movs	r3, #12
 8003cbc:	18fb      	adds	r3, r7, r3
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	b2d9      	uxtb	r1, r3
 8003cc2:	230e      	movs	r3, #14
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	b2d8      	uxtb	r0, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cce:	1c5c      	adds	r4, r3, #1
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6554      	str	r4, [r2, #84]	; 0x54
 8003cd4:	0002      	movs	r2, r0
 8003cd6:	400a      	ands	r2, r1
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	225a      	movs	r2, #90	; 0x5a
 8003ce0:	5a9b      	ldrh	r3, [r3, r2]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	215a      	movs	r1, #90	; 0x5a
 8003cec:	1c18      	adds	r0, r3, #0
 8003cee:	5250      	strh	r0, [r2, r1]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d119      	bne.n	8003d28 <UART_Receive_IT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4912      	ldr	r1, [pc, #72]	; (8003d48 <UART_Receive_IT+0xf0>)
 8003d00:	400a      	ands	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2101      	movs	r1, #1
 8003d10:	438a      	bics	r2, r1
 8003d12:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	226a      	movs	r2, #106	; 0x6a
 8003d18:	2120      	movs	r1, #32
 8003d1a:	5499      	strb	r1, [r3, r2]

      HAL_UART_RxCpltCallback(huart);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f7fc fb8c 	bl	800043c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	e00a      	b.n	8003d3e <UART_Receive_IT+0xe6>
    }

    return HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	e008      	b.n	8003d3e <UART_Receive_IT+0xe6>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2108      	movs	r1, #8
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8003d3c:	2302      	movs	r3, #2
  }
}
 8003d3e:	0018      	movs	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b005      	add	sp, #20
 8003d44:	bd90      	pop	{r4, r7, pc}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	fffffedf 	.word	0xfffffedf

08003d4c <__libc_init_array>:
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	2600      	movs	r6, #0
 8003d50:	4d0c      	ldr	r5, [pc, #48]	; (8003d84 <__libc_init_array+0x38>)
 8003d52:	4c0d      	ldr	r4, [pc, #52]	; (8003d88 <__libc_init_array+0x3c>)
 8003d54:	1b64      	subs	r4, r4, r5
 8003d56:	10a4      	asrs	r4, r4, #2
 8003d58:	42a6      	cmp	r6, r4
 8003d5a:	d109      	bne.n	8003d70 <__libc_init_array+0x24>
 8003d5c:	2600      	movs	r6, #0
 8003d5e:	f000 f821 	bl	8003da4 <_init>
 8003d62:	4d0a      	ldr	r5, [pc, #40]	; (8003d8c <__libc_init_array+0x40>)
 8003d64:	4c0a      	ldr	r4, [pc, #40]	; (8003d90 <__libc_init_array+0x44>)
 8003d66:	1b64      	subs	r4, r4, r5
 8003d68:	10a4      	asrs	r4, r4, #2
 8003d6a:	42a6      	cmp	r6, r4
 8003d6c:	d105      	bne.n	8003d7a <__libc_init_array+0x2e>
 8003d6e:	bd70      	pop	{r4, r5, r6, pc}
 8003d70:	00b3      	lsls	r3, r6, #2
 8003d72:	58eb      	ldr	r3, [r5, r3]
 8003d74:	4798      	blx	r3
 8003d76:	3601      	adds	r6, #1
 8003d78:	e7ee      	b.n	8003d58 <__libc_init_array+0xc>
 8003d7a:	00b3      	lsls	r3, r6, #2
 8003d7c:	58eb      	ldr	r3, [r5, r3]
 8003d7e:	4798      	blx	r3
 8003d80:	3601      	adds	r6, #1
 8003d82:	e7f2      	b.n	8003d6a <__libc_init_array+0x1e>
 8003d84:	08003df4 	.word	0x08003df4
 8003d88:	08003df4 	.word	0x08003df4
 8003d8c:	08003df4 	.word	0x08003df4
 8003d90:	08003dfc 	.word	0x08003dfc

08003d94 <memset>:
 8003d94:	0003      	movs	r3, r0
 8003d96:	1882      	adds	r2, r0, r2
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d100      	bne.n	8003d9e <memset+0xa>
 8003d9c:	4770      	bx	lr
 8003d9e:	7019      	strb	r1, [r3, #0]
 8003da0:	3301      	adds	r3, #1
 8003da2:	e7f9      	b.n	8003d98 <memset+0x4>

08003da4 <_init>:
 8003da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003daa:	bc08      	pop	{r3}
 8003dac:	469e      	mov	lr, r3
 8003dae:	4770      	bx	lr

08003db0 <_fini>:
 8003db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db6:	bc08      	pop	{r3}
 8003db8:	469e      	mov	lr, r3
 8003dba:	4770      	bx	lr
